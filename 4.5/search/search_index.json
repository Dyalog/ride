{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About This Document","text":"<p>This document introduces the Remote Integrated Development Environment (RIDE). It describes the installation process and the RIDE's user interface (windows, menus, customisation options, keycode/keystroke mappings, etc.).</p> <p>RIDE can be extensively customised; this document assumes that the default configuration is in use.</p>"},{"location":"#audience","title":"Audience","text":"<p>It is assumed that the reader has a working knowledge of Dyalog.</p> <p>The Dyalog website contains a range of resources to helo you develop your knowledge. New users might also find that it is helpful to select the Show tips for glyphs check box in the General tab of the Preferences dialog box.</p>"},{"location":"#conventions","title":"Conventions","text":"<p>Unless explicitly stated otherwise, all examples in Dyalog documentation assume that <code>\u2395IO</code> and <code>\u2395ML</code> are both 1.</p> <p>Various icons are used in this document to emphasise specific material. General note icons, and the type of material that they are used to emphasise, include:</p> Symbol Meaning Hints, tips, best practice and recommendations from Dyalog Ltd. Information note highlighting material of particular significance or relevance. Legacy information pertaining to behaviour in earlier releases of Dyalog or to functionality that still exists but has been superseded and is no longer recommended. Warnings about actions that can impact the behaviour of Dyalog or have unforeseen consequences. <p>Although the Dyalog programming language is identical on all platforms, differences do exist in the way some functionality is implemented and in the tools and interfaces that are available. Dyalog publishes a full list of the platforms on which Dyalog is supported. Within this document, differences in behaviour between operating systems are identified with the following icons (representing macOS, Linux, UNIX and Microsoft Windows respectively)</p> <p> </p>"},{"location":"3500_ibeam_ride/","title":"3500 ibeam ride","text":""},{"location":"3500_ibeam_ride/#3500-send-html-to-the-ride","title":"3500\u2336 (Send HTML to the RIDE)","text":"<p>Syntax: <code>R\u2190{X}(3500\u2336)Y</code></p> <p>Optionally, <code>X</code> is a simple character vector or scalar, the contents of which are used as the caption of an embedded browser window opened by the RIDE client. If omitted, then the caption defaults to \"<code>3500\u2336</code>\".</p> <p><code>Y</code> is a simple character vector of HTML markup, the contents of which are displayed in the embedded browser tab.</p> <p><code>R</code> identifies whether the write to the RIDE was successful. Possible values are:</p> <ul> <li><code>0</code> : the write to the RIDE client was successful</li> <li><code>\u00af1</code> : the RIDE client is not enabled</li> </ul>"},{"location":"3501_ibeam_ride/","title":"3501 ibeam ride","text":""},{"location":"3501_ibeam_ride/#3501-connected-to-the-ride","title":"3501\u2336 (Connected to the RIDE?)","text":"<p>Syntax: <code>R\u2190{X}(3501\u2336)Y</code></p> <p><code>X</code> and <code>Y</code> can be any value (ignored).</p> <p><code>R</code> identifies whether the Dyalog Session is running through the RIDE. Possible values are:</p> <ul> <li><code>0</code> : the Session is not running through the RIDE</li> <li><code>1</code> : the Session is running through the RIDE</li> </ul>"},{"location":"3502_ibeam_ride/","title":"3502 ibeam ride","text":""},{"location":"3502_ibeam_ride/#3502-manage-ride-connectors","title":"3502\u2336 (Manage RIDE Connectors)","text":"<p>By default, the RIDE is not enabled on run-time executables. For security reasons, enabling the RIDE is a two-step process rather than using (for example) a single configuration parameter. To enable the RIDE, two steps must be taken:</p> <ol> <li>Set the RIDE_INIT configuration parameter (see Section ) on the machine on which the run-time interpreter is running to an appropriate value.</li> <li>Execute <code>3502\u23361</code> in your application code.</li> </ol> <p>The run time interpreter can then attempt to connect to a RIDE client.</p> <p>Enabling the RIDE to access applications that use the run-time interpreter means that the APL code of those applications can be accessed. The I-beam mechanism described above means that the APL code itself must grant the right for a RIDE client to connect to the run time interpreter. Although Dyalog Ltd might change the details of this mechanism, the APL code will always need to grant connection rights. In particular, no mechanism that is only dependent on configuration parameters will be implemented.</p> <p>Syntax: <code>R\u21903502\u2336Y</code></p> <p><code>R</code> is <code>0</code> if the call is successful, otherwise an integer (positive or negative) is returned.</p> <p><code>Y</code> can be any of the following possible values:</p> <ul> <li><code>0</code> : disable any active RIDE connections.<code>R</code> is always <code>0</code></li> <li><code>R</code> is always <code>0</code></li> <li><code>1</code> : enable the RIDE using the initialisation string defined in the RIDE_INIT configuration parameter  (see Section 1.0.1):if <code>R</code> is <code>0</code>, then the RIDE was disabled and is now successfully enabledif <code>R</code> is <code>\u00af1</code>, then the RIDE was already activeif <code>R</code> is <code>32</code>, then the RIDE DLL/shared library is not availableif <code>R</code> is <code>64</code>, then the RIDE_INIT configuration parameter is not correctly defined</li> <li>if <code>R</code> is <code>0</code>, then the RIDE was disabled and is now successfully enabled</li> <li>if <code>R</code> is <code>\u00af1</code>, then the RIDE was already active</li> <li>if <code>R</code> is <code>32</code>, then the RIDE DLL/shared library is not available</li> <li>if <code>R</code> is <code>64</code>, then the RIDE_INIT configuration parameter is not correctly defined</li> <li>a simple character vector : replace the RIDE_INIT configuration parameter with the specified initialisation string, which should be in the format specified in Section . For example, <code>3502\u2336'SERVE:*:4502'</code> configures the interpreter to accept incoming RIDE connections from any machine on port 4502, and then enables the RIDE with that configuration.if <code>R</code> is <code>0</code>, then the RIDE was disabledif <code>R</code> is <code>\u00af2</code>, then the RIDE was active</li> <li>if <code>R</code> is <code>0</code>, then the RIDE was disabled</li> <li>if <code>R</code> is <code>\u00af2</code>, then the RIDE was active</li> </ul> <p>On a run-time interpreter, <code>3502\u23361</code> is the only way to enable the RIDE.</p> <p>If the RIDE_INIT configuration parameter is set but the RIDE DLLs/shared libraries are not available, then a run-time interpreter will start but the subsequent call to <code>3502\u2336</code> will be unsuccessful.</p>"},{"location":"about_this_document/","title":"About This Document","text":"<p>This document introduces the Remote Integrated Development Environment (RIDE). It describes the installation process and the RIDE's user interface (windows, menus, customisation options, keycode/keystroke mappings, etc.).</p> <p>RIDE can be extensively customised; this document assumes that the default configuration is in use.</p>"},{"location":"about_this_document/#audience","title":"Audience","text":"<p>It is assumed that the reader has a working knowledge of Dyalog.</p> <p>For information on the resources available to help develop your Dyalog knowledge, see https://www.dyalog.com/introduction.htm. New users might also find that it is helpful to select the Show tips for glyphs check box in the General tab of the Preferences dialog box.</p>"},{"location":"action_menu/","title":"Action menu","text":""},{"location":"action_menu/#action-menu","title":"Action Menu","text":"<p>The options available under the Action menu are detailed in below. These enable Edit and Trace windows to be opened and allow currently-running APL code to be interrupted with trappable events.</p> Item Description Edit If the cursor is on or immediately after <code>&lt;object name&gt;</code> , then opens an Edit window on that name. Trace In the Session window: If the cursor is on a line containing calls to multi-line functions, a Trace window is opened and the functions traced ( explicit trace ). If the cursor is on a line containing no text and there is a suspended function (or operator) on the execution stack, open a Trace window for that function ( naked trace ) In a Trace window: Open a new Trace window for any multi-line function (or operator) in that line and trace that line as it is evaluated. Clear all trace/stop/monitor Removes any trace/stop/monitor flags  (as set by <code>\u2395TRACE</code> / <code>\u2395STOP</code> / <code>\u2395MONITOR</code> ) from all functions in the workspace. Weak Interrupt Suspends execution at the start of the next line. Strong Interrupt Suspends execution after the current primitive operation."},{"location":"autocomplete/","title":"Autocomplete","text":""},{"location":"autocomplete/#autocomplete","title":"Autocomplete","text":"<p>Applicable in the Session window and the Edit window</p> <p>The RIDE includes autocomplete functionality for names to reduce the likelihood of errors when including them in an expression (and to save the user having to enter complete names or remember cases for case-sensitive  names).</p> <p>As a name is entered, the RIDE displays a pop-up window of suggestions based on the characters already entered and the context in which the name is being used.</p> <p>For example, if you enter a <code>\u2395</code> character, the pop-up list of suggestions includes all the system names (for example, system functions and system variables). Entering further characters filters the list so that only those system functions and variables that start with the exact string entered are included.</p> <p>When you start to enter a name in the Session window, the pop-up list of suggestions includes all the namespaces, variables, functions and operators that are defined in the current namespace. When you start to enter a name in the Edit window, the pop-up list of suggestions also includes all names that are localised in the function header.</p> <p>To select a name from the pop-up list of suggestions, do one of the following:</p> <ul> <li>click the mouse on the name in the pop-up list</li> <li>use the right arrow key to select the top name in the pop-up list</li> <li>use the up and down arrow keys to navigate through the suggestions and the right arrow key or the TAB key to enter the currently-highlighted name</li> </ul> <p>The selected name is then completed in the appropriate window.</p> <p>This feature can be disabled or customised in the General tab of the Preferences dialog box (see Section ).</p>"},{"location":"breakpoints/","title":"Breakpoints","text":""},{"location":"breakpoints/#breakpoints","title":"Breakpoints","text":"<p>Applicable in the Edit window and the Trace window</p> <p>When a function that includes a breakpoint is run, its execution is suspended immediately before executing the line on which the breakpoint is set and the Trace window is automatically opened (assuming that automatic trace is enabled \u2013 see Section ).</p> <p>Breakpoints are defined by dyadic <code>\u2395STOP</code> and can be toggled on and off in an Edit or Trace window by left-clicking on the far left of the line before which the breakpoint is to be applied or by placing the cursor anywhere in the line before which the breakpoint is to be applied and entering the Toggle Breakpoint command (). Note that: <ul> <li>Breakpoints set or cleared in an Edit window are not established until the function is fixed.</li> <li>Breakpoints set or cleared in a Trace window are established immediately.</li> </ul> <p>When a breakpoint is reached during code execution, event 1001 is generated; this can be trapped. For more information, see  <code>\u2395TRAP</code> in the Dyalog APL Language Reference Guide.</p>"},{"location":"caption/","title":"Caption","text":""},{"location":"caption/#caption","title":"Caption","text":"<p>The caption at the top of the Session window is the name of the Session.</p> <p>The caption can be customised (see Section ).</p>"},{"location":"colours_tab/","title":"Colours tab","text":""},{"location":"colours_tab/#colours-tab","title":"Colours Tab","text":"<p>Allows customisation of the syntax colouring (see Section ). Several schemes are provided, any of which can be used as they are or further customised.</p> <p>To change the syntax colouring to a predefined scheme</p> <ol> <li>Open the Colours tab.</li> <li>In the Scheme field, select the syntax colouring scheme that you want to use. When a scheme is selected, the example shown is updated to use that colour scheme.</li> <li>Click OK to save your changes and close the Preferences dialog box, Apply to save your changes without closing the Preferences dialog box or Cancel to close the Preferences dialog box without saving your changes.</li> </ol> <p>To define a new syntax colouring scheme</p> <ol> <li>Open the Colours tab.</li> <li>In the Scheme field, select the syntax colouring scheme that is closest to the scheme that you want to define. When a scheme is selected, the example shown is updated to use that colour scheme.</li> <li>Click Clone.</li> <li>Define your colour scheme. To do this:Select the element that you would like to change the display of from the drop-down list or by clicking in the example. The customisation options reflect the current settings for the selection made. Some elements have a limited set of options, for example, the cursor element has no bold/italic/underline option.Select a foreground colour and background (highlighting) colour for that syntax as required. If a background colour is selected, then the slide bar can be used to set its transparency.Select the appropriate check boxes to make that syntax bold, italic or underlined as required.Repeat as required.</li> <li>Select the element that you would like to change the display of from the drop-down list or by clicking in the example. The customisation options reflect the current settings for the selection made. Some elements have a limited set of options, for example, the cursor element has no bold/italic/underline option.</li> <li>Select a foreground colour and background (highlighting) colour for that syntax as required. If a background colour is selected, then the slide bar can be used to set its transparency.</li> <li>Select the appropriate check boxes to make that syntax bold, italic or underlined as required.</li> <li>Repeat as required.</li> <li>Optionally, rename your colour scheme. To do this:Click Rename. The name in the Scheme field becomes editable. Edit the name in the Scheme field.</li> <li>Click Rename.</li> <li>Edit the name in the Scheme field.</li> <li>Click OK to save your changes and close the Preferences dialog box, Apply to save your changes without closing the Preferences dialog box or Cancel to close the Preferences dialog box without saving your changes.</li> </ol>"},{"location":"configuration_ini_file/","title":"Configuration ini file","text":""},{"location":"configuration_ini_file/#configuration-ini-file","title":"Configuration (.ini) File","text":"<p>A .ini configuration file can be used to define settings for the RIDE_INIT configuration parameter. By default, the interpreter will look for a ride.ini file in:</p> <ul> <li>the directory in which the default session and log files are stored, for example, C:\\Users\\JohnDoe\\AppData\\Local\\Programs\\Dyalog\\ (on Microsoft Windows)</li> <li>$HOME/.dyalog/ (on IBM AIX, macOS and Linux)</li> </ul> <p>This file is not automatically created by Dyalog but can be created manually. Examples of the fields that you might want to include within the .ini configuration file are included in Appendix 1.</p> <p>A different name and location for the .ini configuration file can be specified by including a second <code>mode</code>, <code>CONFIG</code>, in the RIDE_INIT parameter (see Section 1.0.1) and setting it so that <code>CONFIG=&lt;filename&gt;</code>, where <code>&lt;filename&gt;</code> is the fully-qualified path to, and name of, a .ini configuration file containing name-value pairs related to mode, certificate details, and so on.</p> <p>The .ini configuration file must be located on the machine on which the interpreter is running (this is not necessarily the same machine as the one on which the RIDE is running).</p>"},{"location":"configuration_parameters/","title":"Configuration parameters","text":""},{"location":"configuration_parameters/#configuration-parameters","title":"Configuration Parameters","text":"<p>Some customisation can be performed using configuration parameters outside a Session. For details of other configuration parameters that can be set, and the syntax used to set them, see the Dyalog for  Installation and Configuration Guide specific to the operating system that you are using. <p>Changes made to configuration parameters in the dyalog.config file only impact local interpreters (that is, interpreters that are configured by that file) and do not impact interpreters that the RIDE can connect with on other machines.</p>"},{"location":"configuration_parameters_ridespecific/","title":"Configuration parameters ridespecific","text":""},{"location":"configuration_parameters_ridespecific/#configuration-parameters","title":"Configuration Parameters","text":"<p>There are two configuration parameters that are relevant to the RIDE:</p> <ul> <li>RIDE_EDITOR (set on the machine that the RIDE is running on) \u2013 see Section </li> <li>RIDE_INIT (set on the machine that the interpreter is running on) \u2013 see Section </li> </ul>"},{"location":"context_menu/","title":"Context menu","text":""},{"location":"context_menu/#context-menu","title":"Context Menu","text":"<p>A context menu is available by right-clicking within the Session, Edit and Trace windows. The options available under the context menu are dependent on the window from which it was accessed and are detailed in below.</p> Item Description Fix Edit : Fixes the function without closing the Edit window. Skip to line Trace : Moves the current execution marker to the line on which the cursor is positioned. Cut Session/Edit/Trace : Deletes the selected text from the active window and places it on the clipboard. Only enabled when text is selected. Never enabled in the Trace window. Copy Session/Edit/Trace : Copies the selected text to the clipboard. Only enabled when text is selected. Paste Session/Edit/Trace : Pastes the text contents of the clipboard into the active window at the current location. Never enabled in the Trace window. Undo Session/Edit/Trace : Reverses the previous action (where possible). Never enabled in the Trace window. Redo Session/Edit/Trace : Reverses the effect of the previous Undo. Never enabled in the Trace window."},{"location":"context_sensitive_help/","title":"Context sensitive help","text":""},{"location":"context_sensitive_help/#context-sensitive-help","title":"Context-Sensitive Help","text":"<p>Applicable in the Session window, Edit window and Trace window</p> <p>With the cursor on or immediately after any system command, system name, control structure keyword or primitive glyph, enter the Help command (). The documentation for that system command, system name, control structure keyword or primitive glyph will be displayed."},{"location":"customising_your_session/","title":"Customising Your Session","text":"<p>The appearance and behaviour of a Dyalog Session running through the RIDE can be customised to meet personal preferences and corporate guidelines. Configuration can be performed:</p> <ul> <li>through the View menu</li> <li>through the Preferences dialog box</li> <li>using configuration parameters</li> </ul> <p>Customisations performed using any of these methods persist between Sessions (they also persist when the installed version of Dyalog is upgraded).</p> <p>To remove all customisations, reset all RIDE-specific settings and return to the initial default settings, rename/delete the following directory: - Linux: <code>$HOME/.config/Ride-&lt;version&gt;</code> - macOS: <code>$HOME/Library/Application Support/Ride-&lt;version&gt;</code> (hidden directory \u2013 access from the command line) - Microsoft Windows: <code>%APPDATA%\\Ride-&lt;version&gt;</code></p>"},{"location":"customising_your_session/#view-menu","title":"View Menu","text":"<p>The View menu includes options that enable the appearance of the Dyalog Session running through the RIDE to be changed. Select these options to:</p> <ul> <li>show/hide the Language bar)</li> <li>show/hide the Status bar)</li> <li>show/hide the Workspace Explorer)</li> <li>show/hide the debug information window)</li> <li>change the font size in all windows in the Session</li> <li>configure the display/functionality of the Edit/Trace windows</li> </ul>"},{"location":"customising_your_session/#preferences-dialog-box","title":"Preferences Dialog Box","text":"<p>The Preferences dialog box can be used to customise:</p> <ul> <li>the automatic formatting of text in an Edit window)</li> <li>the default keyboard key mappings for APL glyphs</li> <li>the keyboard shortcuts for command codes</li> <li>the saved responses for dialog box options</li> <li>the syntax colouring and background colour</li> <li>the caption of the Session window (see [Section ])</li> <li>the display of floating Edit/Trace windows </li> </ul> <p>The Preferences dialog box can be opened in any of the following ways:</p> <ul> <li>selecting the <code>Edit &gt; Preferences</code> menu option</li> <li>clicking the  icon on the left hand side of the Status bar</li> <li>clicking on the  button on the right hand side of the Language bar</li> <li>entering the Show Preferences command (<code>&lt;PRF&gt;</code>)</li> </ul> <p>The Preferences dialog box comprises multiple tabs. The  button enables the contents of the Keyboard and Shortcuts tabs to be printed.</p>"},{"location":"customising_your_session/#general-tab","title":"General Tab","text":"<p>Allows customisation of a variety of features.</p> <p>To change the general configuration options</p> <ol> <li>Open the General tab.</li> <li>Select the appropriate check boxes and set the variables as required:</li> <li> <p>Indent content when an editor is opened</p> <p>Select this to apply the indentation rules to the contents of an Edit window when it is opened. - Handle formatting through the interpreter</p> <p>Select this to use the interpreter to reformat code. This is useful to avoid formatting changes that could be detected by source code management systems when the RIDE is used to maintain a body of code that is also edited directly using the interpreter. - Auto-indent  spaces <p>Only relevant when Handle formatting through the interpreter is not selected. Select this and define the number of spaces by which each level of nested code should be indented relative to the previous level of indentation in the Edit window. If not selected, code in the Edit window will be left justified. - in methods:    spaces <p>Only relevant when Handle formatting through the interpreter is not selected. Select this and define the number of spaces by which the contents of tradfns should be indented relative to the start/end <code>\u2207</code> glyphs. - Indent lines that contain only a comment</p> <p>Only relevant when Handle formatting through the interpreter is not selected. Select this to apply the appropriate indentation to lines that start with the <code>\u235d</code> glyph. If this is not selected, then lines that start with the <code>\u235d</code> glyph remain as positioned by the user. - Highlight matching brackets: <code>() [] {}</code></p> <p>Select this to automatically highlight the matching start and end enclosures when positioning the cursor before or after one of them (with contiguous brackets, the bracket immediately before the cursor has its other enclosure highlighted). - Auto-close brackets</p> <p>Select this to automatically add the paired enclosure when an opening enclosure is entered. - Autocompletion</p> <p>Select an autocompletion option from the drop-down list (autocompletion makes suggestions when entering the name of, for example, namespaces, variables, functions, operators, user commands and system names). Options include:</p> <ul> <li>off \u2013 disables autocomplete functionality.</li> <li>classic \u2013 displays a pop-up window of suggestions based on the characters already entered and the context in which the name is being used (see Section ).</li> <li>shell \u2013 resembles the autocomplete functionality of the Linux bash shell in its use of the tab key.</li> <li> <p>Autocompletion after <code>&lt;time&gt;</code> ms</p> <p>Specify a time interval after which the RIDE's autocompletion functionality is activated.     - Autocomplete control structure with snippets Select this to be presented with auto-completion template options for control structures in the Edit window. - Highlight matching words</p> </li> </ul> <p>Select this to highlight all occurrences of a selected string in the same window. - Show value tips</p> <p>Select this to display the referent of a name. When the cursor is positioned over or immediately after a name, the name is highlighted and its referent is displayed (for example, the value of a variable or the body of a function). - Show tips for glyphs</p> <p>Select this to show the tooltip for a  glyph. When the cursor is positioned over or immediately after a glyph, the glyph is highlighted and information about it is displayed \u2013 this includes the name of the glyph, the keyboard shortcut to enter it, its monadic/dyadic name and examples of its syntax, arguments and result. - Auto PW</p> <p>Select this to display text in the Session window up to the full width of the Session window before wrapping (automatically updates when the Session is resized). Also sets <code>\u2395PW</code> to this value. - Persistent history <code>&lt;number&gt;</code> lines</p> <p>Select this and define the number of lines that are available to recall using the Backward/Undo command (<code>&lt;BK&gt;</code>). This specifies how many input lines RIDE remembers from the end of one RIDE session to the start of the next session. - Block cursor</p> <p>Select this to display the cursor as a solid rectangular block rather than a vertical line. - Cursor blinking</p> <p>Select a cursor animation from the drop-down list (for example, blink or solid). - Highlight current line</p> <p>Select an option from the drop-down list to indicate how the line that the cursor is currently positioned on should be emphasised (applies to all windows). Options include:none \u2013 do not indicate the current line.gutter \u2013 display a small grey rectangle in the first column of the line.line \u2013 display a grey rectangle around the entire line except the first column.all \u2013 gutter and line. - none \u2013 do not indicate the current line. - gutter \u2013 display a small grey rectangle in the first column of the line. - line \u2013 display a grey rectangle around the entire line except the first column. - all \u2013 gutter and line. - Minimap enabled</p> <p>Select this to display a dynamic impression of the entire (or very large portion of) contents of the Session/Edit window in a column on the right\u2011hand side of that window. Clicking within the minimap moves the display to that location. - Minimap render characters</p> <p>Only relevant when Minimap enabled is selected. Select this to use tiny rendered font in the minimap rather than greeking (showing a representation of the text). - Minimap show slider</p> <p>Only relevant when Minimap enabled is selected. Select an option from the drop-down list to indicate how the currently-displayed content of the window is highlighted in the minimap. Options include:always \u2013 the current display is always highlighted in the minimap.mouseover \u2013 the current display is only highlighted in the minimap when the mouse is positioned over the minimap. - always \u2013 the current display is always highlighted in the minimap. - mouseover \u2013 the current display is only highlighted in the minimap when the mouse is positioned over the minimap. - Double click to edit</p> <p>Select this to open the Edit window when double-clicking within a word rather than selecting/highlighting the whole word. - Show quit prompt</p> <p>Select this to display a confirmation dialog box when exiting the RIDE session. - Show toolbar in editor/trace windows</p> <p>Select this to display the toolbar in the Edit/Trace windows. - Connect on quit</p> <p>Select this to be returned to the RIDE-Dyalog Session dialog box on exiting a Session. - Include filename in editor title</p> <p>Select this to include an object's associated filename in the caption at the top of the Edit window. 3. Click OK to save your changes and close the Preferences dialog box, Apply to save your changes without closing the Preferences dialog box or Cancel to close the Preferences dialog box without saving your changes.</p> <p>Settings that impact the automatic reformatting of code can cause changes to whitespace \u2013 this can be interpreted as changes to the source code. This means that:</p> <ul> <li>opening a scripted object in the Edit window can cause the source of that object to change (when closing an Edit window, you might be prompted to save a function even though you have not made any changes to it).</li> <li>viewing an object can change its file timestamp; source code management systems can subsequently report changes due to the changed file timestamp.</li> <li>source code changes resulting from reformatting will be evident in the results of system functions such as  <code>\u2395AT</code>, <code>\u2395SRC</code>, <code>\u2395CR</code>, <code>\u2395VR</code> and <code>\u2395NR</code>.</li> </ul>"},{"location":"customising_your_session/#configuration-parameters","title":"Configuration Parameters","text":"<p>There are two configuration parameters that are relevant to the RIDE:</p> <ul> <li><code>RIDE_EDITOR</code> (set on the machine that the RIDE is running on)</li> <li><code>RIDE_INIT</code> (set on the machine that the interpreter is running on)</li> </ul>"},{"location":"debug_information_window/","title":"Debug information window","text":""},{"location":"debug_information_window/#debug-information-window","title":"Debug Information Window","text":"<p>The debug information window is located to the right of the Session window. It comprises two areas:</p> <ul> <li>The Threads area lists the threads that are currently in existence. For each thread the following information is provided:a description comprising the thread ID (<code>\u2395TID</code>) and name (<code>\u2395TNAME</code>)the state of the thread, that is, what it is doing (for example, <code>Session</code>, <code>Pending</code>, <code>:Hold</code>, <code>\u2395NA</code>)the thread requirements (<code>\u2395TREQ</code>)a flag indicating whether the thread is Normal or Paused</li> <li>a description comprising the thread ID (<code>\u2395TID</code>) and name (<code>\u2395TNAME</code>)</li> <li>the state of the thread, that is, what it is doing (for example, <code>Session</code>, <code>Pending</code>, <code>:Hold</code>, <code>\u2395NA</code>)</li> <li>the thread requirements (<code>\u2395TREQ</code>)</li> <li>a flag indicating whether the thread is Normal or Paused</li> <li>The SI Stack area lists the functions in the execution stack; each function in the list also has the line number and source code of the line that caused the function to be added to the stack. Equivalent to the result of <code>)SI</code>.</li> </ul> <p>Display of the debug information window can be toggled with the View &gt; Show Debug menu option.</p>"},{"location":"display_of_windows/","title":"Display of windows","text":""},{"location":"display_of_windows/#display-of-windows","title":"Display of Windows","text":"<p>By default, the Trace window and Edit windows are docked beneath and to the right of the Session window respectively. If the menu option View &gt; Show Workspace Explorer is checked, then the workspace explorer is docked to the far left of any open windows; if the menu option View &gt; Show Debug is checked, then the debug information window is docked to the far right of any open windows (see Section ).</p> <p>Docked windows can be selected (by clicking within them), resized (by moving the splitter bar) and maximised/minimised (by toggling the icon at the top right of each window).</p> <p>New Edit and Trace windows can be floating rather than docked by selecting the Floating windows checkbox in the Windows tab of the Preferences dialog box (see Section ).</p> <p>Clicking in the tab of any window enables that window to be dragged to a different location.</p>"},{"location":"edit_menu/","title":"Edit menu","text":""},{"location":"edit_menu/#edit-menu","title":"Edit Menu","text":"<p>The options available under the Edit menu are detailed in below. These assist with manipulating text within (and between) windows.</p> Item Description Undo Reverses the previous action. Redo Reverses the effect of the previous Undo . Cut Deletes the selected text from the active window and places it on the clipboard. Copy Copies the selected text to the clipboard. Paste Pastes the text contents of the clipboard into the active window at the current location. Find... Enables a search for every occurrence of a specified string (this can include APL glyphs) within the code in the active window ( Session or Edit ). For details, see Section  . Find and Replace... Enables a search for every occurrence of a specified string (this can include APL glyphs) within the code in the active window ( Session or Edit );optionally, a replacement string can be applied on an individual basis. For details, see Section  . Preferences Opens the Preferences dialog box (see Section  ). <p>A context menu that includes the Undo, Redo, Cut, Copy and Paste options from the Edit menu is available in the Session window, all Edit windows and the Trace window \u2013 see Section .</p>"},{"location":"edit_window/","title":"Edit window","text":""},{"location":"edit_window/#edit-window","title":"Edit Window","text":"<p>This section applies to the RIDE's built-in editor. A different editor can be specified by setting the RIDE_EDITOR configuration parameter to the fully-qualified path of the desired editor's executable file.</p> <p>The Edit window is used to define new objects as well as view/amend existing objects.</p> <p>An Edit window can be opened from the Session window in any of the following ways:</p> <ul> <li>Enter <code>)ED &lt;object name&gt;</code></li> <li>Enter <code>\u2395ED '&lt;object name&gt;'</code></li> <li>Enter <code>&lt;object name&gt;</code> (for an explanation of the  syntax, see Section ) <li>Double-click on/after <code>&lt;object name&gt;</code></li> <p>If the object name does not already exist, then it is assumed to of function/operator type. Different types can be explicitly specified using the <code>)ED</code> or <code>\u2395ED</code> options \u2013 see <code>)ED</code> or <code>\u2395ED</code> in the Dyalog APL Language Reference Guide.</p> <p>An Edit window can be opened from the Trace window by entering the Edit command (), double\u2011clicking the cursor or clicking the  button in the toolbar (see Section ). The position of the cursor when this is done determines the name of the object that the Edit window is for: <ul> <li>If the cursor is on or immediately after <code>&lt;object name&gt;</code>, then the Edit window opens on that name.</li> <li>If the cursor is anywhere else, then the Edit window opens for the most recently-referenced function on the stack. This is a naked edit.</li> </ul> <p>An Edit window can be opened from another Edit window in any of the following ways:</p> <ul> <li>Move the cursor over/after <code>&lt;object name&gt;</code> and enter the Edit command () <li>Double-click on/after <code>&lt;object name&gt;</code></li> <p>By default, the Edit window is docked to the right of the Session Window.</p>"},{"location":"entering_apl_characters/","title":"Entering apl characters","text":""},{"location":"entering_apl_characters/#entering-apl-characters","title":"Entering APL Characters","text":"<p>APL glyphs can be entered in a Dyalog Session running through the RIDE by:</p> <ul> <li>typing the glyph in the Session window or Edit window using the appropriate key combination (see Section ).</li> <li>clicking the appropriate glyph on the Language bar (see Section ) \u2013 this inserts that glyph into the active Session/Edit window at the position of the cursor.</li> </ul> <p>When typing a glyph directly rather than using the Language bar, if you pause after entering the prefix key then the autocomplete functionality (see Section ) displays a list of all the glyphs that can be produced. If you enter the prefix key a second time then a list of all the glyphs that can be produced is again displayed but this time with the names (formal and informal) that are used for each glyph.</p> <p>For example:       `      \u235d default prefix key</p> <p>The autocomplete functionality list includes the following for the <code>\u235f</code> glyph: \u235f <code>* ``logarithm\u235f</code> <code>naturallogarithm\u235f `*</code>circlestar\u235f <code>* ``starcircle\u235f</code> ``splat</p> <p>This means that you can enter the <code>\u235f</code> glyph by selecting (or directly typing) any of the following:       `*      <code>logarithm</code>naturallogarithm      <code>circlestar</code>starcircle      ``splat</p> <p>As you enter a name, the autocomplete functionality restricts the list of options to those that match the entered name. For example, entering:       ``ci</p> <p>restricts the list to: \u235f <code>* ``circlestar\u25cb</code>\u25cb <code>circular\u233d `%</code>circlestile\u2296 <code>&amp; ``circlebar\u2349</code>^ <code>circlebackslash\u2365 `O</code>circlediaeresis</p>"},{"location":"entering_expressions/","title":"Entering expressions","text":""},{"location":"entering_expressions/#entering-expressions","title":"Entering Expressions","text":"<p>The RIDE provides several mechanisms that assist with accuracy and provide clarity when entering expressions in a Dyalog Session, including, Section , Section , Section  and Section .</p>"},{"location":"executing_a_new_expression/","title":"Executing a new expression","text":""},{"location":"executing_a_new_expression/#executing-a-new-expression","title":"Executing a New Expression","text":"<p>Applicable in the Session window</p> <p>After entering a new expression in the input line, that expression is executed by pressing the Enter key or with the Enter command (). Following execution, the expression (and any displayed results) become part of the Session log."},{"location":"executing_expressions/","title":"Executing expressions","text":""},{"location":"executing_expressions/#executing-expressions","title":"Executing Expressions","text":""},{"location":"exiting_the_edit_window/","title":"Exiting the edit window","text":""},{"location":"exiting_the_edit_window/#exiting-the-edit-window","title":"Exiting the Edit Window","text":"<p>To save changes and close the Edit window:</p> <ul> <li>click  in the Edit window's tab and select yes when prompted whether to save changes</li> <li>click  in the Edit window's toolbar</li> <li>use the Escape command () <p>To close the Edit window without saving changes:</p> <ul> <li>click  in the Edit window's tab and select no when prompted whether to save changes</li> <li>use the Quit command ()"},{"location":"exiting_the_trace_window/","title":"Exiting the trace window","text":""},{"location":"exiting_the_trace_window/#exiting-the-trace-window","title":"Exiting the Trace Window","text":"<p>To close the Trace window:</p> <ul> <li>click  in the Trace window's tab</li> <li>click  in the Trace window's toolbar</li> <li>use the Escape command () <li>use the Quit command () <li>press the Esc key</li> <p>When the Trace window is closed, the function within that Trace window is removed from the stack. It is possible to close all Trace/Edit windows without clearing the stack by selecting the Window &gt; Close All Windows menu option or using <code>2023\u2336</code> (for information on this I-beam, see the Dyalog APL Language Reference Guide).</p>"},{"location":"file_menu/","title":"File menu","text":""},{"location":"file_menu/#file-menu","title":"File Menu","text":"<p>The options available under the File menu are detailed in below. These control the RIDE\u2011enabled APL process connections (both on local and remote machines).</p> Item Description Open... Prompts for a filename. If a workspace file is selected (a .dws file) then it is loaded into the Session; any other file is opened in the Edit window. Only relevant if the Session was started using the Start connection type (see Section  ). New Session Starts a new Dyalog Session (a new instance of the interpreter). Only relevant if the Session was started using the Start connection type (see Section  ). Connect\u2026 Opens the RIDE-Dyalog Session dialog box (see Section  ). Quit Terminates the Dyalog Session (see Section  )."},{"location":"function_key_configuration/","title":"Function key configuration","text":""},{"location":"function_key_configuration/#function-key-configuration","title":"Function Key Configuration","text":"<p>Character strings (including command keys) can be associated with programmable function keys using the <code>\u2395PFKEY</code> system function. When running a Dyalog Session through the RIDE, <code>\u2395PFKEY</code> can be used to define/display the keystrokes for a designated function key; however, that function key does not acquire the defined set of keystrokes, rendering <code>\u2395PFKEY</code> of no real use. Instead, function keys should be set through the Shortcuts tab of the Preferences dialog box (see Section ).</p>"},{"location":"general_tab/","title":"General tab","text":""},{"location":"general_tab/#general-tab","title":"General Tab","text":"<p>Allows customisation of a variety of features.</p> <p>To change the general configuration options</p> <ol> <li>Open the General tab.</li> <li>Select the appropriate check boxes and set the variables as required:- Indent content when an editor is openedSelect this to apply the indentation rules to the contents of an Edit window when it is opened.</li> <li>Handle formatting through the interpreterSelect this to use the interpreter to reformat code. This is useful to avoid formatting changes that could be detected by source code management systems when the RIDE is used to maintain a body of code that is also edited directly using the interpreter.</li> <li> <p>Auto-indent  spacesOnly relevant when Handle formatting through the interpreter is not selected. Select this and define the number of spaces by which each level of nested code should be indented relative to the previous level of indentation in the Edit window. If not selected, code in the Edit window will be left justified.in methods:    spaces Only relevant when Handle formatting through the interpreter is not selected. Select this and define the number of spaces by which the contents of tradfns should be indented relative to the start/end <code>\u2207</code> glyphs. <li> <p>in methods:    spaces <li>Indent lines that contain only a commentOnly relevant when Handle formatting through the interpreter is not selected. Select this to apply the appropriate indentation to lines that start with the <code>\u235d</code> glyph. If this is not selected, then lines that start with the <code>\u235d</code> glyph remain as positioned by the user.</li> <li>Highlight matching brackets: () [] {}Select this to automatically highlight the matching start and end enclosures when positioning the cursor before or after one of them (with contiguous brackets, the bracket immediately before the cursor has its other enclosure highlighted).</li> <li>Auto-close bracketsSelect this to automatically add the paired enclosure when an opening enclosure is entered (see Section ).</li> <li>AutocompletionSelect an autocompletion option from the drop-down list (autocompletion makes suggestions when entering the name of, for example, namespaces, variables, functions, operators, user commands and system names). Options include:off \u2013 disables autocomplete functionality.classic \u2013 displays a pop-up window of suggestions based on the characters already entered and the context in which the name is being used (see Section ).shell \u2013 resembles the autocomplete functionality of the Linux bash shell in its use of the tab key.</li> <li>off \u2013 disables autocomplete functionality.</li> <li>classic \u2013 displays a pop-up window of suggestions based on the characters already entered and the context in which the name is being used (see Section ).</li> <li>shell \u2013 resembles the autocomplete functionality of the Linux bash shell in its use of the tab key.</li> <li>Autocompletion after  msSpecify a time interval after which the RIDE's autocompletion functionality is activated. <li>Autocomplete control structure with snippetsSelect this to be presented with auto-completion template options for control structures in the Edit window.</li> <li>Highlight matching wordsSelect this to highlight all occurrences of a selected string in the same window.</li> <li>Show value tipsSelect this to display the referent of a name. When the cursor is positioned over or immediately after a name, the name is highlighted and its referent is displayed (for example, the value of a variable or the body of a function).</li> <li>Show tips for glyphsSelect this to show the tooltip for a  glyph. When the cursor is positioned over or immediately after a glyph, the glyph is highlighted and information about it is displayed \u2013 this includes the name of the glyph, the keyboard shortcut to enter it, its monadic/dyadic name and examples of its syntax, arguments and result.</li> <li>Auto PWSelect this to display text in the Session window up to the full width of the Session window before wrapping (automatically updates when the Session is resized). Also sets <code>\u2395PW</code> to this value.</li> <li>Persistent history  linesSelect this and define the number of lines that are available to recall using the Backward/Undo command (). This specifies how many input lines RIDE remembers from the end of one RIDE session to the start of the next session. <li>Block cursorSelect this to display the cursor as a solid rectangular block rather than a vertical line.</li> <li>Cursor blinkingSelect a cursor animation from the drop-down list (for example, blink or solid).</li> <li>Highlight current lineSelect an option from the drop-down list to indicate how the line that the cursor is currently positioned on should be emphasised (applies to all windows). Options include:none \u2013 do not indicate the current line.gutter \u2013 display a small grey rectangle in the first column of the line.line \u2013 display a grey rectangle around the entire line except the first column.all \u2013 gutter and line.</li> <li>none \u2013 do not indicate the current line.</li> <li>gutter \u2013 display a small grey rectangle in the first column of the line.</li> <li>line \u2013 display a grey rectangle around the entire line except the first column.</li> <li>all \u2013 gutter and line.</li> <li>Minimap enabledSelect this to display a dynamic impression of the entire (or very large portion of) contents of the Session/Edit window in a column on the right\u2011hand side of that window. Clicking within the minimap moves the display to that location.</li> <li>Minimap render charactersOnly relevant when Minimap enabled is selected. Select this to use tiny rendered font in the minimap rather than greeking (showing a representation of the text).</li> <li>Minimap show sliderOnly relevant when Minimap enabled is selected. Select an option from the drop-down list to indicate how the currently-displayed content of the window is highlighted in the minimap. Options include:always \u2013 the current display is always highlighted in the minimap.mouseover \u2013 the current display is only highlighted in the minimap when the mouse is positioned over the minimap.</li> <li>always \u2013 the current display is always highlighted in the minimap.</li> <li>mouseover \u2013 the current display is only highlighted in the minimap when the mouse is positioned over the minimap.</li> <li>Double click to editSelect this to open the Edit window when double-clicking within a word rather than selecting/highlighting the whole word.</li> <li>Show quit promptSelect this to display a confirmation dialog box when exiting the RIDE session.</li> <li>Show toolbar in editor/trace windowsSelect this to display the toolbar in the Edit/Trace windows.</li> <li>Connect on quitSelect this to be returned to the RIDE-Dyalog Session dialog box on exiting a Session.</li> <li>Include filename in editor titleSelect this to include an object's associated filename in the caption at the top of the Edit window.</li> <li>Click OK to save your changes and close the Preferences dialog box, Apply to save your changes without closing the Preferences dialog box or Cancel to close the Preferences dialog box without saving your changes.</li> <p>Settings that impact the automatic reformatting of code can cause changes to whitespace \u2013 this can be interpreted as changes to the source code. This means that:</p> <ul> <li>opening a scripted object in the Edit window can cause the source of that object to change (when closing an Edit window, you might be prompted to save a function even though you have not made any changes to it).</li> <li>viewing an object can change its file timestamp; source code management systems can subsequently report changes due to the changed file timestamp.</li> <li>source code changes resulting from reformatting will be evident in the results of system functions such as  <code>\u2395AT</code>, <code>\u2395SRC</code>, <code>\u2395CR</code>, <code>\u2395VR</code> and <code>\u2395NR</code>.</li> </ul>"},{"location":"help_menu/","title":"Help menu","text":""},{"location":"help_menu/#help-menu","title":"Help Menu","text":"<p>The options available under the Help menu are detailed in below. These provide access to the Dyalog documentation, website, and support.</p> Item Description Getting Started Opens your default web browser on the Getting Started page of Dyalog Ltd's website. Dyalog Help Opens your default web browser on the Welcome page of Dyalog's online documentation. Language Elements Opens your default web browser on the Language Elements page of Dyalog's online documentation. Documentation Centre Opens your default web browser on the Documentation Centre page of Dyalog Ltd's website. Dyalog Website Opens your default web browser on the home page of Dyalog Ltd's website. Email Dyalog Opens your email client with a pre-populated template for an email to Dyalog support (including subject line and IDE/interpreter information). Latest Enhancements Opens your default web browser on the Key Features page of Dyalog's online documentation. Read Me Opens your default web browser on the Dyalog v ReadMe page, containing the latest information about Dyalog v . Third Party Licences Opens your default web browser on the Licences for Third-Party Components page of Dyalog's online documentation. About Displays the About dialog box, which provides details of the current RIDE and connected Dyalog interpreter."},{"location":"ibeams/","title":"Ibeams","text":""},{"location":"ibeams/#i-beams","title":"I-Beams","text":"<p>I-Beam is a monadic operator that provides a range of system-related services.</p> <p>Syntax: <code>R\u2190{X}(A\u2336)Y</code></p> <p>Any service provided using an I-Beam should be considered as experimental and subject to change \u2013 without notice \u2013 from one release to the next. Any use of I-Beams in applications should, therefore, be carefully isolated in cover-functions that can be adjusted if necessary.</p> <p>There are three I-Beams that are only relevant to the RIDE: Section , Section  and Section .</p>"},{"location":"ini_file/","title":"Ini file","text":""},{"location":"ini_file/#configuration-ini-file","title":"Configuration (.ini) File","text":"<p>A .ini configuration file can be used to define settings for the RIDE_INIT configuration parameter. By default, the interpreter will look for a ride.ini file in:</p> <ul> <li>the directory in which the default session and log files are stored, for example, C:\\Users\\JohnDoe\\AppData\\Local\\Programs\\Dyalog\\ (on Microsoft Windows)</li> <li>$HOME/.dyalog/ (on IBM AIX, macOS and Linux)</li> </ul> <p>This file is not automatically created by Dyalog but can be created manually. Examples of the fields that you might want to include within the .ini configuration file are included in Appendix 1.</p> <p>A different name and location for the .ini configuration file can be specified by including a second <code>mode</code>, <code>CONFIG</code>, in the RIDE_INIT parameter (see Section 1.0.1) and setting it so that <code>CONFIG=&lt;filename&gt;</code>, where <code>&lt;filename&gt;</code> is the fully-qualified path to, and name of, a .ini configuration file containing name-value pairs related to mode, certificate details, and so on.</p> <p>The .ini configuration file must be located on the machine on which the interpreter is running (this is not necessarily the same machine as the one on which the RIDE is running).</p>"},{"location":"input_windows/","title":"Input Windows","text":"<p>Instead of just a single Session window, the Dyalog Development Environment can comprise multiple windows:</p> <ul> <li>Session window \u2013 created when a Dyalog Session is started through the RIDE and always present while the Session is live. There is only one Session window.</li> <li>Edit windows \u2013 created and destroyed dynamically as required. There can be multiple Edit windows (one for each APL object).</li> <li>Trace window \u2013 created and destroyed dynamically as required. There is only one Trace window.</li> </ul> <p>When multiple windows are open, the window that has the focus is referred to as the active window.</p>"},{"location":"input_windows/#session-window","title":"Session Window","text":"<p>The Session window contains:</p> <ul> <li>the input line \u2013 the last line entered in the Session window; this is (usually) the line into which you type an expression to be evaluated.</li> <li>a gutter \u2013 the left-hand side of the window is a gutter that can include input/output information. Specifically:a small red circle in the gutter is present on every line that has been modified since last pressing Enter. This includes old lines that have been modified as well as new lines. These indicators show which lines will be executed when you subsequently hit Enter, at which point the indicator is removed.a left bracket indicates \"groups\" of default output (to distinguish it from <code>\u2395</code> or <code>\u235e</code> output).</li> <li>a small red circle in the gutter is present on every line that has been modified since last pressing Enter. This includes old lines that have been modified as well as new lines. These indicators show which lines will be executed when you subsequently hit Enter, at which point the indicator is removed.</li> <li>a left bracket indicates \"groups\" of default output (to distinguish it from <code>\u2395</code> or <code>\u235e</code> output).</li> <li>the Session log \u2013 a history of previously-entered expressions and the results they produced.</li> </ul> <p>If a log file is being used, then the Session log is loaded into memory when a Dyalog Session is started. When the Dyalog Session is closed, the Session log is written to the log file, replacing its previous contents.</p>"},{"location":"input_windows/#edit-window","title":"Edit Window","text":"<p>Note</p> <p>This section applies to the RIDE's built-in editor. A different editor can be specified by setting the RIDE_EDITOR configuration parameter to the fully-qualified path of the desired editor's executable file.</p> <p>The Edit window is used to define new objects as well as view/amend existing objects.</p> <p>An Edit window can be opened from the Session window in any of the following ways:</p> <ul> <li>Enter <code>)ED &lt;object name&gt;</code></li> <li>Enter <code>\u2395ED '&lt;object name&gt;'</code></li> <li>Enter <code>&lt;object name&gt;</code> (for an explanation of the  syntax, see here) <li>Double-click on/after <code>&lt;object name&gt;</code></li> <p>If the object name does not already exist, then it is assumed to of function/operator type. Different types can be explicitly specified using the <code>)ED</code> or <code>\u2395ED</code> options \u2013 see <code>)ED</code> or <code>\u2395ED</code> in the Dyalog APL Language Reference Guide.</p> <p>An Edit window can be opened from the Trace window by entering the Edit command (), double\u2011clicking the cursor or clicking the  button in the toolbar. The position of the cursor when this is done determines the name of the object that the Edit window is for: <ul> <li>If the cursor is on or immediately after <code>&lt;object name&gt;</code>, then the Edit window opens on that name.</li> <li>If the cursor is anywhere else, then the Edit window opens for the most recently-referenced function on the stack. This is a naked edit.</li> </ul> <p>An Edit window can be opened from another Edit window in any of the following ways:</p> <ul> <li>Move the cursor over/after <code>&lt;object name&gt;</code> and enter the Edit command () <li>Double-click on/after <code>&lt;object name&gt;</code></li> <p>By default, the Edit window is docked to the right of the Session Window.</p>"},{"location":"input_windows/#toolbar","title":"Toolbar","text":"<p>The Edit Window's toolbar:</p> Icon Action Description Save changes and return Saves changes and closes the Edit Window. Toggle line numbers Turns the display of line numbers on/off. Comment selected text Add a comment symbol (<code>\u235d</code>) to the beginning of the line in which the cursor is positioned. If text has been selected, then a comment symbol is added at the start of the line on which the selection starts and at the start of each subsequent line of text within the selection. Same as the Comment Out command (<code>&lt;AO&gt;</code>). Uncomment selected text Removes the comment symbol (<code>\u235d</code>) at the beginning of the line in which the cursor is positioned. If text has been selected, then comment symbols are removed from the start of each selected line of text. Comment symbols that are not at the start of a line of text cannot be removed. Same as the Uncomment command (<code>&lt;DO&gt;</code>). Search Opens the Search bar, enabling a search to be performed."},{"location":"input_windows/#search-and-replace","title":"Search and Replace","text":"<p>The  icon in the Edit window's toolbar opens the Search bar, enabling a search for every occurrence of a specified string (this can include APL glyphs) to be performed within the code in the Edit window; optionally, a replacement string can be applied on an individual basis.</p> <p>The Search bar (default)</p> <p>The  icon (Toggle replace mode) extends the Search bar to include a Replace field and related icons, as shown below.</p> <p>The Search bar (extended to include display of the Replace fields)</p> Icon Action Description Search for previous match Positions the cursor at the previous occurrence of the Search text. Search for next match Positions the cursor at the next occurrence of the Search text. Find in selection Only searches within the selected text. Close Closes the Search bar. Replace Replaces the selected text in the Edit window with the text specified in the Replace field of the Search bar and highlights the next match. Replace all Replaces all occurrences of the text specified in the Find field of the Search bar with that specified in the Replace field of the Search bar. <p>The Find field includes three filters, as detailed below. Any combination of these filters can be applied when performing a search.</p> Icon Action Description Match case Applies a case-sensitive filter so that only occurrences that match the case of the string in the Find field are highlighted. Match whole word Only highlights whole words that match the string in the Find field. Some glyphs are treated as punctuation when identifying \"whole words\", for example, <code>; : , { } [ ] ( )</code> Use regular expression Allows regular expressions to be specified in the Find field. <p>To search for a string</p> <ol> <li>Enter the string to search for in the Find field in one of the following ways:- Press the Search button  and enter the string directly in the Find field.</li> <li>Enter the Search command (<code>&lt;SC&gt;</code>) and enter the string directly in the Find field.</li> <li> <p>Select the string in the Trace window and enter the Search command (<code>&lt;SC&gt;</code>) or press the Search button ; the selected string is copied to the Find field. All occurrences of the specified string are highlighted in the Edit window and the number of occurrences is displayed to the right of the Find field. If the content of the Edit window is sufficiently long for there to be a vertical scroll bar, then the locations of occurrences of the specified string within the entire content are identified by yellow marks overlaid on the scroll bar.</p> </li> <li> <p>Press the Enter key to select the first occurrence of the search string after the last position of the cursor.</p> </li> <li>Press the Search for next match button  to advance the selection to the next occurrence of the search string.</li> <li>Repeat step 3 as required (the search is cyclic).</li> <li>Press the Esc key to exit the search functionality. <p>To replace a string</p> <ol> <li>Do one of the following:</li> <li>Enter the replacement string directly in the Replace field.</li> <li>Press the Enter key to select the first occurrence of the search string after the last position of the cursor.</li> <li>Do one of the following:</li> <li>Press the Close button to exit the search and replace functionality.</li> </ol>"},{"location":"input_windows/#trace-window","title":"Trace Window","text":"<p>The Trace window aids debugging by enabling you to step through your code line by line, display variables in Edit windows and watch them change as the execution progresses. Alternatively, you can use the Session window and Edit windows to experiment with and correct your code.</p> <p>A Trace window can be opened from the Session window by entering  <code>&lt;expression&gt;</code> <code>&lt;TC&gt;</code>. This is an explicit trace and lets you step through the execution of any non-primitive functions/operators in the expression.</p> <p>By default, Dyalog is also configured to initiate an automatic trace whenever an error occurs, that is, the Trace window opens and becomes the active window and the line that caused the execution to suspend is selected. This is controlled by the interpreter configuration parameter <code>TRACE_ON_ERROR</code> (for information on configuration parameters, see the Dyalog for  Installation and Configuration Guide specific to the operating system that you are using). <p>By default, the Trace window is docked beneath the Session and Edit windows. Other than setting/removing breakpoints, Trace windows are read only.</p>"},{"location":"input_windows/#search","title":"Search","text":"<p>The  icon in the Trace window's toolbar opens the Search bar, enabling a search for every occurrence of a specified string (this can include APL glyphs) to be performed within the code in the Trace window.</p> <p>The Search Bar</p> Icon Action Description Search for previous match Positions the cursor at the previous occurrence of the Search text. Search for next match Positions the cursor at the next occurrence of the Search text. Find in selection Only searches within the selected text. Close Closes the Search bar. <p>To search for a string</p> <ol> <li>Enter the string to search for in the Find field in one of the following ways:- Press the Search button  and enter the string directly in the Find field.</li> <li>Enter the Search command (<code>&lt;SC&gt;</code>) and enter the string directly in the Find field.</li> <li> <p>Select the string in the Trace window and enter the Search command (<code>&lt;SC&gt;</code>) or press the Search button ; the selected string is copied to the Find field. All occurrences of the specified string are highlighted in the Trace window and the number of occurrences is displayed to the right of the Find field. If the content of the Trace window is sufficiently long for there to be a vertical scroll bar, then the locations of occurrences of the specified string within the entire content are identified by yellow marks overlaid on the scroll bar.</p> </li> <li> <p>Press the Enter key to select the first occurrence of the search string after the last position of the cursor.</p> </li> <li>Press the Search for next match button  to advance the selection to the next occurrence of the search string.</li> <li>Repeat step 3 as required (the search is cyclic).</li> <li>Press the Close button  to exit the search functionality.</li> </ol>"},{"location":"input_windows/#toolbar_1","title":"Toolbar","text":"<p>[IMG HERE]</p> <p>The Edit Window's toolbar</p> Icon Action Description Quit this function Cuts the execution stack back one level. Toggle line numbers Turns the display of line numbers on/off. Execute line Executes the current line and advances to the next line. Trace into expression Traces execution of the current line and advances to the next line. If the current line calls a user-defined function then this is also traced. Stop on next line of calling function Continues execution of the code in the Trace window from the current line to completion of the current function or operator. If successful, the selection advances to the next line of the calling function (if there is one). Continue execution of this thread Closes the Trace window and resumes execution of the current application thread from the current line. Continue execution of all threads Closes the Trace window and resumes execution of all suspended threads. Interrupt Interrupts execution with a weak interrupt. Edit name Converts the Trace window into an Edit window as long as the cursor is on a blank line or in an empty space. However, if the cursor is on or immediately after an object name that is not the name of the suspended function, then an Edit window for that object name is opened. Clear stops for this object Clears all breakpoints (resets <code>\u2395STOP</code> ) on the function(s) in the Edit / Trace windows. Search Opens the Search bar, enabling a search to be performed."},{"location":"input_windows/#exiting","title":"Exiting","text":"<p>To close the Trace window:</p> <ul> <li>click  in the Trace window's tab</li> <li>click  in the Trace window's toolbar</li> <li>use the Escape command (<code>&lt;EP&gt;</code>)</li> <li>use the Quit command (<code>&lt;QT&gt;</code>)</li> <li>press the Esc key</li> </ul> <p>When the Trace window is closed, the function within that Trace window is removed from the stack. It is possible to close all Trace/Edit windows without clearing the stack by selecting the <code>Window &gt; Close All Windows</code> menu option or using <code>2023\u2336</code> (for information on this I-beam, see the Dyalog APL Language Reference Guide).</p>"},{"location":"installation/","title":"Installation","text":"<p>This chapter describes how to install the RIDE.</p>"},{"location":"installation/#pre-requisites","title":"Pre-requisites","text":"<p>RIDE can only connect to a Dyalog interpreter that is version 15.0 or later.</p> <p>The RIDE is supported on the following operating systems:</p> <ul> <li> <p>Linux x86_64 \u2013 the following distributions: </p> <ul> <li>Debian 8 onwards</li> <li>Fedora 25 onwards</li> <li>Ubuntu 14.04 onwards</li> </ul> <p>distributions built on top of these should also work (Linux distribution must also have libnss version 3.26 onwards)</p> </li> <li> <p>macOS \u2013 Yosemite onwards</p> </li> <li>Microsoft Windows \u2013 Windows 7 onwards</li> </ul> <p>For the zero-footprint RIDE:</p> <ul> <li>a compatible browser must be installed.</li> <li>the operating system must be supported by the underlying technology.</li> </ul> <p>If Dyalog is not installed on the machine that the RIDE is being installed on, then the APL385 font and keyboard mappings installed with the RIDE mean that they are available when running a Dyalog Session through the RIDE. However, to be able to enter APL glyphs outside a Dyalog Session (for example, in text files or emails) you will need to download and install the appropriate files for your system.</p>"},{"location":"installation/#installing-the-ride","title":"Installing the RIDE","text":"<p>Installation instructions are dependent on operating system.</p>"},{"location":"installation/#zero-footprint","title":"Zero Footprint","text":"<p>The use of the RIDE from a browser requires no installation on the machine where the RIDE will run. However, the RIDE must be installed on the machine where APL is installed, so that Dyalog can act as a web server, making the necessary files available to the browser.</p> <p>Note</p> <p>When installing the RIDE, if you select the default location suggested by the installer then APL can be launched as a RIDE server without creating a configuration file.</p> <p>On non-Windows platforms, the Zero Footprint RIDE is automatically installed to the default location ([DYALOG]/RIDEapp) when Dyalog is installed and no additional installation is necessary to use the Zero Footprint RIDE from a browser.</p>"},{"location":"installation/#installing-on-linux","title":"Installing on Linux","text":"<p>The installation process for the RIDE is the same irrespective of whether it is installed as a stand-alone product or on a machine that already has Dyalog installed.</p> <p>To install the RIDE</p> <ol> <li>Download the RIDE's .deb or .rpm file (whichever is appropriate for your Linux distribution) from the RIDE releases page. If your Linux distribution does not support either .deb or .rpm files, then please contact support@dyalog.com.</li> <li> <p>From the command line, use standard installation commands to install the package.</p> <p>The RIDE is now installed and ready to use. The RIDE icon (shortcut) is added to the desktop.</p> </li> </ol>"},{"location":"installation/#installing-on-macos","title":"Installing on macOS","text":"<p>The RIDE is the default UI for Dyalog on macOS and is installed at the same time as Dyalog (see the Dyalog for macOS Installation and Configuration Guide); no further installation is required.</p> <p>To install the RIDE as a separate, stand-alone, product</p> <ol> <li>Download the RIDE's .pkg file from the RIDE releases page.</li> <li> <p>Double-click on the RIDE's .pkg file.</p> <p>The RIDE Installer window is displayed.</p> </li> <li> <p>Follow the instructions in the RIDE Installer window to successful completion of the installation process.</p> <p>The RIDE is now installed and ready to use. The RIDE icon is added to the Applications directory (accessed by selecting Applications from the Go menu in the Finder menu bar).</p> </li> </ol> <p>Starting the RIDE adds its icon to the dock. To keep the RIDE icon in the dock permanently, right-click on the icon and select Options &gt; Keep in Dock from the drop-down list that appears.</p>"},{"location":"installation/#installing-on-microsoft-windows","title":"Installing on Microsoft Windows","text":"<p>The installation process for the RIDE is the same irrespective of whether it is installed as a stand-alone product or on a machine that already has Dyalog installed.</p> <p>To install the RIDE</p> <ol> <li>Download the RIDE's .zip file from the RIDE releases page.</li> <li>Unzip the downloaded .zip file, placing the <code>setup_ride.exe</code> and <code>setup_ride.msi</code> files in the same location as each other.</li> <li> <p>Double-click on the <code>setup_ride.exe</code> file.</p> <p>The RIDE Installation window is displayed. 4. Follow the instructions in the RIDE Installation window to successful completion of the installation process.</p> <p>The RIDE is now installed and ready to use. The RIDE icon (shortcut) is added to the desktop.</p> </li> </ol>"},{"location":"installation/#configuration-ini-file","title":"Configuration (.ini) File","text":"<p>A .ini configuration file can be used to define settings for the <code>RIDE_INIT</code> configuration parameter. By default, the interpreter will look for a ride.ini file in:</p> <ul> <li>the directory in which the default session and log files are stored, for example, C:\\Users\\JohnDoe\\AppData\\Local\\Programs\\Dyalog (on Microsoft Windows)</li> <li>$HOME/.dyalog (on IBM AIX, macOS and Linux)</li> </ul> <p>This file is not automatically created by Dyalog but can be created manually. Examples of the fields that you might want to include within the .ini configuration file are included in the sample configuration file.</p> <p>A different name and location for the .ini configuration file can be specified by including a second <code>mode</code>, <code>CONFIG</code>, in the RIDE_INIT parameter and setting it so that <code>CONFIG=&lt;filename&gt;</code>, where <code>&lt;filename&gt;</code> is the fully-qualified path to, and name of, a .ini configuration file containing name-value pairs related to mode, certificate details, and so on.</p> <p>Note</p> <p>The .ini configuration file must be located on the machine on which the interpreter is running (this is not necessarily the same machine as the one on which the RIDE is running).</p>"},{"location":"installing_on_linux/","title":"Installing on linux","text":""},{"location":"installing_on_linux/#installing-on-linux","title":"Installing on Linux","text":"<p>The installation process for the RIDE is the same irrespective of whether it is installed as a stand-alone product or on a machine that already has Dyalog installed.</p> <p>To install the RIDE</p> <ol> <li>Download the RIDE's .deb or .rpm file (whichever is appropriate for your Linux distribution) from my.dyalog.com. If your Linux distribution does not support either .deb or .rpm files, then please contact support@dyalog.com.</li> <li>From the command line, use standard installation commands to install the package.</li> </ol>"},{"location":"installing_on_macos/","title":"Installing on macos","text":""},{"location":"installing_on_macos/#installing-on-macos","title":"Installing on macOS","text":"<p>The RIDE is the default UI for Dyalog on macOS and is installed at the same time as Dyalog (see the Dyalog for macOS Installation and Configuration Guide); no further installation is required.</p> <p>To install the RIDE as a separate, stand-alone, product</p> <ol> <li>Download the RIDE's .pkg file from my.dyalog.com.</li> <li>Double-click on the RIDE's .pkg file.</li> <li>Follow the instructions in the RIDE Installer window to successful completion of the installation process.</li> </ol> <p>Starting the RIDE adds its icon to the dock. To keep the RIDE icon in the dock permanently, right-click on the icon and select Options &gt; Keep in Dock from the drop-down list that appears.</p>"},{"location":"installing_on_windows/","title":"Installing on windows","text":""},{"location":"installing_on_windows/#installing-on-microsoft-windows","title":"Installing on Microsoft Windows","text":"<p>The installation process for the RIDE is the same irrespective of whether it is installed as a stand-alone product or on a machine that already has Dyalog installed.</p> <p>To install the RIDE</p> <ol> <li>Download the RIDE's .zip file from my.dyalog.com.</li> <li>Unzip the downloaded .zip file, placing the setup_ride.exe and setup_ride.msi files in the same location as each other.</li> <li>Double-click on the setup_ride.exe file.</li> <li>Follow the instructions in the RIDE Installation window to successful completion of the installation process.</li> </ol>"},{"location":"installing_the_ride/","title":"Installing the ride","text":""},{"location":"installing_the_ride/#installing-the-ride","title":"Installing the RIDE","text":"<p>Installation instructions are dependent on operating system.:</p> <ul> <li> <p>Section </p> </li> <li> <p>Section </p> </li> <li> <p>Section </p> </li> </ul> <p>A Zero Footprint RIDE is also available (independent of operating system \u2013 see Section ).</p>"},{"location":"interrupts/","title":"Interrupts","text":""},{"location":"interrupts/#interrupts","title":"Interrupts","text":"<p>A Dyalog Session running through the RIDE responds to both strong and weak interrupts.</p> <p>Entering a strong interrupt suspends execution as soon as possible (generally after completing execution of the primitive currently being processed). A strong interrupt is issued by selecting Actions &gt; Strong Interrupt in the menu options or by entering the Strong Interrupt command (). <p>Entering a weak interrupt suspends execution at the start of the next line (generally after completing execution of the statement currently being processed). A weak interrupt is issued by selecting Actions &gt; Weak Interrupt in the menu options or by entering the Weak Interrupt command (). <p>When a strong or weak interrupt is issued during code execution, event 1003 or 1002 (respectively) is generated; these can be trapped. For more information, see  <code>\u2395TRAP</code> in the Dyalog APL Language Reference Guide.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>Note</p> <p>The use of the RIDE is subject to the conditions of the MIT licence. The installation and use of the RIDE does not convey any additional rights to use Dyalog or any other Dyalog products. Specifically, although the interpreter can be configured to allow the RIDE to debug runtime executables, you should only do this if your Dyalog licence also allows it.</p> <p>The Remote Integrated Development Environment (RIDE) is a cross-platform, graphical development environment capable of producing a rich user experience on a variety of platforms. It supports the interactive use of APL notation to explore data, discover algorithms and create solutions \u2013 or diagnose problems, resolve issues and resume the execution of running applications.</p> <p>The RIDE runs separately from the APL interpreter, and communicates with it using TCP/IP sockets. The RIDE can be run on macOS, Microsoft Windows and Linux (including the Raspberry Pi). In addition to being used as a front end for APL running locally, it can also be used to launch APL sessions on remote machines or to connect to APL interpreters that are already running \u2013 either locally or remotely.</p> <p>From Dyalog version 17.0, the interpreter can easily be configured to act as a web server which provides the RIDE application as a web page. This makes it possible to run the RIDE in a browser on any platform, without installing it locally. The RIDE needs to be installed on the machine where the interpreter is running, so the files can be provided as a webpage. Because no client-side installation is necessary, this mode is known as Zero Footprint.</p> <p>The RIDE has two main modes of use:</p> <ul> <li> <p>Providing a user interface to an interpreter engine (local or remote).</p> <p>The RIDE is the recommended IDE for Dyalog on macOS or Linux (including the Raspberry Pi). In these environments, an application icon is provided to launch RIDE and an APL interpreter together. In this mode, the RIDE and the interpreter can be thought of as a single unit. Under Microsoft Windows, the native Dyalog IDE continues to provide the richest environment for the development of APL applications for Microsoft Windows users.</p> </li> <li> <p>As a tool for managing connections to a collection of interpreter sessions.</p> <p>In this mode, the RIDE-Dyalog Session dialog box is used to launch or connect to one or more interpreters.</p> <p>Note</p> <p>Although the RIDE can manage multiple concurrent Dyalog Sessions, each Dyalog Session can only be connected to a single instance of the RIDE at any one time.</p> </li> </ul>"},{"location":"keyboard_key_mappings_for_apl_glyphs/","title":"Keyboard key mappings for apl glyphs","text":""},{"location":"keyboard_key_mappings_for_apl_glyphs/#keyboard-key-mappings-for-apl-glyphs","title":"Keyboard Key Mappings for APL Glyphs","text":"<p>A set of keyboard key mappings for APL glyphs is installed with the RIDE. When the RIDE is the active application, these key mappings are automatically enabled. The RIDE attempts to identify a user's locale and use the appropriate key mappings; if the locale cannot be identified or the locale-specific key mappings have not been configured, then the default configuration is used (key mappings for a US keyboard).</p> <p>Using this set of key mappings, APL glyphs are entered by pressing the prefix key followed by either the appropriate key or the SHIFT key with the appropriate key. The prefix key and key mappings can be customised (see Section ).</p>"},{"location":"keyboard_shortcuts/","title":"Keyboard Shortcuts","text":"<p>The Dyalog keyboard shortcuts that are supported by the RIDE are listed below; those that can be configured in the Shortcuts tab of the Preferences dialog box are indicated with a * character.</p> Code Command Default Keystrokes Description ABT* About Dyalog Shift + F1 Display the About Dyalog dialog box AC* Align comments Edit : Align comments to current column AO* Comment out lines Session/Edit : Add comment symbol at start of each tagged or current line BH* Run to exit (in tracer) Trace : Continue execution from the current line to completion of the current function or operator. If successful, the selection advances to the next line of the calling function (if there is one). BK* Backward or Undo Ctrl + Shift + Backspace Session : Show previous line in input history Edit : Undo last change (where possible) Trace : Skip back one line BP* Toggle breakpoint Edit / Trace : Toggle a breakpoint on the current line BT* Back Tab between windows Ctrl + Shift + Tab Move to previous window in loop CAM* Clear all trace/ stop/monitor Remove any trace/stop/monitor flags (as set by <code>\u2395TRACE</code> , <code>\u2395STOP</code> and <code>\u2395MONITOR</code> ) from all functions in the workspace CAW* Close all windows Close all open Edit and Trace windows CBP* Clear stops for active object Edit / Trace : Clear all breakpoints (resets <code>\u2395STOP</code> ) on the function(s). CNC* Connect Display the RIDE-Dyalog Session dialog box CP Copy Linux: Ctrl + C macOS: \u2318 + C Windows: Ctrl + C Session / Edit : Copy highlighted block of text to the clipboard CT Cut Linux: Ctrl + X macOS: \u2318 + X Windows: Ctrl + X Session / Edit : Delete highlighted block of text and place it on the clipboard DB Backspace Backspace Delete character to left of cursor DC Down cursor Down Arrow Move cursor down one character DI Delete item Linux: Delete macOS: Fn + Backspace Windows: Delete Delete character to right of cursor DK* Delete lines Delete Session / Edit : Delete current line (or selected lines if selection exists) DL Down limit Linux: Ctrl + End macOS: \u2318 + Down Arrow Windows: Ctrl + End Session : Move cursor to bottom right corner of Session log Edit : Move cursor to bottom right corner of content DMK* Toggle key display mode Functionality that could be useful when presenting demonstrations. Enables you to display your keystrokes and load/run a demo file. For more information on presenting demonstrations, enter <code>]Demo -?</code> in a Session. DMN* Next line in demo DMP* Previous line in demo DMR* Load demo file DO* Uncomment lines Session / Edit : Remove comment symbol that is first non space character on each tagged or current line DS Down screen Linux: Page Down macOS: Fn + Down Arrow Windows: Page Down Move cursor down one screen ED* Edit Shift + Enter Session : Open an Edit window (if there is a suspended function on the stack, this opens an Edit window for that function \u2013 this is called Naked Edit ) Edit (a class or namespace): Move the cursor to the definition of the name under or immediately before/after the cursor (also see  ) Edit (not a class or namespace): Open a new Edit window for the name under or immediately before/after the cursor EP* Exit and save changes Escape Edit : Fix and Close Trace : Cut stack back to calling function; close all windows to match new stack status ER* Execute line Enter Session : Execute current line/all modified lines Edit : Insert new line Trace : Execute current line EXP* Expand Selection Shift + Alt + Up Arrow Successive presses of  expand the highlighted selection Session: select the: current line entire Session log Edit: select the: current token (number, name, string, and so on) current line entire contents of window FD* Forward or Redo Ctrl + Shift + Enter Session : Show next line in input history Edit : Reapply last change Trace : Skip current line FX* Fix the current function Edit : Fixes the function without closing the Edit window HLP* Help F1 Display the documentation for the system command, system name, control structure keyword or primitive glyph immediately to the left of the cursor HO Home cursor Linux: Ctrl + Home macOS: \u2318 + Up Arrow Windows: Ctrl + Home Session : Move cursor to top left corner of Session log Edit : Move cursor to top left corner of content JBK* Jump back Ctrl + Shift + J Edit (a class or namespace): move the cursor back to where the last double-click or Edit command (<code>&lt;ED&gt;</code>) was issued in the current Edit window. Repeatable. JSC* Show JavaScript Console F12 Display the JavaScript console. Only necessary if requested by Dyalog Ltd. when reporting an issue. LBR* Toggle Language bar Toggle display of the Language bar at the top of the Session window LC Left cursor Left Arrow Move cursor left one character LL Left limit Linux: Home macOS: Fn + Left Arrow Windows: Home Move cursor to the first non-blank character on the current line. If already there, move cursor to start of line. LN* Toggle line numbers Turn line numbers on/off in all windows of the same type as the active window LOG* Show RIDE protocol log Ctrl + F12 Display the RIDE protocol log. Only necessary if requested by Dyalog Ltd when reporting an issue. MA* Continue execution of all threads Restart execution of any paused or suspended threads. For information on threads, see the Dyalog Programming Reference Guide . NEW* New Session Ctrl + N Starts a new Dyalog Session (a new instance of the interpreter) NX* Next match Edit / Trace : When performing a Search/Replace, locate first match after current one PF1* Function Key 1 PF2 - PF10 Function Keys 2 \u2011 10 F2 - F10 PF11 - PF48 Function Keys 11 \u2011 48 PRF* Show preferences Display the Preferences dialog box ) PT Paste Linux: Ctrl + V macOS: \u2318 + V Windows: Ctrl + V Session / Edit : Paste the text contents of the clipboard at cursor PV* Previous match Edit / Trace : When performing a Search/Replace, locate first match before current one QCP Quick Command Palette Expose the underlying (Monaco) editor command palette QIT* Quit Session Ctrl + Q Terminate the Dyalog Session QT* Close window (and lose changes) Shift + Escape Session : Undo changes to a previously-entered expression that has not been re-executed and advance the cursor to the next line Edit : Close without saving changes RC Right cursor Right Arrow Move cursor right one character RD* Reformat Edit : Formats function to have correct indentation and spacing between tokens RL Right limit Linux: End macOS: Fn + Right Arrow Windows: End Move cursor to the last non-blank character on the current line. If already there, move to end of line. RP* Replace string Edit : Replace. To do this, enter <code>&lt;RP&gt;</code> and type the string to replace the  current search string with (see <code>&lt;SC&gt;</code>); enter <code>&lt;ER&gt;</code> to make the change. Enter <code>&lt;EP&gt;</code> to clear the field. SA* Select all Linux: Ctrl + A macOS: \u2318 + A Windows: Ctrl + A Select all text in the active window SBR* Toggle Status bar Toggle display of the Status bar at the bottom of the Session window and floating Edit / Trace windows. SC* Search Ctrl + F Edit / Trace : Search. To do this, enter <code>&lt;SC&gt;</code>, type the string to search for and then enter <code>&lt;ER&gt;</code> to find the first occurrence of the string. Enter <code>&lt;EP&gt;</code> to clear the field. Also see related <code>&lt;NX&gt;</code>, <code>&lt;PV&gt;</code> and <code>&lt;RP&gt;</code>. SI* Strong interrupt Suspend code execution as soon as possible (generally after completing execution of the primitive currently being processed) STL* Skip to line Trace : Move the current execution marker to the line on which the cursor is positioned TB* Tab between windows Ctrl + Tab Move to next window in loop TC* Trace line Ctrl + Enter Session : If entered directly after an expression, open a Trace window for that expression ( explicit trace ). If there is a suspended function on the execution stack, open a Trace window for that function ( naked trace ). TGC* Toggle comment Session / Edit : Toggle a comment glyph at the start of the line in which the cursor is located TIP* Show value tips For the name or glyph under or immediately before the cursor, highlight that name/glyph and display: for a name: its referent (for example, the value of a variable or the code of a function) for a glyph: the name of the glyph, the keyboard shortcut to enter it, its name and examples of its syntax, arguments and result TL* Toggle localisation Ctrl + Up Arrow Edit : For tradfns, the name under the cursor is added to or removed from the list of localised names on the function's header line TO* Toggle fold Edit : Open/Close outlined blocks (by default, outlines are shown) TVB* Toggle view steps Edit / Trace : Toggle display of an additional column at the left-hand side of the window in which break-points can be set/unset. Hiding this column does not remove any previously-set break points. TVO* Toggle view outline Edit : Toggle code folding/outlining for control structures (including <code>:Section</code> structures) and functions. When toggled, existing code in an open Edit window is automatically updated to reflect the new rules. TFR* Refresh threads Debug information window: Forces a refresh of the Threads area UC Up cursor Up Arrow Move cursor up one character UL Up limit Linux: Ctrl + Home macOS: \u2318 + Up Arrow Windows: Ctrl + Home Session : Move cursor to top left corner of Session log Edit : Move cursor to top left corner of content US Up screen Linux: Page Up macOS: Fn + Up Arrow Windows: Page Up Move cursor up one screen VAL* Evaluate selection or name Edit : Evaluate the selected expression or name and display the result in the Session window. WI* Weak interrupt Ctrl + PauseBreak Suspend code execution at the start of the next line (generally after completing execution of the statement currently being processed) WSE* Toggle Workspace Explorer Toggle display of the workspace explorer to the left of the Session window ZM* Toggle maximise Edit window Toggle active Edit window between current size and full Session size ZMI* Increase font size Ctrl + = or Ctrl + Shift + = Increase the size of the font in all the windows ZMO* Decrease font size Ctrl + - Decrease the size of the font in all the windows ZMR* Reset font size Ctrl + 0 Reset the size of the font in all the windows to its default value"},{"location":"keyboard_shortcuts_and_command_codes/","title":"Keyboard shortcuts and command codes","text":""},{"location":"keyboard_shortcuts_and_command_codes/#keyboard-shortcuts-and-command-codes","title":"Keyboard Shortcuts and Command Codes","text":"<p>Keyboard shortcuts are keystrokes that execute an action rather than produce a symbol. The RIDE supports numerous keyboard shortcuts, each of which is identified by a command code and mapped to a keystroke combination; for example, the action to open the Trace window  is identified by the code TC (described in the documentation as ). For a complete list of the command codes that can be used in a Dyalog Session running through the RIDE and the keyboard shortcuts for those command codes, see Appendix . <p>Positioning the cursor over the  button on the right hand side of the Language bar displays a dynamic tooltip showing all configured keyboard shortcuts for command codes. Clicking on the  button displays the Preferences dialog box (the same as selecting the Edit &gt; Preferences menu option), through which keyboard shortcuts can be customised (see Section ).</p>"},{"location":"keyboard_tab/","title":"Keyboard tab","text":""},{"location":"keyboard_tab/#keyboard-tab","title":"Keyboard Tab","text":"<p>Allows customisation of the default keyboard key mappings for APL glyphs (see Section ). This is only relevant if a locale-specific keyboard has not been installed.</p> <p>To replace the keyboard with a locale-specific keyboard in the Session, or to enter Dyalog glyphs in other applications (for example, email), see http://www.dyalog.com/apl-font-keyboard.htm.</p> <pre><code>        If you have the Dyalog Unicode IME installed, then the RIDE activates it at start-up when the Also enable Dyalog IME (requires RIDE restart) checkbox is selected (selected by default).\n</code></pre> <p>If Dyalog is not installed on the machine that the RIDE is running on, then the Dyalog Unicode IME can be downloaded and installed from http://www.dyalog.com/apl-font-keyboard.htm.</p> <p>Most Linux distributions released after mid-2012 support Dyalog glyphs by default, for example, openSUSE 12.2, Ubuntu 12.10 and Fedora 17. For more information, see the Dyalog for UNIX Installation and Configuration Guide.</p> <p>To customise the default keyboard's Prefix key</p> <ol> <li>Open the Keyboard tab and select the appropriate keyboard from the drop down list of options.</li> <li>In the Prefix key field, enter the new prefix key (by default this is `).</li> <li>Click OK to save your changes and close the Preferences dialog box, Apply to save your changes without closing the Preferences dialog box or Cancel to close the Preferences dialog box without saving your changes.</li> </ol> <p>To customise the default keyboard's key mappings</p> <ol> <li>Open the Keyboard tab and select the appropriate keyboard from the drop down list of options.</li> <li>In the image of a keyboard, click on the glyph to be replaced (bottom right of the key for unshifted mode and top right of the key for shifted mode).</li> <li>Enter the glyph to replace the selected glyph with.</li> <li>Repeat steps 2 and 3 until the key mappings are as required.</li> <li>Click OK to save your changes and close the Preferences dialog box, Apply to save your changes without closing the Preferences dialog box or Cancel to close the Preferences dialog box without saving your changes.</li> </ol> <p>Your selection of keyboard key mappings is unrestricted \u2013 you can choose to map the same glyph to multiple keys or have glyphs that are not represented on the keyboard at all. For example, when dealing with dfns on a Danish keyboard, it might be convenient to map <code>{</code> and <code>}</code> to a simpler key combination.</p>"},{"location":"language_bar/","title":"Language bar","text":""},{"location":"language_bar/#language-bar","title":"Language Bar","text":"<p>The Language bar is located at the top of the Session window, beneath the menu bar. It contains buttons for each of the glyphs used as primitives in Dyalog.</p> <p>When the cursor is positioned over one of the glyphs, information for that glyph is displayed. This includes the name of the glyph, the keyboard shortcut to enter it, its monadic/dyadic name and examples of its syntax, arguments and result.</p> <p>Clicking on one of the glyphs copies that glyph into the active Session/Edit window at the position of the input cursor (the same as typing it directly into the Session/Edit window).</p> <p>The order of glyphs in the Language bar can be customised by using the mouse to drag-and-drop individual glyphs to the required location.</p> <p>Display of the Language bar can be toggled with the View &gt; Show Language Bar menu option or by entering the Toggle Language bar command (). <p>On the right hand side of the Language bar is the  button:</p> <ul> <li>Positioning the cursor over the  button displays a dynamic tooltip showing all configured keyboard shortcuts for command codes \u2013 for more information on these, see Section .</li> <li>Clicking on the  button displays the Preferences dialog box (the same as selecting the Edit &gt; Preferences menu option) \u2013 for more information on the Preferences dialog box, see Section .</li> </ul>"},{"location":"list_of_configurations/","title":"List of configurations","text":""},{"location":"list_of_configurations/#list-of-configurations","title":"List of Configurations","text":"<p>The list of configurations lists the names of previously-saved configurations. By default, a placeholder configuration called unnamed is present in the list of configurations with the Type set to Connect.</p> <p>Selecting a configuration from this list displays its basic information and type dependent information.</p> <p>At the bottom of the list of configurations is a bar containing four buttons, as shown belowin . The buttons available are detailed in .</p> <p>The list of configurations' button bar</p> Button Name Description New Creates a new entry in the list of configurations. The default name for a new configuration is unnamed . Clone Creates an exact copy of the configuration currently selected in the list of configurations . Details can then be changed in the cloned configuration without impacting the original. Delete Prompts for confirmation before deleting the configuration currently selected in the list of configurations . Save Saves all items in the list of configurations . <p>In addition to the buttons, the following actions can be performed when a configuration is selected in the list of configurations:</p> <ul> <li>activate the configuration</li> <li>amend the configuration</li> </ul> <p>A configuration can also be activated by clicking the  button to the right of its name in the list of configurations.</p>"},{"location":"menu_bar/","title":"Menu bar","text":""},{"location":"menu_bar/#menu-bar","title":"Menu Bar","text":"<p>The menu bar menu options on macOS are different to those on Microsoft Windows and Linux. This section details the options for Microsoft Windows and Linux; for the macOS options see the Dyalog for macOS UI Guide.</p> <p>The menu bar menu options are:</p> <ul> <li> <p>File menu (see  Section  )</p> </li> <li> <p>Edit menu (see  Section  )</p> </li> <li> <p>View menu (see  Section  )</p> </li> <li> <p>Window menu (see  Section  )</p> </li> <li> <p>Action menu (see  Section  )</p> </li> <li> <p>Threads menu (see  Section  )</p> </li> <li> <p>Help menu (see  Section  )</p> </li> </ul> <p>The menu names in the menu bar and the options under each menu can be customised (see Section ).</p>"},{"location":"menu_tab/","title":"Menu tab","text":""},{"location":"menu_tab/#menu-tab","title":"Menu Tab","text":"<p>Allows customisation of the menu options in the menu bar (see Section ).</p> <p>Great care should be taken when customising the menu options; although the ability to make changes is provided, it is not an activity that Dyalog Ltd supports.</p> <p>If menu options are customised, then updates to menu items are ignored when updating the installed version of RIDE (this can be avoided by resetting the menu options before upgrading RIDE).</p> <p>Top-level options (menu names in the menu bar) can be:</p> <ul> <li>created</li> <li>renamed</li> <li>reordered</li> <li>deleted</li> </ul> <p>Options within each of the menus can be:</p> <ul> <li>moved to be under a different menu name in the menu bar</li> <li>reordered under the same menu name in the menu bar</li> <li>renamed</li> <li>deleted</li> </ul> <p>Changes do not take effect until the next time a Dyalog Session is started through the RIDE.</p>"},{"location":"navigating_the_windows/","title":"Navigating the windows","text":""},{"location":"navigating_the_windows/#navigating-the-windows","title":"Navigating the Windows","text":"<p>When multiple windows are open, the window that has the focus is referred to as the active window. A window can be made the active window by clicking within it.</p> <p>The Session, Edit and Trace windows form a closed loop for the purpose of navigation:</p> <ul> <li>to make the next window in this loop the active window, enter the Tab Window command () <li>to make the previous window in this loop the active window, enter the Back Tab Window command () <p>An active Edit/Trace window can be closed after changes have been made to its content:</p> <ul> <li>to save any changes in the content of the active window before closing it, enter the Escape command (), press the  button in its menu bar or, if the window is docked, press  in the window's tab. <li>to discard any changes in the content of the active window before closing it, enter the Quit command ()"},{"location":"operating_system_interaction/","title":"Operating system interaction","text":""},{"location":"operating_system_interaction/#operating-system-terminalcommand-window-interaction","title":"Operating System Terminal/Command Window Interaction","text":"<p>Features that rely on interaction with an operating system terminal/command window (that is, <code>\u2395SR</code> and <code>)SH</code> or <code>)CMD</code> with no argument) cannot work in a Dyalog Session that is running through the RIDE. Instead of behaving as documented in the Dyalog APL Language Reference Guide, their behaviour depends on the way in which the interpreter and the RIDE combined to start a Dyalog Session:</p> <ul> <li>If the interpreter was started by the RIDE (see Section ), then:<code>\u2395SR</code> generates a trappable error<code>)SH</code> or <code>)CMD</code> with no argument produces a \"Feature disabled in this environment\" message.</li> <li><code>\u2395SR</code> generates a trappable error</li> <li><code>)SH</code> or <code>)CMD</code> with no argument produces a \"Feature disabled in this environment\" message.</li> <li>If the interpreter and the RIDE were started independently and then connected to each other (see Section  and Section ), then the use of these features will appear to hang the Dyalog Session that is running through the RIDE. However, the Dyalog Session can be recovered by locating the operating system terminal/command window and using it to complete the operation. If there is no operating system terminal/command window, then the Dyalog Session is irrecoverable.</li> </ul>"},{"location":"other_keyboard_options/","title":"Other keyboard options","text":""},{"location":"other_keyboard_options/#other-keyboard-options","title":"Other Keyboard Options","text":"<p>Installing and enabling a set of key mappings allows Dyalog glyphs to be entered in other applications (for example, email). An alternative set of key mappings can also be used to replace the default key mappings for the RIDE.</p> <p>Information and the requisite downloadable files are available at http://www.dyalog.com/apl-font-keyboard.htm.</p> <p>If you have the Dyalog Unicode IME installed, then the RIDE activates it by default. It can be disabled by unchecking the Also enable Dyalog IME checkbox in the Keyboard tab of the Preferences dialog box (see Section ). If Dyalog is not installed on the machine that the RIDE is running on, then the Dyalog Unicode IME can be downloaded and installed from http://www.dyalog.com/apl-font-keyboard.htm.</p> <p>Most Linux distributions released after mid-2012 support Dyalog glyphs by default. For more information, see the Dyalog for UNIX Installation and Configuration Guide.</p>"},{"location":"paired_enclosures/","title":"Paired enclosures","text":""},{"location":"paired_enclosures/#paired-enclosures","title":"Paired Enclosures","text":"<p>Applicable in the Session window and the Edit window</p> <p>Enclosures in the RIDE include:</p> <ul> <li>parentheses <code>( )</code></li> <li>braces <code>{ }</code></li> <li>brackets <code>[ ]</code></li> </ul> <p>Angle brackets <code>&lt; &gt;</code> are not enclosures.</p> <p>When an opening enclosure character is entered, the RIDE automatically includes its closing pair. This reduces the risk of an invalid expression being entered due to unbalanced enclosures. This feature can be disabled in the General tab of the Preferences dialog box (see Section ).</p>"},{"location":"preferences_dialog_box/","title":"Preferences dialog box","text":""},{"location":"preferences_dialog_box/#preferences-dialog-box","title":"Preferences Dialog Box","text":"<p>The Preferences dialog box can be used to customise:</p> <ul> <li>the automatic formatting of text in an Edit window (see Section )</li> <li>the default keyboard key mappings for APL glyphs (see Section )</li> <li>the keyboard shortcuts for command codes (see Section )</li> <li>the saved responses for dialog box options (see Section )</li> <li>the syntax colouring and background colour (see Section )</li> <li>the caption of the Session window (see Section )</li> <li>the menu options presented by the menu bar (see Section )</li> <li>the display of floating Edit/Trace windows (see Section )</li> </ul> <p>The Preferences dialog box can be opened in any of the following ways:</p> <ul> <li>selecting the Edit &gt; Preferences menu option</li> <li>clicking the  icon on the left hand side of the Status bar</li> <li>clicking on the  button on the right hand side of the Language bar</li> <li>entering the Show Preferences command () <p>The Preferences dialog box comprises multiple tabs. The  button enables the contents of the Keyboard and Shortcuts tabs to be printed.</p>"},{"location":"prerequisites/","title":"Prerequisites","text":""},{"location":"prerequisites/#pre-requisites","title":"Pre-requisites","text":"<p>RIDE  can only connect to a Dyalog interpreter that is version 15.0 or later.</p> <p>The RIDE is supported on the following operating systems:</p> <ul> <li>Linux x86_64 \u2013 the following distributions:Debian 8 onwardsFedora 25 onwardsUbuntu 14.04 onwards distributions built on top of these should also work</li> </ul> <p>(Linux distribution must also have libnss version 3.26 onwards)</p> <ul> <li>Debian 8 onwards</li> <li>Fedora 25 onwards</li> <li>Ubuntu 14.04 onwards</li> <li>macOS \u2013 Yosemite onwards</li> <li>Microsoft Windows \u2013 Windows 7 onwards</li> </ul> <p>For the zero-footprint RIDE:</p> <ul> <li>a compatible browser must be installed.</li> <li>the operating system must be supported by the underlying technology (see https://github.com/electron/electron/blob/v13.4.0/docs/tutorial/support.md).</li> </ul> <p>If Dyalog is not installed on the machine that the RIDE is being installed on, then the APL385 font and keyboard mappings installed with the RIDE mean that they are available when running a Dyalog Session through the RIDE. However, to be able to enter APL glyphs outside a Dyalog Session (for example, in text files or emails) you will need to download and install the appropriate files (files and instructions are available from http://www.dyalog.com/apl-font-keyboard.htm, as is the Dyalog Unicode IME for Microsoft Windows).</p>"},{"location":"protocol/","title":"Protocol","text":"<p>Note: A red circle :red_circle: marks internal notes which won't appear in the final version.</p> <p>The RIDE protocol is formed of messages sent in either direction over a TCP connection.</p> <p>A message starts with a 4-byte big-endian total length field, followed by the ASCII bytes for <code>\"RIDE\"</code> and a UTF-8-encoded payload:</p> <pre><code>    8+len(payload)   \"RIDE\" magic number   payload\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500~\u2500\u2500\u2500\u2500\u2500\u2510\n\u25020x00 0x00 0x00 0x0b\u25020x52 0x49 0x44 0x45\u2502    ...    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500~\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Total length is 8 + the payload's length in bytes. The payload is almost always a 2-element JSON array consisting of a command name and arguments as key/value pairs:</p> <pre><code>[\"CommandName\",{\"key1\":\"value1\",\"key2\":222,\"key3\":[3,4,5]}]\n</code></pre> <p>The only exception are the first two messages that each side sends upon establishing a connection. These constitute the handshake and are not JSON-encoded.  Their payloads are:</p> <pre><code>SupportedProtocols=2\nUsingProtocol=2\n</code></pre> <p>Messages are independent and after the handshake can be sent/received in any order. Some messages infer that the other end will send a reply, but that reply may not be the next message to be received, or even ever be sent.</p>"},{"location":"protocol/#unknowncommand","title":"UnknownCommand","text":"<p>If the receiver of a message does not recognise it, it should respond with</p> <pre><code>[\"UnknownCommand\",{\"name\":\"Xyz\"}]\n</code></pre>"},{"location":"protocol/#internalerror","title":"InternalError","text":"<p>Should the interpreter generate an error during the processing of an incoming RIDE message it will respond with an InternalError message:</p> <pre><code>[\"InternalError\",{\"error\":1,\"error_text\":\"WS FULL\",\"dmx\":\"\",\"message\":\"Edit\"}]\n</code></pre> <ul> <li><code>error</code>: aka \u2395EN</li> <li><code>error_text</code>: aka \u2395EM </li> <li><code>dmx</code>: the DMX message for the error (currently always empty)</li> <li><code>message</code>: the name of the originating incoming RIDE message</li> </ul> <p>The connection may be closed at any time, leaving some messages undelivered or unprocessed.</p> <p>Command names and their arguments are case-sensitive.</p> <p>JSON booleans <code>true</code> and <code>false</code> can be freely substituted with and should be treated as equivalent to <code>1</code> and <code>0</code>.</p>"},{"location":"protocol/#connection-setup-and-teardown","title":"Connection setup and teardown","text":""},{"location":"protocol/#identify","title":"Identify","text":"<p>After the connection has been established and a protocol agreed, both peers immediately send an <code>Identify</code> message to indicate what type of application they are.</p> <pre><code>[\"Identify\",{\"apiVersion\":1,\"identity\":1}]\n</code></pre> <p>The <code>apiVersion</code> is introduced as a mechanism to handle breaking changes in the API.</p> <p>Constants for <code>identity</code>: - <code>1</code> RIDE, - <code>2</code> interpreter, - <code>3</code> process manager.</p> <p>:red_circle: The interpreter sends an <code>Identify</code> that means something else and has different args.</p>"},{"location":"protocol/#apiversion-1","title":"apiVersion &lt; 1","text":"<p>The interpreter responds with an Identify messsage containing details about the interpreter.</p>"},{"location":"protocol/#apiversion-1_1","title":"apiVersion = 1","text":"<p>The interpreter responds with a <code>ReplyIdentify</code> messsage containing details about the interpreter.</p> <p>They should then check the type of application they are connected to, and if not happy to continue, close the connection.  For instance, RIDE may check that the application it's connected to is an interpreter or a process manager. If it finds the peer is another RIDE, it should close the connection.</p> <p>:red_circle: In reality RIDE doesn't bother verifying that it's not talking to another RIDE.</p>"},{"location":"protocol/#replyidentify","title":"ReplyIdentify","text":""},{"location":"protocol/#apiversion-1_2","title":"apiVersion = 1","text":"<p>The interpreter responds with a <code>ReplyIdentify</code> messsage containing details about the interpreter.</p> <pre><code>[\"ReplyIdentify\",{ // Interpreter -&gt; RIDE\n  \"apiVersion\":1,\n  \"Port\":0,\n  \"IPAddress\":\"\",\n  \"Vendor\":\"Dyalog Limited\",\n  \"Language\":\"APL\",\n  \"version\":\"18.2.46943\",\n  \"Machine\":\"HOSTNAME\",\n  \"arch\":\"Unicode/64\",\n  \"Project\":\"CLEAR WS\",\n  \"Process\":\"dyalog.exe\",\n  \"User\":\"username\",\n  \"pid\":1000,\n  \"token\":\"{F53F7747-B404-4F7A-893D-954F2764CC74}\",\n  \"date\":\"Created: Apr 10 2023 at 19:29:32\",\n  \"platform\":\"Windows-64\"\n}]\n</code></pre> <p>The <code>apiVersion</code> specifies the negotiated API version accepted by the interpreter.</p>"},{"location":"protocol/#getlog","title":"GetLog","text":""},{"location":"protocol/#apiversion-1_3","title":"apiVersion = 1","text":"<p>Request the session log from the interpreter. </p> <pre><code>[\"GetLog\",{\"format\":\"json\",\"maxLines\":100}] // RIDE -&gt; Interpreter\n</code></pre> <p><code>format</code> defaults to \"json\" if not specified. <code>maxLines</code> limits the number of lines returned (-1 = unlimited)</p>"},{"location":"protocol/#replygetlog","title":"ReplyGetLog","text":""},{"location":"protocol/#apiversion-1_4","title":"apiVersion &lt; 1","text":"<p>After it has received the Connect command the interpreter will send 0 or more \"ReplyGetLog\" messages containing the session log:</p> <pre><code>[\"ReplyGetLog\",{\"result\":[\"line 1\",\"line 2\"]}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#apiversion-1_5","title":"apiVersion = 1","text":"<p>After it has received a \"GetLog\" command the interpreter will send 0 or more \"ReplyGetLog\" messages containing the session log in the format requested. For <code>text</code> format:</p> <pre><code>[\"ReplyGetLog\",{\"result\":[\"line 1\",\"line 2\"]}] // Interpreter -&gt; RIDE\n</code></pre> <p>For <code>json</code> format:</p> <pre><code>[\"ReplyGetLog\",{\"result\":[ // Interpreter -&gt; RIDE\n  {\n    \"group\": 1,\n    \"type\": 1,\n    \"text\": \"line 1\",\n  },{\n    \"group\": 1,\n    \"type\": 1,\n    \"text\": \"line 2\",\n  },\n  ]}]\n</code></pre>"},{"location":"protocol/#syserror","title":"SysError","text":"<p>If at any time the interpreter crashes with a syserror, it sends;</p> <pre><code>[\"SysError\",{\"text\":\"apl: sys error 123 errno 456\",\"stack\":\"\"}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#exit","title":"Exit","text":"<p>If the interpreter has been started by RIDE, RIDE should shut it down cleanly when the user closes the main application window (the session window):</p> <pre><code>[\"Exit\",{\"code\":0}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#session-control","title":"Session control","text":""},{"location":"protocol/#apiversion-1_6","title":"apiVersion &lt; 1","text":"<p>Any echoed input or interpreter output are sent to RIDE using either;</p>"},{"location":"protocol/#echoinput","title":"EchoInput","text":"<pre><code>[\"EchoInput\",{\"input\":\"      1 2 3+4 5 6\\n\"}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#appendsessionoutput","title":"AppendSessionOutput","text":"<pre><code>[\"AppendSessionOutput\",{\"result\":\"5 7 9\"}]  // Interpreter -&gt; RIDE\n</code></pre> <p>These two perform essentially the same task except that <code>AppendSessionOutput</code> doesn't necessarily have trailing <code>\"\\n\"</code>-s at the end of <code>result</code>.</p>"},{"location":"protocol/#apiversion-1_7","title":"apiVersion = 1","text":"<p>Any echoed input or interpreter output are sent to RIDE using either;</p> <pre><code>[\"AppendSessionOutput\",{\"result\":\"5 7 9\",\"type\":1,\"group\":1}]  // Interpreter -&gt; RIDE\n</code></pre> <p><code>type</code> specifies the source of the output:</p> type description 0 reserved 1 undetermined session output 2 default output e.g. not assigned to \u2395 or \u235e 3 what would have been always sent to stderr 4 output from system commands 5 APL error message. e.g. ^ and DOMAIN ERROR 6 reserved 7 \u2395 output 8 \u235e output 9 \"information\" that would have gone to the \"status window\" 10 reserved 11 echoed input 12 \u2395TRACE output 13 reserved 14 A \u201cnormal\u201d input line"},{"location":"protocol/#setprompttype","title":"SetPromptType","text":"<p>The interpreter informs RIDE about changes in its ability to accept user input with</p> <pre><code>[\"SetPromptType\",{\"type\":5}] // Interpreter -&gt; RIDE\n</code></pre> <p>Constants for <code>type</code>:  - <code>0</code> no prompt, - <code>1</code> the usual 6-space APL prompt (a.k.a. Descalc or \"desktop calculator\"), - <code>2</code> Quad(<code>\u2395</code>) input, - <code>3</code> line editor, - <code>4</code> Quote-Quad(<code>\u235e</code>) input, - <code>5</code> any prompt type unforeseen here.</p> <p>:red_circle: These modes need explaining with expected behaviour.</p>"},{"location":"protocol/#execute","title":"Execute","text":"<p>When the user presses <code>&lt;ER&gt;</code> (Enter) or <code>&lt;TC&gt;</code> (Ctrl-Enter), RIDE sends</p> <pre><code>[\"Execute\",{\"text\":\"      1 2 3+4 5 6\",\"trace\":1}] // RIDE -&gt; Interpreter\n</code></pre> <ul> <li><code>text</code>: the APL code to evaluate</li> <li><code>trace</code>: 0 or 1, whether the expression should be evaluated in the tracer (<code>&lt;TC&gt;</code>)</li> </ul> <p>Note that RIDE can't assume that everything entered in the session will be echoed, e.g. quote quad input (<code>\u235e</code>) doesn't echo.  Therefore, RIDE should wait for the <code>EchoInput</code> message.</p> <p>If multiple lines have been modified in the session, RIDE should queue them up and send them one by one, waiting for a response of either <code>SetPromptType</code> with <code>type&gt;0</code> or HadError.</p>"},{"location":"protocol/#haderror","title":"HadError","text":"<p>RIDE should clear its queue of pending lines on <code>HadError</code> and focus the session.</p> <pre><code>[\"HadError\",{}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#setpw","title":"SetPW","text":"<p>RIDE can optionally advise the interpreter about the session's width in characters with</p> <pre><code>[\"SetPW\",{\"pw\":79}] // RIDE -&gt; Interpreter\n</code></pre> <p>Further output will wrap at that width (with a few exceptions). See <code>\u2395PW</code>.</p>"},{"location":"protocol/#window-management","title":"Window management","text":""},{"location":"protocol/#edit","title":"Edit","text":"<p>When the user presses <code>&lt;ED&gt;</code> (Shift-Enter), RIDE should send;</p> <pre><code>[\"Edit\",{\"win\":123,\"text\":\"a\u2190b+c\u00d7d\",\"pos\":4,\"unsaved\":{\"124\":\"f\"}}] // RIDE -&gt; Interpreter\n</code></pre> <p>to request opening an editor.  <code>pos</code> is the 0-based position of the cursor in <code>text</code>. <code>unsaved</code> is a mapping from window ids to unsaved content.</p> <p>:red_circle: \"Edit\" must be extended to submit the current content of all dirty windows, otherwise jumping from one method to another in a class will obliterate the current changes.</p>"},{"location":"protocol/#openwindow","title":"OpenWindow","text":"<p>The interpreter will parse that and may respond later with one of;</p> <pre><code>[\"OpenWindow\",{\"name\":\"f\",\"filename\":\"C:\\\\path\\\\to\\\\foo.txt\",\"text\":[\"r\u2190f a\",\"r\u2190(+\u233f\u00f7\u2262)a\"],\"token\":123,\"currentRow\":0,\"debugger\":false,\n               \"entityType\":1,\"offset\":0,\"readOnly\":false,\"size\":0,\"stop\":[1],\n               \"tid\":0,\"tname\":\"Tid:0\"}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#updatewindow","title":"UpdateWindow","text":"<pre><code>[\"UpdateWindow\",...] // Interpreter -&gt; RIDE (same args as OpenWindow)\n</code></pre> <p>It may also send these in response to <code>)ed name</code> or <code>\u2395ed'name'</code>, as well as when tracing into an object that is not currently being traced.</p> <p>Constants for <code>entityType</code>:</p> entityType Description entityType Description <code>1</code> defined function <code>128</code> simple character vector <code>2</code> simple character array <code>256</code> APL namespace <code>4</code> simple numeric array <code>512</code> APL class <code>8</code> mixed simple array <code>1024</code> APL interface <code>16</code> nested array <code>2048</code> APL session <code>32</code> <code>\u2395OR</code> object <code>4096</code> external function. <code>64</code> native file <p>:red_circle: TODO: describe the other arguments</p>"},{"location":"protocol/#gotowindow","title":"GotoWindow","text":"<p>The interpreter can request transferring the focus to a particular window with;</p> <pre><code>[\"GotoWindow\",{\"win\":123}] // Interpreter -&gt; RIDE\n</code></pre> <p>This could happen as a result of <code>)ED</code> or <code>\u2395ED</code>.</p>"},{"location":"protocol/#windowtypechanged","title":"WindowTypeChanged","text":"<p>The interpreter may decide to change the type of a window (editor vs tracer) with;</p> <pre><code>[\"WindowTypeChanged\",{\"win\":123,\"tracer\":true}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#savechanges","title":"SaveChanges","text":"<p>When the user presses <code>&lt;EP&gt;</code> (Esc), RIDE should request that the editor contents are fixed through;</p> <pre><code>[\"SaveChanges\",{\"win\":123,\"text\":[\"r\u2190avg a\",\"s\u2190+\u233fa\",\"n\u2190\u2262a\",\"r\u2190s\u00f7n\"],\"stop\":[2,3]}] // RIDE -&gt; Interpreter\n</code></pre> <ul> <li><code>stop</code> is an array of 0-based line numbers.</li> </ul>"},{"location":"protocol/#replysavechanges","title":"ReplySaveChanges","text":"<pre><code>[\"ReplySaveChanges\",{\"win\":123,\"err\":0}] // Interpreter -&gt; RIDE\n</code></pre> <p>If <code>err</code> is 0, save succeeded; otherwise it failed.</p>"},{"location":"protocol/#formatcode","title":"FormatCode","text":"<p>RIDE can request that the intepreter reformat code:</p> <pre><code>[\"FormatCode\",{\"win\":123,\"text\":[\"r\u2190avg a\",\"s\u2190+\u233fa\",\"n \u2190    \u2262a\",\"r\u2190s\u00f7n\"]}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#replyformatcode","title":"ReplyFormatCode","text":"<pre><code>[\"ReplyFormatCode\",{\"win\":123,\"text\":[\"r\u2190avg a\",\"s\u2190+\u233fa\",\"n\u2190\u2262a\",\"r\u2190s\u00f7n\"]}] // Interpreter -&gt; RIDE\n</code></pre> <ul> <li><code>win</code>: TENTATIVE: a window identifer. The interpreter needs a window in which to format the code (don't ask!). In the short term we'll insist that we can only format code in a window the interpreter is aware of.</li> </ul>"},{"location":"protocol/#closewindow","title":"CloseWindow","text":"<p>When the user presses <code>&lt;EP&gt;</code> (Esc) and saving is successful or presses <code>&lt;QT&gt;</code> (Shift-Esc), RIDE sends;</p> <pre><code>[\"CloseWindow\",{\"win\":123}] // RIDE -&gt; Interpreter  and  Interpreter -&gt; RIDE\n</code></pre> <p>but does not close the UI window until the interpreter replies with the same message.</p>"},{"location":"protocol/#closeallwindows","title":"CloseAllWindows","text":"<p>To close all windows, but leave the SIstack unchanged RIDE can send the CloseAllWindows message.</p> <pre><code>[\"CloseAllWindows\",{}] // RIDE -&gt; Interpreter\n</code></pre> <p>In response the interpreter will send a CloseWindow messsage for each window that it is aware of. The CloseAllWindows message will leave the SIStack unchanged, it will just close all (trace and edit) windows in the interpreter.</p>"},{"location":"protocol/#debugging","title":"Debugging","text":"<p>The following messages are used in relation to trace windows.</p>"},{"location":"protocol/#sethighlightline","title":"SetHighlightLine","text":"<p>This tells RIDE where the currently executed line is.  Traditionally that's indicated by a red border around it.</p> <pre><code>[\"SetHighlightLine\",{\"win\":123,\"line\":45}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#setlineattributes","title":"SetLineAttributes","text":"<p>Update the breakpoints.</p> <pre><code>[\"SetLineAttributes\",{\"win\":123,\"stop\":[2,3,5]}] // RIDE -&gt; Interpreter  or  Interpreter -&gt; RIDE\n</code></pre> <ul> <li><code>stop</code> is an array of 0-based line numbers.</li> </ul>"},{"location":"protocol/#tracebackward","title":"TraceBackward","text":"<p>Request the current line in a trace window be moved back (skip back one line).</p> <pre><code>[\"TraceBackward\",{\"win\":123}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#cleartracestopmonitor","title":"ClearTraceStopMonitor","text":"<p>Request it clears all traces, stops, and monitors in the active workspace. The reply says how many of each thing were cleared.</p> <pre><code>[\"ClearTraceStopMonitor\",{\"token\":123}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#replycleartracestopmonitor","title":"ReplyClearTraceStopMonitor","text":"<pre><code>[\"ReplyClearTraceStopMonitor\",{\"traces\":0,\"stops\":0,\"monitors\":0,\"token\":123}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#continue","title":"Continue","text":"<p>Request resume execution of the current thread.</p> <pre><code>[\"Continue\",{\"win\":123}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#continuetrace","title":"ContinueTrace","text":"<p>Request resume execution of the current function, but stop on the next line of the calling function.</p> <pre><code>[\"ContinueTrace\",{\"win\":123}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#cutback","title":"Cutback","text":"<p>Request the stack is cut back one level.  This is equivalent to returning to the caller without executing the rest of the current function.</p> <pre><code>[\"Cutback\",{\"win\":123}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#traceforward","title":"TraceForward","text":"<p>Request the current line in a trace window be moved forward (skip to next line).</p> <pre><code>[\"TraceForward\",{\"win\":123}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#restartthreads","title":"RestartThreads","text":"<p>Request resume execution of all threads.</p> <pre><code>[\"RestartThreads\",{}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#runcurrentline","title":"RunCurrentLine","text":"<p>Request the current line in a trace window is executed. (Step over)</p> <pre><code>[\"RunCurrentLine\",{\"win\":123}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#stepinto","title":"StepInto","text":"<pre><code>[\"StepInto\",{\"win\":123}] // RIDE -&gt; Interpreter\n</code></pre> <p>Request the current line in a trace window is executed. (Step into)</p>"},{"location":"protocol/#status-bar","title":"Status Bar","text":"<p>RIDE requests status information from the interpreter to display in the status bar.</p>"},{"location":"protocol/#subscribe","title":"Subscribe","text":"<p>RIDE 4.4 now uses the Subscribe method to retrieve information from the interpreter for the status bar. Protocol messages are sent by the interpreter when a change is detected, as opposed to polling at an interval.</p> <pre><code>[\"Subscribe\", { // RIDE -&gt; Interpreter\n  \"status\": [  // 0 or more of the following values\n               // values are not saved between calls       \n    \"statusfields\",   // will result in InterpreterStatus messages\n    \"stack\" ,         // will result in ReplyGetSIStack messages\n    \"threads\"         // will result in ReplyGetSIStack messages\n  ],\n  \"heartbeat\": interval    // interval is currently ignored\n}]\n</code></pre> <p>There is no unsubscribe method, a new Subscribe message should be sent with the relevant fields removed.</p>"},{"location":"protocol/#interpreterstatus","title":"InterpreterStatus","text":"<pre><code>[\"InterpreterStatus\", { // Interpreter -&gt; RIDE\n   \"IO\": int,   // current \u2395IO\n   \"DQ\": int,   // length of current message queue \n   \"WA\": int,   // current available workspace (not currently implemented)\n   \"SI\": int,   // length of current SI stack\n   \"TRAP\": int, // Is there an active trap?\n   \"ML\": int,   // // current \u2395ML\n   \"NumThreads\": int, // current number of threads\n   \"TID\": int, // current thread id\n   \"CompactCount\": int, // number of compactions so far\n   \"GarbageCount\": int  // number of garbage collections so far (i.e. number of collections that have found garbage)\n}]\n</code></pre>"},{"location":"protocol/#interpreterheartbeat","title":"InterpreterHeartBeat","text":"<pre><code>[\"InterpreterHeartBeat\", { // Interpreter -&gt; RIDE\n    \"ping\" : \"ping\"  // maybe there will be additional reasons to ping\n}]\n</code></pre>"},{"location":"protocol/#threads","title":"Threads","text":""},{"location":"protocol/#getsistack","title":"GetSIStack","text":"<p>Request information about the current stack.</p> <pre><code>[\"GetSIStack\",{}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#replygetsistack","title":"ReplyGetSIStack","text":"<pre><code>[\"ReplyGetSIStack\",{\"stack\":[{\"description\":\"#.f[12]*\"},{\"description\":\"#.g[34]\"}],\"tid\":2}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#getthreads","title":"GetThreads","text":"<p>Get information about the current threads.</p> <pre><code>[\"GetThreads\",{}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#replygetthreads","title":"ReplyGetThreads","text":"<pre><code>[\"ReplyGetThreads\",{\"threads\":[\n    {\"description\":\"\",\"state\":\"Session\",\"tid\":0,\"flags\":\"Normal\",\"Treq\":\"\"},\n    ]}] // Interpreter -&gt; RIDE\n</code></pre> <ul> <li><code>description</code>: a text description of the thread. Derived from the Tid and \u2395TNAME for the thread</li> <li><code>state</code>: a string indicating the current location of the thread</li> <li><code>tid</code>: the Tid (numeric)</li> <li><code>flags</code>: e.g. Normal, Paused or Terminated</li> <li><code>Treq</code>: a string indicating any tokens that the thread is waiting for.</li> </ul>"},{"location":"protocol/#setthread","title":"SetThread","text":"<p>Request the interpreter focus a specific thread.</p> <pre><code>[\"SetThread\", {\"tid\":123}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#replysetthread","title":"ReplySetThread","text":"<pre><code>[\"ReplySetThread\", {\"tid\":123, \"rc\":321, \"message\":\"txt\"}] // Interpreter -&gt; RIDE\n</code></pre> <ul> <li><code>tid</code>: the thread ID (numeric)</li> <li><code>rc</code>: Return code. TID of focused thread, or -1 if unsuccessful.</li> <li><code>message</code>: Empty, or text description of the result if unsuccessful.</li> </ul>"},{"location":"protocol/#getthreadattributes","title":"GetThreadAttributes","text":"<p>Request attributes on multiple threads:</p> <pre><code>[\"GetThreadAttributes\",{ // RIDE -&gt; Interpreter\n  \"threads\":[123 | -1]\n}]\n</code></pre> <p>If first item is -1, return info for all threads and stop processing. If -1 is found after first, return non zero in rc for that element.</p>"},{"location":"protocol/#replygetthreadattributes","title":"ReplyGetThreadAttributes","text":"<pre><code>[\"ReplyGetThreadAttributes\",{ // Interpreter -&gt; RIDE\n  \"threads\":[{\n    \"tid\": 123,\n    \"rc\": 321,\n    \"paused\": 1,\n    \"noninterruptable\": 2,\n  }]\n}]\n</code></pre> <ul> <li><code>tid</code>: The thread ID (numeric)</li> <li><code>rc</code>: Return code. TID of thread, or -1 if unsuccessful.</li> <li><code>paused</code>: boolean</li> <li><code>noninterruptable</code>: int;</li> <li><code>0</code>: interruptable,</li> <li><code>1</code>: non-interruptable,</li> <li><code>2</code>: children will be created as non-interruptable</li> </ul>"},{"location":"protocol/#setthreadattributes","title":"SetThreadAttributes","text":"<p>Set attributes on multiple threads.</p> <pre><code>[\"SetThreadAttributes\",{ // RIDE -&gt; Interpreter\n  \"threads\":[{\n    \"tid\":123,\n    \"paused\":0,\n    \"noninterruptable\": 2,\n  }]\n}]\n</code></pre> <p>If first item's tid is -1, set info for all threads and stop processing. The interpreter will respond with ReplySetThreadAttributes</p>"},{"location":"protocol/#replysetthreadattributes","title":"ReplySetThreadAttributes","text":"<pre><code>[\"ReplySetThreadAttributes\",{ // Interpreter -&gt; RIDE\n  \"threads\":[{\n    \"tid\":123,\n    \"rc\":0,\n    \"paused\":0,\n    \"noninterruptable\":2,\n  }]\n}]\n</code></pre> <ul> <li><code>tid</code>: The thread ID (numeric)</li> <li><code>rc</code>: Return code. TID of thread, or -1 if unsuccessful.</li> <li><code>paused</code>: boolean</li> <li><code>noninterruptable</code>: int;</li> <li><code>0</code>: interruptable,</li> <li><code>1</code>: noninterruptable,</li> <li><code>2</code>: children will be created as non-interruptable</li> </ul>"},{"location":"protocol/#pauseallthreads","title":"PauseAllThreads","text":"<p>To pause all threads, pass a 1. To unpause all paused threads, pass a 0.</p> <pre><code>[\"PauseAllThreads\", { \"pause\": 1 | 0}]\n</code></pre> <p>PauseAllThreads (pause=0) does not \"restart\" all threads, you'll need to send RestartThreads if that's what you want. PauseAllThreads does not send any response.</p>"},{"location":"protocol/#interrupts","title":"Interrupts","text":"<p>APL supports two kinds of interrupts;</p>"},{"location":"protocol/#weakinterrupt","title":"WeakInterrupt","text":"<pre><code>[\"WeakInterrupt\",  {}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#stronginterrupt","title":"StrongInterrupt","text":"<pre><code>[\"StrongInterrupt\",{}] // RIDE -&gt; Interpreter\n</code></pre> <p>The interpreter message queue should check for strong interrupts and handle them immediately without needing to fully parse messages.</p> <p>:red_circle: I've no idea what the above sentence means -Nick</p>"},{"location":"protocol/#autocompletion","title":"Autocompletion","text":""},{"location":"protocol/#getautocomplete","title":"GetAutocomplete","text":"<p>RIDE can request autocompletion information from the interpreter.</p> <pre><code>[\"GetAutocomplete\",{\"line\":\"r\u21901+ab\",\"pos\":6,\"token\":234}] // RIDE -&gt; Interpreter\n</code></pre> <ul> <li><code>line</code>: text containing the name that's being completed</li> <li><code>pos</code>: position of cursor within <code>line</code></li> <li><code>token</code>: is used by <code>ReplyGetAutocomplete</code> to identify which request it is a response to. RIDE may send multiple <code>GetAutocomplete</code> requests and the interpreter may only reply to some of them. Similarly, RIDE may ignore some of the replies if the state of the editor has changed since the <code>GetAutocomplete</code> request was sent. In order to remain responsive, RIDE should throttle its autocompletion requests (no more than N per second) and it shouldn't block while it's waiting for the response.</li> </ul> <p>:red_circle: The interpreter requires that \"token\" is the id of the window, so perhaps it should be renamed \"win\".</p> <p>:red_circle: If RIDE sends a different token, the interpreter doesn't respond.</p>"},{"location":"protocol/#replygetautocomplete","title":"ReplyGetAutocomplete","text":"<pre><code>[\"ReplyGetAutocomplete\",{\"skip\":2,\"options\":[\"ab\",\"abc\",\"abde\"],\"token\":234}] // Interpreter -&gt; RIDE\n</code></pre> <ul> <li><code>skip</code>: how many characters before the request's <code>pos</code> to replace with an element of <code>options</code></li> </ul>"},{"location":"protocol/#value-tips","title":"Value tips","text":""},{"location":"protocol/#getvaluetip","title":"GetValueTip","text":"<p>When the user hovers a name with the mouse, RIDE should ask for a short textual representation of the current value:</p> <pre><code>[\"GetValueTip\",{\"win\":123,\"line\":\"a\u2190b+c\",\"pos\":2,\"maxWidth\":50,\"maxHeight\":20,\"token\":456}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#valuetip","title":"ValueTip","text":"<pre><code>[\"ValueTip\",{\"tip\":[\"0 1 2\",\"3 4 5\"],\"class\":2,\"startCol\":2,\"endCol\":3,\"token\":456}] // Interpreter -&gt; RIDE\n</code></pre> <ul> <li><code>token</code>: is used to correlate requests and responses, and there is no guarantee that they will arrive in the same order, if ever (like with autocompletion).</li> <li><code>maxHeight</code> and <code>maxWidth</code> can be used to limit the number of lines and columns in the result.</li> <li><code>class</code> indicates the nameclass of the object. This information can be used to syntax-highlight the tooltip.</li> <li><code>startCol</code> and <code>endCol</code> describe the position of the whole name to which the value tip pertains. <code>startCol</code> is inclusive and <code>endCol</code> is exclusive.</li> </ul>"},{"location":"protocol/#dialogs","title":"Dialogs","text":"<p>The interpreter can ask RIDE to interact with the user by showing a modal dialog. Several kinds of dialogs are supported:</p>"},{"location":"protocol/#options-dialog","title":"Options dialog","text":"<pre><code>[\"OptionsDialog\",{\"title\":\"\",\"text\":\"\",\"type\":1,\"options\":[\"Yes\",\"No\",\"Cancel\"],\"token\":123}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#replyoptionsdialog","title":"ReplyOptionsDialog","text":"<pre><code>[\"ReplyOptionsDialog\",{\"index\":0,\"token\":123}] // RIDE -&gt; Interpreter\n</code></pre> <p>Constants for type: - <code>1</code> warning, - <code>2</code> information, - <code>3</code> question, - <code>4</code> stop.</p> <p>If the user closes the dialog without choosing an option, RIDE responds with an <code>index</code> of <code>-1</code>.</p>"},{"location":"protocol/#stringdialog","title":"StringDialog","text":"<pre><code>[\"StringDialog\",{\"title\":\"Name\",\"text\":\"Please enter a name:\",\"initialValue\":\"abc\",\"defaultValue\":null,\"token\":123}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#replystringdialog","title":"ReplyStringDialog","text":"<pre><code>[\"ReplyStringDialog\",{\"value\":\"abcd\",\"token\":123}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#taskdialog","title":"TaskDialog","text":"<p>A \"task dialog\" shows two sets of buttons -- vertically aligned <code>buttonText</code> and below them the horizontally aligned <code>options</code>.</p> <pre><code>[\"TaskDialog\",{\"title\":\"Save document\",\"text\":\"Save document options\",\n               \"subtext\":\"Do you want to save the changes to the document?\",\n               \"buttonText\":[\"Save in XML base format\",\"Save in binary format\"],\n               \"options\":[\"No\",\"Cancel\"],\n               \"footer\":\"Note: If you don't choose to save, your changes will be lost\",\n               \"questionkey\":\"SaveFileOptionsExtension:.xml\",\n               \"questionlabel\":\"Save this response for all files with a \\\".xml\\\" extension\"}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#replytaskdialog","title":"ReplyTaskDialog","text":"<pre><code>[\"ReplyTaskDialog\",{\"index\":\"101\",\"token\":123}] // RIDE -&gt; Interpreter\n</code></pre> <p>In the response <code>index</code> can be: * <code>100+i</code> where <code>i</code> is the index of a <code>buttonText</code> button * the index of an <code>options</code> button * <code>-1</code> if the user closes the dialog</p>"},{"location":"protocol/#notificationmessage","title":"NotificationMessage","text":"<pre><code>[\"NotificationMessage\",{\"message\":\"Object too large to edit\",\"token\":123}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#other","title":"Other","text":""},{"location":"protocol/#showhtml","title":"ShowHTML","text":"<p>Request RIDE shows some HTML. See <code>3500\u2336</code>.</p> <pre><code>[\"ShowHTML\",{\"title\":\"Example\",\"html\":\"&lt;i&gt;Hello&lt;/i&gt; &lt;b&gt;world&lt;/b&gt;\"}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#updatedisplayname","title":"UpdateDisplayName","text":"<p>This message is sent by the interpreter when WSID is changed.</p> <pre><code>[\"UpdateDisplayName\",{\"displayName\":\"CLEAR WS\"}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#updatesessioncaption","title":"UpdateSessionCaption","text":"<p>RIDE can use the display name as the title of its application window.</p> <pre><code>[\"UpdateSessionCaption\",{\"text\":\"CLEAR WS - Dyalog APL/W-64\"}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#disconnect","title":"Disconnect","text":"<p>Sent from any peer to shut down the connection cleanly.</p> <pre><code>[\"Disconnect\",{\"message\":\"...\"}]\n</code></pre> <p>:red_circle: Why do we need \"Disconnect\"?  Why not just close the TCP connection?  That shouldn't be any less \"clean\".</p>"},{"location":"protocol/#workspace-explorer","title":"Workspace explorer","text":"<p>Optionally, RIDE can display a tree representing session content.</p>"},{"location":"protocol/#treelist","title":"TreeList","text":"<p>It can query information about the children of a particular node with TreeList.</p> <pre><code>[\"TreeList\",{\"nodeId\":12}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#replytreelist","title":"ReplyTreeList","text":"<pre><code>[\"ReplyTreeList\",{\"nodeId\":12,\"nodeIds\":[34,0],\"names\":[\"ab\",\"cde\"],\n                  \"classes\":[9.4,3.2],\"err\":\"\"}] // Interpreter -&gt; RIDE\n</code></pre> <p>The root of the tree is assumed to have a node id of 0. * <code>nodeId</code> is the requested parent id. * <code>nodeIds</code> are the ids of the children; some of them can be 0 -- those children can't themselves have children. * <code>classes</code> are name classes   that can be used to choose appropriate styling * <code>err</code> is non-empty only when an error has occurred in the interpreter, e.g. when <code>nodeId</code> is no longer invalid</p> <p>RIDE should query information only about the visible parts of the tree as they get expanded.</p> <p>When the user presses Enter or clicks on an editable node, RIDE should use the Edit command to notify the interpreter.  Then it can send back commands to open or focus an editor window.</p>"},{"location":"protocol/#status-window","title":"Status window","text":""},{"location":"protocol/#statusoutput","title":"StatusOutput","text":"<p>The interpreter may request the display of messages in a separate \"Status Output\" window.</p> <pre><code>[\"StatusOutput\",{\"text\":\"some very important message\\r\\n\",\"flags\":2}] // Interpreter -&gt; RIDE\n</code></pre> <p><code>flags</code> (despite its name) is the message type, one of: * <code>1</code>: info, usually shown in green * <code>2</code>: error, red * <code>4</code>: warning, blue * <code>8</code>: .Net function overload clash overload (red?)</p>"},{"location":"protocol/#process-manager","title":"Process manager","text":"<p>:red_circle: As of April 2016 there is no process manager.</p>"},{"location":"protocol/#getavailableconnections","title":"GetAvailableConnections","text":"<pre><code>[\"GetAvailableConnections\",{\"connections\":[c0,c1,...]}] // RIDE or Interpreter -&gt; PM\n</code></pre> <p>:red_circle: Specify what c0,c1,... look like</p>"},{"location":"protocol/#connectto","title":"ConnectTo","text":"<p>Request a connection to a specific item (RIDE or interpreter).</p> <pre><code>[\"ConnectTo\",{\"remoteId\":123}] // RIDE or Interpreter -&gt; PM\n</code></pre>"},{"location":"protocol/#connecttosucceded","title":"ConnectToSucceded","text":"<p>Tell the client that the ProcessManager is handing off the connection to a RIDE or Interpreter (as requested). The process manager knows the supported protocols so it can pick a supported protocol for the clients to switch to. Once this is received the client is no longer connected to the PM, but rather is connected to the specified process.</p> <pre><code>[\"ConnectToSucceded\",{\"remoteId\":123,\"identity\":1,\"protocolNumber\":...}] // PM -&gt; RIDE or Interpreter\n</code></pre> <p><code>identity</code>: see Identify</p>"},{"location":"protocol/#connecttofailed","title":"ConnectToFailed","text":"<p>Tell the client that the attempt to connect to a particular process failed.</p> <pre><code>[\"ConnectToFailed\",{\"remoteId\":123,\"reason\":\"\"}] // PM -&gt; RIDE or Interpreter\n</code></pre>"},{"location":"protocol/#getdetailedinformation","title":"GetDetailedInformation","text":"<pre><code>[\"GetDetailedInformation\",{\"remoteId\":[12,34,...]}] // anything -&gt; anything\n</code></pre> <p>If sent to a Process manager, <code>remoteId</code> is a list of remote IDs returned by <code>GetAvailableConnections</code>. Otherwise it's an empty list.</p>"},{"location":"protocol/#replygetdetailedinformation","title":"ReplyGetDetailedInformation","text":"<pre><code>[\"ReplyGetDetailedInformation\",{\"information\":[i0,i1,...]}] // anything -&gt; anything\n</code></pre>"},{"location":"protocol/#session-information-and-configuration","title":"Session Information and Configuration","text":""},{"location":"protocol/#help","title":"Help","text":""},{"location":"protocol/#gethelpinformation","title":"GetHelpInformation","text":"<p>RIDE can request help on current cursor position.</p> <pre><code>[\"GetHelpInformation\",{\"line\":\"r\u21901+ab\",\"pos\":4}] // RIDE -&gt; Interpreter\n</code></pre> <ul> <li><code>line</code>: text containing the name where help is requested</li> <li><code>pos</code>: position of cursor within <code>line</code> (origin 0 is to the left of the first character)</li> </ul>"},{"location":"protocol/#replygethelpinformation","title":"ReplyGetHelpInformation","text":"<pre><code>[\"ReplyGetHelpInformation\",{\"url\":\"https://help.dyalog.com/18.1/#Language/Symbols/Plus%20Sign.htm\"}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#syntax","title":"Syntax","text":""},{"location":"protocol/#getsyntaxinformation","title":"GetSyntaxInformation","text":"<p>RIDE can request Syntax information specific to the version of the interpreter being run.</p> <pre><code>[\"GetHelpInformation\",{}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#replygetsyntaxinformation","title":"ReplyGetSyntaxInformation","text":"<pre><code>[\"ReplyGetSyntaxInformation\",{\"url\":\"https://help.dyalog.com/18.1/#Language/Symbols/Plus%20Sign.htm\"}] // Interpreter -&gt; RIDE\n</code></pre>"},{"location":"protocol/#languagebar","title":"LanguageBar","text":""},{"location":"protocol/#getlanguagebar","title":"GetLanguageBar","text":"<p>RIDE can request Language bar information specific to the version of the interpreter being run.</p> <pre><code>[\"GetLanguageBar\",{}] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#replygetlanguagebar","title":"ReplyGetLanguageBar","text":"<pre><code>[\"ReplyGetLanguageBar\",{  // Interpreter -&gt; RIDE\n  \"entries\":[\n    {\"name\":\"Left Arrow\", \"avchar\":\"\u2190\", \"helptext\":[\"...\",\"...\",]}\n    ]}]\n</code></pre>"},{"location":"protocol/#configuration","title":"Configuration","text":""},{"location":"protocol/#getconfiguration","title":"GetConfiguration","text":"<p>Configuration parameters can be queried using the GetConfiguration method</p> <pre><code>[\"GetConfiguration\", {\"names\":[\"text\"] // RIDE -&gt; Interpreter\n</code></pre>"},{"location":"protocol/#replygetconfiguration","title":"ReplyGetConfiguration","text":"<pre><code>[\"ReplyGetConfiguration\", { // Interpreter -&gt; RIDE\n  \"configurations\":[\n    {\"name\":\"string\", \"value\":\"\"},\n    ]}]\n</code></pre>"},{"location":"protocol/#setconfiguration","title":"SetConfiguration","text":"<p>Parameters can be set using the SetConfiguration method. [Currently only the AUTO_PAUSE_THREADS parameter is supported.]</p> <pre><code>[\"SetConfiguration\", { // RIDE -&gt; Interpreter\n  \"configurations\": [\n    {\"name\":\"\", \"value\":\"\"},\n    ]}]\n</code></pre>"},{"location":"protocol/#replysetconfiguration","title":"ReplySetConfiguration","text":"<pre><code>[\"ReplySetConfiguration\", { // Interpreter -&gt; RIDE\n  \"configurations\": [\n    {\"name\":\"\", \"rc\":0123,},\n    ]}]\n</code></pre> <ul> <li><code>name</code>: key of paramenter to set.</li> <li><code>value</code>: value to set it to.</li> <li><code>rc</code>: int, one of the following;</li> <li><code>0</code>: SO_OK</li> <li><code>1</code>: SO_BAD_NAME</li> <li><code>2</code>: SO_BAD_VALUE</li> <li><code>3</code>: SO_CANT_SET</li> </ul>"},{"location":"protocol/#proposed-extensions","title":"Proposed extensions","text":"<ul> <li>related to the process manager</li> </ul> <pre><code>AvailableConnection =&gt; [\n    int remoteID,       // Unique ID\n    string displayName  // Display name for the entry.\n]\nDetailedInformation =&gt; [\n  int remoteID,    // Unique ID if sent from a Process Manager, otherwise 0\n  identity identity,\n  (DetailedRideInformation|DetailedInterpreterInformation|DetailedProcessInformation) Information\n]\nDetailedRideInformation =&gt; [] // Placeholder - add any more information\nDetailedInterpreterInformation =&gt; [] // Placeholder - add any more information\nDetailedProcessManagerInformation =&gt; [] // Placeholder - add any more information\n</code></pre> <ul> <li><code>\u2395PFKEY</code></li> <li>programmatic access to \"current object\"</li> </ul>"},{"location":"protocol/#setcurrentobject","title":"SetCurrentObject","text":"<pre><code>[\"SetCurrentObject\",{\"text\":\"\"}] // RIDE -&gt; Interpreter\n</code></pre> <ul> <li>compiler information</li> <li>list of valid I-beams and their descriptions</li> <li><code>ShowStack</code> and <code>ShowThreads</code></li> <li>drop workspace in RIDE</li> </ul>"},{"location":"reexecuting_a_previous_expression/","title":"Reexecuting a previous expression","text":""},{"location":"reexecuting_a_previous_expression/#re-executing-a-previous-expression","title":"Re-executing a Previous Expression","text":"<p>Applicable in the Session window</p> <p>Instead of entering a new expression in the input line, you can move back through the Session log and re-execute a previously-entered expression.</p> <p>To re-execute a previously-entered expression</p> <ol> <li>Locate the expression to re-execute in one of the following ways:- Scroll back through the Session log.</li> <li>Use the Backward command () and the Forward command () to cycle backwards and forwards through the input history, successively copying previously-entered expressions into the input line. <li>Position the cursor anywhere within the expression that you want to re execute and press the Enter key or use the Enter command (). <p>If required, a previously-entered expression can be amended prior to execution. In this situation, when the amended expression is executed it is copied to the input line; the original expression in the Session log is not changed. If you start to edit a previous expression and then decide not to, use the Quit command () to return the previous expression to its unaltered state."},{"location":"reexecuting_multiple_previous_expressions/","title":"Reexecuting multiple previous expressions","text":""},{"location":"reexecuting_multiple_previous_expressions/#re-executing-multiple-previous-expressions","title":"Re-executing Multiple Previous Expressions","text":"<p>Applicable in the Session window</p> <p>Multiple expressions can be re-executed together irrespective of whether they were originally executed sequentially (certain system commands cause re\u2011execution to stop once they have been completed, for example, <code>)LOAD</code> and <code>)CLEAR</code>).</p> <p>To re-execute multiple previously-entered expressions</p> <ol> <li>Locate the first expression to re-execute in one of the following ways:- Scroll back through the Session log.</li> <li>Use the Backward command () and the Forward command () to cycle backwards and forwards through the input history, successively copying previously-entered expressions into the input line. <li>Change the expression in some way. The change does not have to impact the purpose of the expression; it could be an additional space character.</li> <li>Scroll through the Session log to locate the next expression to re-execute and change it in some way. Repeat until all the required expressions have been changed.</li> <li>Press the Enter key or enter the Enter command (). <p>The amended expressions are copied to the input line and executed in the order in which they appear in the Session log; the modified expressions in the Session log are restored to their original content.</p> <p>To re-execute contiguous previously-entered expressions</p> <ol> <li>Position the cursor at the start of the first expression to re-execute.</li> <li>Press and hold the mouse button (left-click) while moving the cursor to the end of the last expression to re-execute.</li> <li>Copy the selected lines to the clipboard using the Copy command () or the Cut command () or the Copy/Cut options in the Edit menu. <li>Position the cursor in the input line and paste the content of the clipboard back into the Session using the Paste command (), the Paste option in the Edit menu or the Paste option in the context menu. <li>Press the Enter key or enter the Enter command (). <p>This technique can also be used to move lines from the Edit window into the Session window and execute them.</p>"},{"location":"ride4-requirements/","title":"The Ride 4.0 Project","text":"<p>Version 2, Dated September 21st, 2016</p>"},{"location":"ride4-requirements/#introduction","title":"Introduction","text":"<p>RIDE 4, being the third release of the \"new generation\" RIDE, will hopefully bring the RIDE to a level of maturity where people no longer think of it as a new and somewhat experimental IDE. The last significant missing features (like threading menu items) should be added, and any remaining unintended differences with the ODE should be ironed out, and stability should be improved to the point where people should feel comfortable using RIDE even under Windows (with the possible exception of people who are addicted to the \"window modes\" that the ODE supports). Note that RIDE 4.0 needs to be upwards compatible with Dyalog v15.0, so there is no reason to link the release date for RIDE 4.0 directly to that of Dyalog v16.0. It is still natural to think of them as being related.</p>"},{"location":"ride4-requirements/#bug-fixing","title":"Bug Fixing","text":"<p>We need to look at Kai's most important concerns and sort them into short-term bugs to be fixed in RIDE 3, bugs to fix at the start of RIDE 4 (and either back-port them or have Kai as an \"alpha\" tester of RIDE 4), and \"new features for RIDE 4\".</p>"},{"location":"ride4-requirements/#research-into-android-and-ios","title":"Research into Android and iOS","text":"<p>We should do research into how we might be able to deliver \"native\" (as opposed to browser-based) RIDE on Android and iOS. We should test \"native\" iOS and Android browsers to see whether they support the browser-based version, and how it reacts to small form factors.</p>"},{"location":"ride4-requirements/#major-features","title":"Major Features","text":"<p>Features that define Ride 4.0.</p>"},{"location":"ride4-requirements/#0-upwards-compatibility","title":"0. Upwards Compatibility","text":"<p>As mentioned in the introduction: Unlike RIDE 3, which required the use of Dyalog v15.0, RIDE 4 needs to be compatible with both v15.0 and v16.0 (and RIDE 3 needs to work with v16.0). Functionality which is not available in some combination of front- and back-end needs to fail gracefully. Our policy for RIDE support will mirror support for the interpreter: we will support the last 3 releases. Thus, support for RIDE 2.0 needs to continue for another cycle.</p>"},{"location":"ride4-requirements/#1-ui-design","title":"1. UI Design","text":"<p>We will get involved with Mike and other Optima folks early on in the process (right after the UM) to look at really trying to jazz things up. The connection screen needs to be redesigned.</p>"},{"location":"ride4-requirements/#2-raspberry-pi-version","title":"2. Raspberry Pi Version","text":"<p>The Raspberry Pi version should be tested and documented.</p>"},{"location":"ride4-requirements/#3-zero-footprint-operation","title":"3. \"Zero Footprint\" Operation","text":"<p>Ability to launch RIDE from a browser by pointing to an interpreter which embeds a CONGA library running enough of a web server to serve up the source code. The \"ZF\" version will mostly have the same functionality as the Electron version, but a few things will be different:</p> <ol> <li>The \"connection\" menu will be absent</li> <li>Configuration will be contained in a target-domain specific local storage within the browser. A special mechanism will be required to store/load configuration data.</li> <li>Demos cannot be loaded from the file system unless the APL system can serve them up.</li> </ol>"},{"location":"ride4-requirements/#4-establish-ssh-tunnel-and-connect-to-existing-apl-process","title":"4. Establish ssh tunnel and connect to existing APL process","text":"<p>Jason has identified the ability to create an ssh tunnel and then connect to (or listen for) an existing APL interpreter as an important use case for system administrators. We may want to consider separating connection features into a separate module which could be worked on independently (but ideally still in Javascript). However, the addition of this feature now that we already have the ssh tunnel capability, doesn't seem to justify the work to do the separation at this point.</p>"},{"location":"ride4-requirements/#5-formatting-of-functions","title":"5. Formatting of Functions","text":"<p>Through the addition of new options to RIDE and/or ODE, there needs to be a mode in which it is possible to \"reformat\" source code in both systems and achieve the EXACT same results, to avoid glitches with source code management systems.</p>"},{"location":"ride4-requirements/#6-search-functionality","title":"6. Search Functionality","text":"<p>Provide a mechanism to search the session. WIBNI there was a way to Search / Replace within a function body or section (not the whole script).</p>"},{"location":"ride4-requirements/#7-apl-configuration-options","title":"7. APL Configuration Options","text":"<p>Make it possible to set the following APL options from the RIDE:</p> <ul> <li>Single Trace Window</li> <li>Pause on Error (from Threads menu)</li> <li>Check whether anything else might be worthwhile</li> </ul>"},{"location":"ride4-requirements/#8-ride-configuration","title":"8. RIDE Configuration","text":"<p>Ensure smooth functionality when multiple RIDEs are sharing the same configuration file (atomic updates, at end of session, or when new connections are defined).</p>"},{"location":"ride4-requirements/#9-missing-ode-functionality","title":"9. Missing ODE Functionality","text":"<p>Add support for:</p> <ul> <li>Show Stack</li> <li>All items on the Threads Menu</li> <li>Windows|Close all Windows?</li> </ul>"},{"location":"ride4-requirements/#11-proper-autopw-support","title":"11. Proper AutoPW Support","text":"<p>Including Quote Quad and System Command Output. This is probably mostly interpreter side work, but is mentioned here as something we need to have focus on ensuring.</p>"},{"location":"ride4-requirements/#12-wibni-section","title":"12. WIBNI Section","text":"<ol> <li>WIBNI <code>\u2395PFKEY</code> worked, at least for simple cases. Kai reports that in addition to strings to enter, he would need support for the actions LL (Left Limit), RL (Right Limit) and ER (Enter).</li> <li>Alex Foia's idea of a \"variable inspector\" is worth thinking about.</li> </ol>"},{"location":"ride_editor/","title":"Ride editor","text":""},{"location":"ride_editor/#ride_editor","title":"RIDE_EDITOR","text":"<p>This configuration parameter specifies the fully-qualified path to the executable of the editor to use in a Dyalog Session instead of the RIDE's built-in editor (for example, vim, Emacs or Notepad++).</p>"},{"location":"ride_init/","title":"Ride init","text":""},{"location":"ride_init/#ride_init","title":"RIDE_INIT","text":"<p>This configuration parameter specifies how How the interpreter should behave with respect to the RIDE protocol. Setting this configuration parameter on the machine that hosts the interpreter enables the interpreter-RIDE connection.</p> <p>The format of the value is <code>{mode:setting}[,mode:setting]</code></p> <p>where <code>mode</code> is the action that the interpreter should take and determines the content of the <code>setting</code>. Valid (case-insensitive) values are:</p> <ul> <li><code>SERVE</code> \u2013 listen for incoming connections from the RIDE client</li> <li><code>CONNECT</code> \u2013 attempt to connect to the specified RIDE client and end the session if this fails</li> <li><code>POLL</code> \u2013 attempt to connect to the specified RIDE client at regular intervals and reconnect if the connection is lost</li> <li><code>HTTP</code> \u2013 listen for incoming connections from the web browser (zero footprint RIDE \u2013 see Section )</li> <li><code>CONFIG</code> \u2013 retrieve values to use from a .ini configuration file (see Section 1.1)</li> </ul> <p>If two modes are specified, then:</p> <ul> <li>one of the modes must be <code>CONFIG</code>.</li> <li>the <code>SERVE</code>/<code>CONNECT</code>/<code>POLL</code>/<code>HTTP</code> values always override the equivalent values in the .ini configuration file.</li> </ul> <p>If <code>mode</code> is <code>SERVE</code> or <code>HTTP</code>, then <code>setting</code> is <code>address:port</code>, where:</p> <ul> <li><code>address</code> is the address of the interface on which the machine running the APL process should listen (that is, the address of the machine that is running the interpreter). Valid values are: \u2013 listen on all loopback interfaces, that is, the interpreter only accepts connection from the local machine<code>*</code> \u2013 listen on all local machine interfaces, that is, the interpreter listens for connections from any (local or remote) machine/interfacethe host/DNS name of the machine/interface running the interpreter \u2013 listen on that specific interface on the local machinethe IPv4 address of the machine/interface running the interpreter \u2013 listen on that specific interface on the local machinethe IPv6 address of the machine/interface running the interpreter \u2013 listen on that specific interface on the local machine <li> \u2013 listen on all loopback interfaces, that is, the interpreter only accepts connection from the local machine <li><code>*</code> \u2013 listen on all local machine interfaces, that is, the interpreter listens for connections from any (local or remote) machine/interface</li> <li>the host/DNS name of the machine/interface running the interpreter \u2013 listen on that specific interface on the local machine</li> <li>the IPv4 address of the machine/interface running the interpreter \u2013 listen on that specific interface on the local machine</li> <li>the IPv6 address of the machine/interface running the interpreter \u2013 listen on that specific interface on the local machine</li> <li><code>port</code> is the TCP port to listen on</li> <p>If <code>mode</code> is <code>CONNECT</code> or <code>POLL</code>, then <code>setting</code> is <code>address:port</code>, where:</p> <ul> <li><code>address</code> is the destination address to attempt to connect to (the machine/interface running the RIDE client). Valid values are:the host/DNS name of a machine/interface running the RIDE clientthe IPv4 address of a machine/interface running the RIDE clientthe IPv6 address of a machine/interface running the RIDE client</li> <li>the host/DNS name of a machine/interface running the RIDE client</li> <li>the IPv4 address of a machine/interface running the RIDE client</li> <li>the IPv6 address of a machine/interface running the RIDE client</li> <li><code>port</code> is the TCP port to connect to</li> </ul> <p>If <code>mode</code> is <code>CONFIG</code>, then <code>setting</code> is <code>filename</code>, where:</p> <ul> <li><code>filename</code> is the fully-qualified path to, and name of, a .ini configuration file containing name-value pairs related to mode, certificate details, and so on. The default value for <code>setting</code> is <code>ride.ini</code> (for more information on the .ini configuration file, see Section 1.1).</li> </ul> <p>Examples</p> <p>To listen on port 4502 for connection requests from a RIDE client running on any machine:<code>RIDE_INIT=SERVE:*:4502</code></p> <p>To attempt to connect to a RIDE client running on a different machine (with IPv4 address 10.0.38.1 and listening on port 4502) and end the Session if unable to do so:<code>RIDE_INIT=CONNECT:10.0.38.1:4502</code></p> <p>To establish a connection using the settings in the ride_sample.ini file:<code>RIDE_INIT=CONFIG:C:/tmp/ride_sample.ini</code></p> <p>To attempt to establish a secure connection with a RIDE client running on a different machine (with IPv4 address 10.0.38.1 and listening on port 4502) using certificate details specified in the ride_sample.ini file:<code>RIDE_INIT=CONFIG:C:\\tmp\\ride_sample.ini,CONNECT:10.0.38.1:4502</code>or<code>RIDE_INIT=CONNECT:10.0.38.1:4502,CONFIG:C:\\tmp\\ride_sample.ini</code></p> <p>With Dyalog and the RIDE installed on a machine with IPv4 address 10.0.38.1, to listen on port 4502 for connection requests from a web browser running on any machine (Zero Footprint RIDE \u2013 see Section ):<code>RIDE_INIT=HTTP:*:4502</code>To open the Zero Footprint RIDE in a web browser on:</p> <ul> <li>the local machine : URL = http://localhost:4502</li> <li>a different machine: URL = http://10.0.38.1:4502</li> </ul> <p>The RIDE_INIT configuration parameter is set automatically when launching a new Dyalog Session from the RIDE (see Section ).</p> <p>If the RIDE_INIT configuration parameter is set but the RIDE DLLs/shared libraries are not available, then a run-time interpreter will start but the subsequent call to <code>3502\u2336</code> will be unsuccessful \u2013 see Section .</p>"},{"location":"ridedyalog_menu_bar/","title":"Ridedyalog menu bar","text":""},{"location":"ridedyalog_menu_bar/#menu-bar","title":"Menu Bar","text":"<p>The RIDE's UI can vary slightly across different operating systems (and window managers); in particular, RIDE-specific menu bars can be located either within the development environment or in the global menu bar.</p> <p>The options available under the Dyalog menu are detailed in .</p> Item Description About Dyalog Displays the About dialog box, which provides details of the RIDE. Preferences Opens the Preferences dialog box (see Section  ). Quit Closes the RIDE-Dyalog Session dialog box. <p>The options available under the Edit menu are detailed in .</p> Item Description Undo Reverses the previous action (where possible). Redo Reverses the effect of the previous Undo. Cut Deletes the selected text and places it on the clipboard. Copy Copies the selected text to the clipboard. Paste Pastes the text contents of the clipboard into the current location. Select All Selects all the text in the field in which the cursor is positioned. If the cursor is not within a field, then selects the text in all fields."},{"location":"ridespecific_language_features/","title":"RIDE-Specific Language Features","text":"<p>When running a Dyalog Session through the RIDE, the majority of language features remain unaltered. However, there are a few additional features (see I-beams and RIDE-Specific Configuration Parameters) and some existing functionality that is meaningless (see Unsupported Language Elements) when a Session is running through the RIDE.</p>"},{"location":"ridespecific_language_features/#i-beams","title":"I-Beams","text":"<p>I-Beam is a monadic operator that provides a range of system-related services.</p> <p>Syntax: <code>R\u2190{X}(A\u2336)Y</code></p> <p>Any service provided using an I-Beam should be considered as experimental and subject to change \u2013 without notice \u2013 from one release to the next. Any use of I-Beams in applications should, therefore, be carefully isolated in cover-functions that can be adjusted if necessary.</p> <p>There are three I-Beams that are only relevant to the RIDE: 3500\u2336, 3501\u2336 and 3502\u2336.</p>"},{"location":"ridespecific_language_features/#3500-send-html-to-the-ride","title":"3500\u2336 (Send HTML to the RIDE)","text":"<p>Syntax: <code>R\u2190{X}(3500\u2336)Y</code></p> <p>Optionally, <code>X</code> is a simple character vector or scalar, the contents of which are used as the caption of an embedded browser window opened by the RIDE client. If omitted, then the caption defaults to <code>3500\u2336</code>.</p> <p><code>Y</code> is a simple character vector of HTML markup, the contents of which are displayed in the embedded browser tab.</p> <p><code>R</code> identifies whether the write to the RIDE was successful. </p> <p>Possible values are:</p> <ul> <li><code>0</code>: the write to the RIDE client was successful</li> <li><code>\u00af1</code>: the RIDE client is not enabled</li> </ul>"},{"location":"ridespecific_language_features/#3501-connected-to-the-ride","title":"3501\u2336 (Connected to the RIDE?)","text":"<p>Syntax: <code>R\u2190{X}(3501\u2336)Y</code></p> <p><code>X</code> and <code>Y</code> can be any value (ignored).</p> <p><code>R</code> identifies whether the Dyalog Session is running through the RIDE. </p> <p>Possible values are:</p> <ul> <li><code>0</code>: the Session is not running through the RIDE</li> <li><code>1</code>: the Session is running through the RIDE</li> </ul>"},{"location":"ridespecific_language_features/#3502-manage-ride-connectors","title":"3502\u2336 (Manage RIDE Connectors)","text":"<p>By default, the RIDE is not enabled on run-time executables. For security reasons, enabling the RIDE is a two-step process rather than using (for example) a single configuration parameter. To enable the RIDE, two steps must be taken:</p> <ol> <li>Set the <code>RIDE_INIT</code> configuration parameter (see RIDE Init) on the machine on which the run-time interpreter is running to an appropriate value.</li> <li>Execute <code>3502\u23361</code> in your application code.</li> </ol> <p>The run time interpreter can then attempt to connect to a RIDE client.</p> <p>Enabling the RIDE to access applications that use the run-time interpreter means that the APL code of those applications can be accessed. The I-beam mechanism described above means that the APL code itself must grant the right for a RIDE client to connect to the run time interpreter. Although Dyalog Ltd might change the details of this mechanism, the APL code will always need to grant connection rights. In particular, no mechanism that is only dependent on configuration parameters will be implemented.</p> <p>Syntax: <code>R\u21903502\u2336Y</code></p> <p><code>R</code> is <code>0</code> if the call is successful, otherwise an integer (positive or negative) is returned.</p> <p><code>Y</code> can be any of the following possible values:</p> <ul> <li><code>0</code> : disable any active RIDE connections.<code>R</code> is always <code>0</code></li> <li><code>R</code> is always <code>0</code></li> <li><code>1</code> : enable the RIDE using the initialisation string defined in the RIDE_INIT configuration parameter: if <code>R</code> is <code>0</code>, then the RIDE was disabled and is now successfully enabledif <code>R</code> is <code>\u00af1</code>, then the RIDE was already activeif <code>R</code> is <code>32</code>, then the RIDE DLL/shared library is not availableif <code>R</code> is <code>64</code>, then the <code>RIDE_INIT</code> configuration parameter is not correctly defined</li> <li>if <code>R</code> is <code>0</code>, then the RIDE was disabled and is now successfully enabled</li> <li>if <code>R</code> is <code>\u00af1</code>, then the RIDE was already active</li> <li>if <code>R</code> is <code>32</code>, then the RIDE DLL/shared library is not available</li> <li>if <code>R</code> is <code>64</code>, then the RIDE_INIT configuration parameter is not correctly defined</li> <li>a simple character vector : replace the RIDE_INIT configuration parameter with the specified initialisation string, which should be in the format specified in RIDE Init. </li> </ul> <p>For example, <code>3502\u2336'SERVE:*:4502'</code> configures the interpreter to accept incoming RIDE connections from any machine on port 4502, and then enables the RIDE with that configuration.if <code>R</code> is <code>0</code>, then the RIDE was disabledif <code>R</code> is <code>\u00af2</code>, then the RIDE was active - if <code>R</code> is <code>0</code>, then the RIDE was disabled - if <code>R</code> is <code>\u00af2</code>, then the RIDE was active</p> <p>On a run-time interpreter, <code>3502\u23361</code> is the only way to enable the RIDE.</p> <p>If the RIDE_INIT configuration parameter is set but the RIDE DLLs/shared libraries are not available, then a run-time interpreter will start but the subsequent call to <code>3502\u2336</code> will be unsuccessful.</p>"},{"location":"ridespecific_language_features/#configuration-parameters","title":"Configuration Parameters","text":"<p>Some customisation can be performed using configuration parameters outside a Session. For details of other configuration parameters that can be set, and the syntax used to set them, see the Dyalog for <code>&lt;operating system&gt; Installation and Configuration Guide</code> specific to the operating system that you are using.</p> <p>Changes made to configuration parameters in the dyalog.config file only impact local interpreters (that is, interpreters that are configured by that file) and do not impact interpreters that the RIDE can connect with on other machines.</p>"},{"location":"ridespecific_language_features/#ride_editor","title":"RIDE_EDITOR","text":"<p>This configuration parameter specifies the fully-qualified path to the executable of the editor to use in a Dyalog Session instead of the RIDE's built-in editor (for example, vim, Emacs or Notepad++).</p>"},{"location":"ridespecific_language_features/#ride_init","title":"RIDE_INIT","text":"<p>This configuration parameter specifies how How the interpreter should behave with respect to the RIDE protocol. Setting this configuration parameter on the machine that hosts the interpreter enables the interpreter-RIDE connection.</p> <p>The format of the value is <code>{mode:setting}[,mode:setting]</code></p> <p>where <code>mode</code> is the action that the interpreter should take and determines the content of the <code>setting</code>. Valid (case-insensitive) values are:</p> <ul> <li><code>SERVE</code> \u2013 listen for incoming connections from the RIDE client</li> <li><code>CONNECT</code> \u2013 attempt to connect to the specified RIDE client and end the session if this fails</li> <li><code>POLL</code> \u2013 attempt to connect to the specified RIDE client at regular intervals and reconnect if the connection is lost</li> <li><code>HTTP</code> \u2013 listen for incoming connections from the web browser, via zero footprint RIDE)</li> <li><code>CONFIG</code> \u2013 retrieve values to use from a .ini configuration file</li> </ul> <p>If two modes are specified, then:</p> <ul> <li>one of the modes must be <code>CONFIG</code>.</li> <li>the <code>SERVE</code>/<code>CONNECT</code>/<code>POLL</code>/<code>HTTP</code> values always override the equivalent values in the .ini configuration file.</li> </ul> <p>If <code>mode</code> is <code>SERVE</code> or <code>HTTP</code>, then <code>setting</code> is <code>address:port</code>, where:</p> <ul> <li><code>address</code> is the address of the interface on which the machine running the APL process should listen (that is, the address of the machine that is running the interpreter). </li> </ul> <p>Valid values are: </p> <ul> <li> \u2013 listen on all loopback interfaces, that is, the interpreter only accepts connection from the local machine <li><code>*</code> \u2013 listen on all local machine interfaces, that is, the interpreter listens for connections from any (local or remote) machine/interface</li> <li>the host/DNS name of the machine/interface running the interpreter \u2013 listen on that specific interface on the local machine</li> <li>the IPv4 address of the machine/interface running the interpreter \u2013 listen on that specific interface on the local machine</li> <li>the IPv6 address of the machine/interface running the interpreter \u2013 listen on that specific interface on the local machine</li> <li><code>port</code> is the TCP port to listen on</li> <p>If <code>mode</code> is <code>CONNECT</code> or <code>POLL</code>, then <code>setting</code> is <code>address:port</code>, where:</p> <ul> <li><code>address</code> is the destination address to attempt to connect to (the machine/interface running the RIDE client). Valid values are:the host/DNS name of a machine/interface running the RIDE clientthe IPv4 address of a machine/interface running the RIDE clientthe IPv6 address of a machine/interface running the RIDE client</li> <li>the host/DNS name of a machine/interface running the RIDE client</li> <li>the IPv4 address of a machine/interface running the RIDE client</li> <li>the IPv6 address of a machine/interface running the RIDE client</li> <li><code>port</code> is the TCP port to connect to</li> </ul> <p>If <code>mode</code> is <code>CONFIG</code>, then <code>setting</code> is <code>filename</code>, where:</p> <ul> <li><code>filename</code> is the fully-qualified path to, and name of, a .ini configuration file containing name-value pairs related to mode, certificate details, and so on. The default value for <code>setting</code> is <code>ride.ini</code> (for more information on the .ini configuration file, see here).</li> </ul> <p>Examples</p> <p>To listen on port 4502 for connection requests from a RIDE client running on any machine: <code>RIDE_INIT=SERVE:*:4502</code></p> <p>To attempt to connect to a RIDE client running on a different machine (with IPv4 address 10.0.38.1 and listening on port 4502) and end the Session if unable to do so:<code>RIDE_INIT=CONNECT:10.0.38.1:4502</code></p> <p>To establish a connection using the settings in the ride_sample.ini file:<code>RIDE_INIT=CONFIG:C:/tmp/ride_sample.ini</code></p> <p>To attempt to establish a secure connection with a RIDE client running on a different machine (with IPv4 address 10.0.38.1 and listening on port 4502) using certificate details specified in the ride_sample.ini file:<code>RIDE_INIT=CONFIG:C:\\tmp\\ride_sample.ini,CONNECT:10.0.38.1:4502</code>or<code>RIDE_INIT=CONNECT:10.0.38.1:4502,CONFIG:C:\\tmp\\ride_sample.ini</code></p> <p>With Dyalog and the RIDE installed on a machine with IPv4 address 10.0.38.1, to listen on port 4502 for connection requests from a web browser running on any machine (Zero Footprint RIDE \u2013 see Section ):<code>RIDE_INIT=HTTP:*:4502</code>To open the Zero Footprint RIDE in a web browser on:</p> <ul> <li>the local machine : URL = http://localhost:4502</li> <li>a different machine: URL = http://10.0.38.1:4502</li> </ul> <p>The <code>RIDE_INI</code> configuration parameter is set automatically when launching a new Dyalog Session from the RIDE (see Start).</p> <p>If the <code>RIDE_INIT</code> configuration parameter is set but the RIDE DLLs/shared libraries are not available, then a run-time interpreter will start but the subsequent call to <code>3502\u2336</code> will be unsuccessful \u2013 see 3502\u2336.</p>"},{"location":"sample_configuration_file/","title":"Sample Configuration File","text":"<p>A .ini configuration file can be used to define settings for the <code>RIDE_INIT</code> configuration parameter.</p> <p>Examples of the fields that you might want to include within the .ini configuration file are:</p> <pre><code>[RIDE]\nDirection=Listen\nAddress=\nPort=5002\nMaxBlockSize=52428800\nSSLValidation=0\nProtocol=IPv4\nSecure=Secure\nPublicCertFile= C:\\apps\\d150U64\\TCerts\\server\\localhost-cert.pem\nPrivateKeyFile= C:\\apps\\d150U64\\TCerts\\server\\localhost-key.pem\nRootCertDir= C:\\apps\\d150U64\\TCertss\\ca\nPriority=\nAcceptCertDir= C:\\apps\\d150U64\\TCerts\\accept\n</code></pre> <p>where:</p> <ul> <li><code>Direction</code>, <code>Address</code> and <code>Port</code> \u2013 as defined for the RIDE_INIT configuration parameter. <code>Direction</code> in the .ini file is equivalent to <code>mode</code> in the RIDE_INIT configuration parameter and has possible values of <code>Listen</code> (equivalent to RIDE_INIT's <code>Serve</code>), <code>Connect</code>, <code>Poll</code> and <code>HTTP</code>. No defaults are defined for <code>Direction</code> and <code>Address</code>; the default for <code>Port</code> is <code>4502</code>. Overridden if defined in RIDE_INIT.</li> <li><code>MaxBlockSize</code> is the maximum size (in bytes) allocated to the buffer that receives data transmissions. The default is 16,777,216.</li> <li><code>SSLValidation</code> is the sum of the relevant TLS flags (see Section ). The default is <code>0</code>. Validity depends on the value of the <code>Secure</code> field.</li> <li><code>Protocol</code> is the communication protocol to use. Possible values are:<code>IPv4</code>: use the IPv4 connection protocol; if this is not possible then generate an error.<code>IPv6</code>: use the IPv6 connection protocol; if this is not possible then generate an error.: use the IPv6 connection protocol; if this is not possible then use the IPv4 connection protocol. This is the default. <li><code>IPv4</code>: use the IPv4 connection protocol; if this is not possible then generate an error.</li> <li><code>IPv6</code>: use the IPv6 connection protocol; if this is not possible then generate an error.</li> <li>: use the IPv6 connection protocol; if this is not possible then use the IPv4 connection protocol. This is the default. <li><code>Secure</code> specifies the security of the connection. Possible values depend on the value of <code>Direction</code>:If <code>Direction</code> is <code>Listen</code>, then <code>Secure</code> can be:<code>Secure</code> \u2013 the connection is secure and certificates are provided. The <code>PublicCertFile</code>, <code>PrivateKeyFile</code>, <code>SSLValidation</code> and <code>Priority</code> fields are valid. \u2013 the connection is unencrypted. This is the default.If <code>Direction</code> is <code>Connect</code> or <code>Poll</code>, then <code>Secure</code> can be:<code>Secure</code> \u2013 the connection is secure and certificates are provided. The <code>PublicCertFile</code>, <code>PrivateKeyFile</code>, <code>SSLValidation</code> and <code>Priority</code> fields are valid. \u2013 the connection is unencrypted. This is the default.<code>Anonymous</code> \u2013 the connection is secure but no certificate is provided on the client side. The <code>SSLValidation</code> and <code>Priority fields</code> are valid. <li>If <code>Direction</code> is <code>Listen</code>, then <code>Secure</code> can be:<code>Secure</code> \u2013 the connection is secure and certificates are provided. The <code>PublicCertFile</code>, <code>PrivateKeyFile</code>, <code>SSLValidation</code> and <code>Priority</code> fields are valid. \u2013 the connection is unencrypted. This is the default. <li><code>Secure</code> \u2013 the connection is secure and certificates are provided. The <code>PublicCertFile</code>, <code>PrivateKeyFile</code>, <code>SSLValidation</code> and <code>Priority</code> fields are valid.</li> <li> \u2013 the connection is unencrypted. This is the default. <li>If <code>Direction</code> is <code>Connect</code> or <code>Poll</code>, then <code>Secure</code> can be:<code>Secure</code> \u2013 the connection is secure and certificates are provided. The <code>PublicCertFile</code>, <code>PrivateKeyFile</code>, <code>SSLValidation</code> and <code>Priority</code> fields are valid. \u2013 the connection is unencrypted. This is the default.<code>Anonymous</code> \u2013 the connection is secure but no certificate is provided on the client side. The <code>SSLValidation</code> and <code>Priority fields</code> are valid. <li><code>Secure</code> \u2013 the connection is secure and certificates are provided. The <code>PublicCertFile</code>, <code>PrivateKeyFile</code>, <code>SSLValidation</code> and <code>Priority</code> fields are valid.</li> <li> \u2013 the connection is unencrypted. This is the default. <li><code>Anonymous</code> \u2013 the connection is secure but no certificate is provided on the client side. The <code>SSLValidation</code> and <code>Priority fields</code> are valid.</li> <li><code>PublicCertFile</code> is the fully-qualified path to, and name of, the file containing the public certificate. Empty by default. Validity depends on the value of the <code>Secure</code> field.</li> <li><code>PrivateKeyFile</code> is the fully-qualified path to, and name of, the file containing the private key. Empty by default. Validity depends on the value of the <code>Secure</code> field.</li> <li><code>RootCertDir</code> is the full path to (and name of) the directory that contains Certificate Authority root certificates. Empty by default (on the Microsoft Windows operating system, the RIDE uses the Microsoft certicate store).</li> <li><code>Priority</code> is the GnuTLS priority string (for complete documentation of this, see http://www.gnutls.org/manual/gnutls.html#Priority-Strings). Empty by default. Validity depends on the value of the <code>Secure</code> field.</li> <li><code>AcceptCertDir</code> is the full path to (and name of) the directory that contains the public certificates of all users that are allowed to connect. Empty by default.</li> <p>Two additional sections can be included within the .ini configuration file to control the IP addresses that are allowed or denied access to the connection. These are:</p> <pre><code>[AllowEndPoints]\n[DenyEndPoints]\n</code></pre> <p>For each of these, IPv6/IPv4 addresses and/or address ranges can be specified (multiple entries must be separated by commas). For example:</p> <pre><code>[AllowEndPoints]\nIPV4=192.168.100.0/24,192.168.17.0/24,127.0.0.0/10\nIPV6= fe80:ccbd:aa34:3cfb::0/64\n</code></pre> <pre><code>[DenyEndPoints]\nIPV4=212.0.0.0/8\nIPV6= 2a02:2658:1012::35/64\n</code></pre> <p>If <code>AllowEndPoints</code> is not included, all IP addresses are allowed to access the connection unless explicitly denied access with the <code>DenyEndPoints</code> field.</p>"},{"location":"sample_configuration_file/#tls-flags","title":"TLS Flags","text":"<p>TLS flags are employed as part of the certificate checking process; they determine whether a secure client or server can connect with a peer that does not have a valid certificate. When <code>Direction</code> is <code>Connect</code> or <code>Poll</code>, the RIDE acts as a server; when <code>Direction</code> is <code>Serve</code>, the RIDE acts as a client.</p> <p>The code numbers of the TLS flags described below can be added together and passed to the <code>SSLValidation</code> field to control the certificate checking process. If you do not require any of these flags, then the <code>SSLValidation</code> field should be set to <code>0</code>.</p> Code Name Description 1 CertAcceptIfIssuerUnknown Accept the peer certificate even if the issuer (root certificate) cannot be found. 2 CertAcceptIfSignerNotCA Accept the peer certificate even if it has been signed by a certificate not in the trusted root certificates' directory. 4 CertAcceptIfNotActivated Accept the peer certificate even if it is not yet valid (according to its valid from information). 8 CertAcceptIfExpired Accept the peer certificate even if it has expired (according to its valid to information). 16 CertAcceptIfIncorrectHostName Accept the peer certificate even if its hostname does not match the one it was trying to connect to. 32 CertAcceptWithoutValidating Accept the peer certificate without checking it (useful if the certificate is to be checked manually). 64 RequestClientCertificate Only valid when the RIDE is acting as a server; asks the client for a certificate but allows connections even if the client does not provide one. 128 RequireClientCertificate Only valid when the RIDE is acting as a server; asks the client for a certificate and refuses the connection if a valid certificate (subject to any other flags) is not provided by the client. <p>TLS flags have the same meaning irrespective of whether the RIDE is acting as a server or a client. However, for a server they are applied each time a new connection is established whereas for a client they are only applied when the client object is created.</p>"},{"location":"saved_responses_tab/","title":"Saved responses tab","text":""},{"location":"saved_responses_tab/#saved-responses-tab","title":"Saved Responses Tab","text":"<p>Allows saved option selections to be deleted.</p> <p>When using Link, options selected in dialog boxes are recorded in this tab. For example, saving file content opens a dialog box that offers options of fixing as code in the workspace, saving the file to disk, or discarding changes; the selected option for this file (or, optionally, all files with the same file extension) is recorded in this tab.</p> <p>To delete a previously-saved option selection for a file</p> <ol> <li>Open the Saved Responses tab.</li> <li>Select the file for which you want to delete the saved option.</li> <li>Click Delete.</li> <li>Click OK to save your changes and close the Preferences dialog box, Apply to save your changes without closing the Preferences dialog box or Cancel to close the Preferences dialog box without saving your changes.</li> </ol>"},{"location":"search_and_replace_editwindow/","title":"Search and replace editwindow","text":""},{"location":"search_and_replace_editwindow/#search-and-replace-edit-window","title":"Search and Replace (Edit Window)","text":"<p>The  icon in the Edit window's toolbar opens the Search bar, enabling a search for every occurrence of a specified string (this can include APL glyphs) to be performed within the code in the Edit window; optionally, a replacement string can be applied on an individual basis.</p> <p>The Search bar is shown in ; the icons in the Search bar are detailed in and its icons are detailed below.</p> <p>The Search bar (default)</p> <p>The  icon (Toggle replace mode) extends the Search bar to include a Replace field and related icons, as shown in  below.</p> <p>The Search bar (extended to include display of the Replace fields)</p> Icon Action Description Search for previous match Positions the cursor at the previous occurrence of the Search text. Search for next match Positions the cursor at the next occurrence of the Search text. Find in selection Only searches within the selected text. Close Closes the Search bar. Replace Replaces the selected text in the Edit window with the text specified in the Replace field of the Search bar and highlights the next match. Replace all Replaces all occurrences of the text specified in the Find field of the Search bar with that specified in the Replace field of the Search bar. <p>The Find field includes three filters, as detailed in below. Any combination of these filters can be applied when performing a search.</p> Icon Action Description Match case Applies a case-sensitive filter so that only occurrences that match the case of the string in the Find field are highlighted. Match whole word Only highlights whole words that match the string in the Find field. Some glyphs are treated as punctuation when identifying \"whole words\", for example, <code>; : , { } [ ] ( )</code> Use regular expression Allows regular expressions to be specified in the Find field. <p>To search for a string</p> <ol> <li>Enter the string to search for in the Find field in one of the following ways:- Press the Search button  and enter the string directly in the Find field.</li> <li>Enter the Search command () and enter the string directly in the Find field. <li> <p>Select the string in the Trace window and enter the Search command () or press the Search button ; the selected string is copied to the Find field. All occurrences of the specified string are highlighted in the Edit window and the number of occurrences is displayed to the right of the Find field. If the content of the Edit window is sufficiently long for there to be a vertical scroll bar, then the locations of occurrences of the specified string within the entire content are identified by yellow marks overlaid on the scroll bar. <li> <p>Press the Enter key to select the first occurrence of the search string after the last position of the cursor.</p> </li> <li>Press the Search for next match button  to advance the selection to the next occurrence of the search string.</li> <li>Repeat step 3 as required (the search is cyclic).</li> <li>Press the Esc key to exit the search functionality.</li> <p>To replace a string</p> <ol> <li>Do one of the following:</li> <li>Enter the replacement string directly in the Replace field.</li> <li>Press the Enter key to select the first occurrence of the search string after the last position of the cursor.</li> <li>Do one of the following:</li> <li>Press the Close button  to exit the search and replace functionality.</li> </ol>"},{"location":"search_tracewindow/","title":"Search tracewindow","text":""},{"location":"search_tracewindow/#search-trace-window","title":"Search (Trace Window)","text":"<p>The  icon in the Trace window's toolbar opens the Search bar, enabling a search for every occurrence of a specified string (this can include APL glyphs) to be performed within the code in the Trace window.</p> <p>The Search bar is shown in ; the icons in the Search bar are detailed in and its icons are detailed below.</p> <p>The Search Bar</p> Icon Action Description Search for previous match Positions the cursor at the previous occurrence of the Search text. Search for next match Positions the cursor at the next occurrence of the Search text. Find in selection Only searches within the selected text. Close Closes the Search bar. <p>To search for a string</p> <ol> <li>Enter the string to search for in the Find field in one of the following ways:- Press the Search button  and enter the string directly in the Find field.</li> <li>Enter the Search command () and enter the string directly in the Find field. <li> <p>Select the string in the Trace window and enter the Search command () or press the Search button ; the selected string is copied to the Find field. All occurrences of the specified string are highlighted in the Trace window and the number of occurrences is displayed to the right of the Find field. If the content of the Trace window is sufficiently long for there to be a vertical scroll bar, then the locations of occurrences of the specified string within the entire content are identified by yellow marks overlaid on the scroll bar. <li> <p>Press the Enter key to select the first occurrence of the search string after the last position of the cursor.</p> </li> <li>Press the Search for next match button  to advance the selection to the next occurrence of the search string.</li> <li>Repeat step 3 as required (the search is cyclic).</li> <li>Press the Close button  to exit the search functionality.</li>"},{"location":"session_user_interface/","title":"Session user interface","text":""},{"location":"session_user_interface/#session-user-interface","title":"Session User Interface","text":"<p>The menu bar menu options on macOS are different to those on Microsoft Windows and Linux. This section details the options for Microsoft Windows and Linux; for the macOS options see the Dyalog for macOS UI Guide. The RIDE's UI can vary slightly across different operating systems (and window managers); in particular, RIDE-specific menu bars can be located either within the development environment or in the global menu bar.</p> <p>By default, the Dyalog Session user interface includes five elements, as shown in :</p> <ul> <li>a caption (see Section )</li> <li>a menu bar (see Section )</li> <li>a Language bar (see Section )</li> <li>a Session window (see Section )</li> <li>a Status bar (see Section )</li> </ul> <p>The default Dyalog Session user interface (Microsoft Windows)</p> <p>Additional elements can also be present, as shown in :</p> <ul> <li>a workspace explorer (see Section )</li> <li>a debug information window (see Section )</li> </ul> <p>The Dyalog Session user interface with workspace explorer and debug information window displayed (Microsoft Windows)</p> <p>A context menuSection  is available in the Session window, all Edit windows and the Trace window (see Section ).</p>"},{"location":"session_window/","title":"Session window","text":""},{"location":"session_window/#session-window","title":"Session Window","text":"<p>The primary purpose of the Session window is to provide a scrolling area within which a user can enter APL expressions and view results. See Section  for more information on the Session window.</p> <p>You can move, resize, maximise and minimise the Session window using the standard facilities provided by your operating system.</p>"},{"location":"session_window_input/","title":"Session window input","text":""},{"location":"session_window_input/#session-window","title":"Session Window","text":"<p>The Session window contains:</p> <ul> <li>the input line \u2013 the last line entered in the Session window; this is (usually) the line into which you type an expression to be evaluated.</li> <li>a gutter \u2013 the left-hand side of the window is a gutter that can include input/output information. Specifically:a small red circle in the gutter is present on every line that has been modified since last pressing Enter. This includes old lines that have been modified as well as new lines. These indicators show which lines will be executed when you subsequently hit Enter, at which point the indicator is removed.a left bracket indicates \"groups\" of default output (to distinguish it from <code>\u2395</code> or <code>\u235e</code> output).</li> <li>a small red circle in the gutter is present on every line that has been modified since last pressing Enter. This includes old lines that have been modified as well as new lines. These indicators show which lines will be executed when you subsequently hit Enter, at which point the indicator is removed.</li> <li>a left bracket indicates \"groups\" of default output (to distinguish it from <code>\u2395</code> or <code>\u235e</code> output).</li> <li>the Session log \u2013 a history of previously-entered expressions and the results they produced.</li> </ul> <p>If a log file is being used, then the Session log is loaded into memory when a Dyalog Session is started. When the Dyalog Session is closed, the Session log is written to the log file, replacing its previous contents.</p>"},{"location":"shortcuts_tab/","title":"Shortcuts tab","text":""},{"location":"shortcuts_tab/#shortcuts-tab","title":"Shortcuts Tab","text":"<p>Allows customisation of the keyboard shortcuts for command codes (see Section  and Appendix ). Multiple shortcuts can be defined for any command code, but each shortcut must be unique.</p> <p>To change the keyboard shortcut for a command code</p> <ol> <li>Open the Shortcuts tab.</li> <li>Locate the command code for which you want to define a new keyboard shortcut. This can be done by scrolling through the list of possible command codes or by entering a string in the Search field. If a string is entered in the Search field then a dynamic search of both the command codes and descriptions is performed.</li> <li>Optionally, delete any existing shortcuts for the command by clicking the red cross to the right of the shortcut.</li> <li> <p>Optionally, add a new shortcut. To do this:Click the plus symbol that appears to the right of any existing shortcuts when the shortcut is moused over. A field in which to enter the shortcut is displayed. In this field, enter the keystrokes to map to this action. The field closes when the keystrokes have been entered and the new shortcut is displayed on the Shortcuts tab. If the keystrokes that you enter are already used for a different command code, then both occurrences will be highlighted and you should remove any duplicate entries (an error message will be displayed if you attempt to apply/save settings that contain duplicate entries).</p> </li> <li> <p>Click the plus symbol that appears to the right of any existing shortcuts when the shortcut is moused over.</p> </li> <li>In this field, enter the keystrokes to map to this action. The field closes when the keystrokes have been entered and the new shortcut is displayed on the Shortcuts tab.</li> <li>Click OK to save your changes and close the Preferences dialog box, Apply to save your changes without closing the Preferences dialog box or Cancel to close the Preferences dialog box without saving your changes.</li> </ol> <p>The tooltip showing keyboard shortcuts for command codes (obtained by positioning the cursor over the  button on the right hand side of the Language bar) is dynamically updated to any customisation.</p>"},{"location":"starting_a_dyalog_session/","title":"Starting a Dyalog Session","text":"<p>Note</p> <p>When running a Dyalog Session through the RIDE, that Session should only be accessed through the RIDE. One exception to this rule is when developing or running applications that are <code>\u2395SM</code>/<code>\u2395SR</code> based; access to the <code>\u2395SM</code> window cannot be made through the RIDE.</p> <p>When running a Dyalog Session through the RIDE, the Session can be:</p> <ul> <li> <p>local to the machine on which the RIDE is running. </p> <p>This requires Dyalog to be installed on the machine on which the RIDE is running.</p> </li> <li> <p>remote from the machine on which the RIDE is running.</p> <p>The RIDE can start a Session using an interpreter installed on a remote machine irrespective of whether Dyalog is installed on the machine on which the RIDE is running. In this situation:</p> <ul> <li>The operating system on which the remote interpreter is running is irrelevant \u2013 the instructions given in this chapter apply to the operating system on which the RIDE is running (the two operating systems do not have to be the same).</li> <li>The remote machine does not need to have the RIDE installed but the Dyalog Session must be RIDE-enabled.</li> </ul> </li> </ul> <p>Connections between the RIDE and Dyalog interpreters are initialised through the RIDE-Dyalog Session dialog box. The exception to this is Zero Footprint use, which always requires Dyalog to be started first with suitable configuration parameters, after which the RIDE will appear when you direct a web browser at the APL interpreter. See Zero Footprint Ride for more information on Zero Footprint mode.</p> <p>This chapter describes how to use the RIDE to run Dyalog Sessions, both local and remote.</p>"},{"location":"starting_a_dyalog_session/#the-ride-dyalog-session-dialog-box","title":"The RIDE-Dyalog Session Dialog Box","text":"<p>When the RIDE is started, the RIDE\u2011Dyalog Session dialog box is displayed. The RIDE\u2011Dyalog Session dialog box comprises four areas, as shown below:</p> <ul> <li>the menu bar</li> <li>the list of configurations</li> <li>the basic information for the configuration selected in the configuration list</li> <li>the type-dependent information for the configuration selected in the configuration list</li> </ul> <p></p>"},{"location":"starting_a_dyalog_session/#menu-bar","title":"Menu Bar","text":"<p>Note</p> <p>The RIDE's UI can vary slightly across different operating systems (and window managers); in particular, RIDE-specific menu bars can be located either within the development environment or in the global menu bar.</p> <p>The options available under the Dyalog menu are detailed here:</p> Item Description About Dyalog Displays the About dialog box, which provides details of the RIDE. Preferences Opens the Preferences dialog box. Quit Closes the RIDE-Dyalog Session dialog box. <p>The options available under the Edit menu are detailed here:</p> Item Description Undo Reverses the previous action (where possible). Redo Reverses the effect of the previous Undo. Cut Deletes the selected text and places it on the clipboard. Copy Copies the selected text to the clipboard. Paste Pastes the text contents of the clipboard into the current location. Select All Selects all the text in the field in which the cursor is positioned. If the cursor is not within a field, then selects the text in all fields."},{"location":"starting_a_dyalog_session/#list-of-configurations","title":"List of Configurations","text":"<p>The list of configurations lists the names of previously-saved configurations. By default, a placeholder configuration called unnamed is present in the list of configurations with the Type set to Connect.</p> <p>Selecting a configuration from this list displays its basic information and type dependent information.</p> <p>At the bottom of the list of configurations is a bar containing four buttons:</p> <p></p> <p>The list of configurations' button bar</p> Button Name Description New Creates a new entry in the list of configurations. The default name for a new configuration is unnamed. Clone Creates an exact copy of the configuration currently selected in the list of configurations. Details can then be changed in the cloned configuration without impacting the original. Delete Prompts for confirmation before deleting the configuration currently selected in the list of configurations. Save Saves all items in the list of configurations. <p>In addition to the buttons, the following actions can be performed when a configuration is selected in the list of configurations:</p> <ul> <li> <p>activate the configuration</p> <p>Click CONNECT/START/LISTEN (as appropriate) in the basic information area to start a Dyalog Session through the RIDE.</p> </li> <li> <p>amend the configuration</p> <p>Change details in the basic or type-dependent information areas. Changes must be saved to be retained between RIDE sessions.</p> </li> </ul> <p>A configuration can also be activated by clicking the  button to the right of its name in the list of configurations.</p>"},{"location":"starting_a_dyalog_session/#types","title":"Types","text":"<p>The Type can be one of three options (selected from a drop-down list). The type that is selected determines the content of the type-dependent area. The options are:</p> <ul> <li>Start \u2013 the RIDE initiates and connects with a new local or remote interpreter</li> <li>Connect \u2013 a specific (local or remote) Dyalog interpreter is sought by the RIDE for connection</li> <li>Listen \u2013 the RIDE waits for a local or remote interpreter to connect to it</li> </ul> <p>Selecting a configuration from this list displays its basic information and type dependent information.</p>"},{"location":"starting_a_dyalog_session/#start","title":"Start","text":"<p>The most common use of the RIDE is where the RIDE launches an APL interpreter process and connects to it. The RIDE allocates a random TCP port and instructs the launched interpreter to connect to it immediately. The RIDE is also able to launch remote processes on machines that support Secure Shell (SSH) logins, in which case the communication between the RIDE and the interpreter is also encrypted.</p> <p>To start a Dyalog Session</p> <ol> <li>Open the RIDE-Dyalog Session dialog box.</li> <li>Select Start from the Type drop-down list.</li> <li>Optionally, check Save protocol log \u2013 this  records all communications between the interpreter and the RIDE. The default path/filename for this interpreter\u2011independent protocol log can be changed.</li> <li> <p>Select a security protocol from the drop-down list.</p> <p>The type-dependent information fields are displayed:</p> <ul> <li> <p>If the security protocol is set to Local: then the RIDE can only initiate and connect with a local interpreter:</p> <ul> <li>Interpreter: the interpreter to initiate an instance of, selected from a drop-down list comprising all versions of Dyalog that are installed on the machine that the RIDE is running on; versions that are installed but not supported by the RIDE are listed but not enabled. If the path and/or name of the interpreter have been amended from the default installation values, then they might not appear in the drop-down list. An interpreter in this situation can be chosen by selecting Other\u2026 in the drop-down list and entering its full path in the path to executable field. The value of the path to executable field is remembered across invocations of the RIDE.</li> <li>Working directory: optionally, specify the fully-qualified path to, and name of, a directory that overrides the interpreter's default working directory.</li> <li>Arguments: optionally, specify additional arguments for the interpreter (one argument per line).</li> <li>Environment variables: optionally, specify additional configuration parameters for the interpreter. These should be specified as &lt;key&gt;=&lt;value&gt; pairs, with one pair per line, no extra spaces and no quoting or escaping of value.</li> </ul> </li> <li> <p>If the security protocol is set to SSH then the RIDE connects to a local or remote interpreter using the secure shell network protocol:</p> <p>Note</p> <p>The use of SSH is not applicable when the interpreter is running on the Microsoft Windows operating system.</p> <ul> <li>Host: the IP address/unique DNS name of the machine that the interpreter will be running on.</li> <li>Port: the number of the port that the RIDE and the interpreter will connect through. By default, this is port 4502.</li> <li>SSH Port: the number of the port to use for SSH. The default is 22.</li> <li>User: the user name on the machine that the interpreter is running on.</li> <li>Key file: the fully-qualified filename of the SSH identity file.</li> <li> <p>Password/passphrase: either the password corresponding to the specified User or, if an encrypted key file is being used for authentication, the passphrase.</p> <ul> <li>If an encrypted Key File is specified, a passphrase is required for authentication.</li> <li>If an unencrypted Key File is specified, a password/passphrase is not required.</li> <li>If a Key File is not specified, then the password corresponding to the specified User is required.</li> </ul> </li> <li> <p>Interpreter: the interpreter to initiate an instance of, selected from a drop-down list comprising all versions of Dyalog installed on the machine specified in the Host field (click the  button to populate this list). The path to the interpreter selected in the drop-down list is displayed in the path to executable field. If the required interpreter is not included in the drop-down list, select Other\u2026 in the drop-down list and enter its fully-qualified path in the path to executable field. The value of the path to executable field is remembered across invocations of the RIDE.</p> </li> <li>Arguments: optionally, specify additional arguments for the interpreter (one argument per line).</li> <li>Environment variables: optionally, specify additional configuration parameters for the interpreter. These should be specified as &lt;key&gt;=&lt;value&gt; pairs, with one pair per line, no extra spaces and no quoting or escaping of value.</li> </ul> </li> </ul> </li> <li> <p>Click START.</p> </li> </ol> <p>Note</p> <p>In the Dyalog Session, selecting New Session in the File menu launches another instance of the interpreter whose path is specified in the path to executable field.</p>"},{"location":"starting_a_dyalog_session/#connect","title":"Connect","text":"<p>The RIDE connects to a specific running (local or remote) Dyalog interpreter that is listening for connections. This is typically used when the RIDE is monitoring processes that have been started to provide some kind of service and to debug them if something unexpected happens.</p> <p>Warning</p> <p>You should only configure a Dyalog interpreter to listen for connections if either of the following apply: - you have a firewall that allows you specify which client machines will be able to connect - you use a configuration file to specify suitable security filters to limit access to the interpreter.</p> <p>Your application can use 3502\u2336 to enable debugging when it is appropriate.</p> <p>To safely experiment with configuring APL to listen for connections, leave the address field in the following examples empty, for example, <code>RIDE_INIT=\"SERVE::4502\"</code>. If the address field is empty, then only local connections are allowed. The <code>*</code> used below instructs the interpreter to listen on all available network adapters.</p> <p>To start a Dyalog Session</p> <ol> <li> <p>On the machine that the interpreter will run on, start a Dyalog Session, optionally specifying an IP address/DNS name and port that it will listen for RIDE connections on using the <code>RIDE_INIT</code> configuration parameter. If specified, this will override any <code>RIDE_INIT</code> values defined in a configuration file.</p> <p>For example, if the RIDE is on a different machine and will connect to a Dyalog version 16.0 Unicode 64-bit interpreter through port 4502, then enter the following in a command window/at the command prompt:</p> <pre><code>- on AIX:&lt;br /&gt;`$ RIDE_INIT=\"SERVE:*:4502\" /opt/mdyalog/16.0/64/unicode/p7/mapl`\n- on Linux:&lt;br /&gt;`$ RIDE_INIT=\"SERVE:*:4502\" dyalog`\n- on macOS:&lt;br /&gt;`$ RIDE_INIT=\"SERVE:*:4502\" /Dyalog/Dyalog-16.0.app/Contents/Resources/Dyalog/mapl`\n- on Microsoft Windows:&lt;br /&gt;`&amp;gt; cd \"C:\\Program Files\\Dyalog\\Dyalog APL-64 16.0 Unicode\"&lt;br&gt;&lt;/br&gt;&amp;gt; dyalog RIDE_INIT=SERVE:*:4502`\n\n    Alternatively, create a shortcut with the appropriate settings:\n\n        1. Select the appropriate Dyalog installation and create a shortcut to it.\n        2. Right-click on the shortcut icon and select **Properties** from the context menu that is displayed.\n\n            The **Properties** dialog box is displayed.\n\n        3.In the **Shortcut** tab, go to the **Target** field and:\n\n            - place `\"` marks around the path (if not already present)\n            - append `RIDE_INIT=SERVE:*:4502`\n\n                For example: `\"C:\\Program Files\\Dyalog\\Dyalog APL-64 16.0 Unicode\\dyalog.exe\" RIDE_INIT=SERVE:*:4502`\n        4. Click **OK**.\n</code></pre> </li> <li> <p>On the machine that the RIDE is running on: </p> <ol> <li>Open the RIDE-Dyalog Session dialog box. </li> <li>Select Connect from the Type drop-down list. </li> <li>Optionally, check Save protocol log \u2013 this  records all communications between the interpreter and the RIDE. The default path/filename for this interpreter\u2011independent protocol log can be changed.</li> <li> <p>Select a security protocol from the drop-down list.</p> <p>The type-dependent information fields are displayed.</p> <ul> <li> <p>If the security protocol is set to TCP:</p> <ul> <li>Host: the IP address/unique DNS name of the machine that the interpreter is running on. </li> <li>Port: the number of the port that the interpreter is listening on. By default, the interpreter listens on port 4502.</li> </ul> </li> <li> <p>If the security protocol is set to SSH then the RIDE connects to a remote interpreter using the secure shell network protocol:</p> <p>Warning</p> <p>The use of SSH is not appropriate when the interpreter is running on the Microsoft Windows operating system.</p> <ul> <li>Host: the IP address/unique DNS name of the machine that the interpreter is running on.</li> <li>Port: the number of the port that the interpreter is listening on. By default, the interpreter listens on port 4502.</li> <li>SSH Port: the number of the port to use for SSH. The default is 22.</li> <li>User: the user name on the machine that the interpreter is running on.</li> <li>Key file: the fully-qualified filename of the SSH identity file.</li> <li> <p>Password/passphrase: either the password corresponding to the specified User or, if an encrypted key file is being used for authentication, the passphrase.</p> <ul> <li>If an encrypted Key File is specified, a passphrase is required for authentication.</li> <li>If an unencrypted Key File is specified, a password/passphrase is not required.</li> <li>If a Key File is not specified, then the password corresponding to the specified User is required.</li> </ul> </li> </ul> </li> <li> <p>If the security protocol is set to TLS/SSL then secure connections are enabled:</p> <p>Note</p> <p>By default, the RIDE qualifies the server certificate using the root authority certificates available in the Microsoft Certificate Store</p> <ul> <li>Host: the IP address/unique DNS name of the machine that the interpreter is running on.</li> <li>Port: the number of the port that the interpreter is listening on. By default, the interpreter listens on port 4502.</li> <li>Three optional check boxes (and associated fields) are relevant if you have not added your root certificate to the Microsoft Certificate Store or are not running on the Microsoft Windows operating system:<ul> <li>Provide user certificate: if selected, populate the Cert and Key fields with the fully-qualified paths to, and names of, the PEM encoded certificate file and key file respectively \u2013 the interpreter (RIDE server) uses this to verify that the RIDE client is permitted to connect to it.</li> <li>Custom root certificates: if selected, populate the Directory field with the fully-qualified path to, and name of, the directory that contains multiple root certificates and key files to use for authentication.</li> <li>Validate server subject common name matches hostname: verifies that the CN (Common Name) field of the server's certificate matches the hostname.</li> <li>Click CONNECT.</li> </ul> </li> </ul> </li> </ul> </li> </ol> </li> </ol>"},{"location":"starting_a_dyalog_session/#listen","title":"Listen","text":"<p>The RIDE waits for a local or remote interpreter to connect to it. This approach is more secure than configuring the interpreter to listen for connections, because an intruder will only be able to communicate with the RIDE rather than an APL system. An application that needs to be debugged can initiate the connection to a listening RIDE using 3502\u2336 to set <code>RIDE_INIT</code> when debugging is desired.</p> <p>To start a Dyalog Session</p> <ol> <li> <p>On the machine that the RIDE is running on: Open the RIDE-Dyalog Session dialog box.Select Listen from the Type drop down list. The type-dependent information fields are displayed.In the Host field, specify the IP address/unique DNS name that the RIDE will bind to. By default, the RIDE will bind to all interfaces.In the Port field, specify the number of the port that the RIDE should listen on. By default, the RIDE listens on port 4502. Optionally, check Save protocol log \u2013 this  records all communications between the interpreter and the RIDE. The default path/filename for this interpreter\u2011independent protocol log can be changed. Click LISTEN. The Waiting for connection... dialog box is displayed.</p> </li> <li> <p>Open the RIDE-Dyalog Session dialog box.</p> </li> <li>Select Listen from the Type drop down list.</li> <li>Optionally, check Save protocol log \u2013 this  records all communications between the interpreter and the RIDE. The default path/filename for this interpreter\u2011independent protocol log can be changed.</li> <li>Click LISTEN.</li> <li>On the machine that the interpreter will run on, start a Dyalog Session from the command prompt. When doing this, the IP address/DNS name for the machine that the RIDE is running on and the same port number as the RIDE is listening on must be specified as connection properties. For example, if the RIDE is running on a machine that has DNS name <code>jaypc.dyalog.bramley</code> and is listening on port 4502, then enter the following in a command window/at the command prompt:<ul> <li>AIX: <code>$ RIDE_INIT=\"CONNECT:jaypc.dyalog.bramley:4502\" /opt/mdyalog/16.0/64/unicode/p7/mapl</code></li> <li>Linux: <code>$ RIDE_INIT=\"CONNECT:jaypc.dyalog.bramley:4502\" dyalog</code></li> <li>macOS: <code>$ RIDE_INIT=\"CONNECT:jaypc.dyalog.bramley:4502\" /Dyalog/Dyalog-16.0.app/Contents/Resources/Dyalog/mapl</code></li> <li>Microsoft Windows: <code>&gt; cd \"C:\\Program Files\\Dyalog\\Dyalog APL-64 16.0 Unicode\" &gt; dyalog RIDE_INIT=CONNECT:jaypc.dyalog.bramley:4502</code></li> </ul> </li> </ol> <p>The Dyalog Session starts.</p>"},{"location":"starting_a_dyalog_session/#the-zero-footprint-ride","title":"The Zero Footprint RIDE","text":"<p>The RIDE is an application that is implemented using a combination of HTML and Javascript. A full RIDE installation includes a small web server framework called Node/JS, which acts as a host for the application, and an embedded web browser that renders it to the user as a desktop application.</p> <p>Dyalog is able to act as a web server, hosting the RIDE application and making it available to any compatible web browser \u2013 this is known as \"Zero Footprint\" operation as the RIDE is not installed on the client machine but is downloaded by the web browser on demand. The advantage of the Zero Footprint RIDE is that an APL session can be monitored and maintained from any device with a suitable browser installed; no installation of RIDE is required.</p> <p>The Zero Footprint RIDE provides the same features for viewing and developing APL code as the desktop RIDE, with the following limitations:</p> <ul> <li>The Zero Footprint RIDE can only interact with the APL interpreter that it is connected to; none of the functionality related to launching new sessions or connecting to running APL sessions is available.</li> <li>Preferences are persisted in browser storage using cookies.</li> <li>Behaviour that is provided by the browser (undo/redo, cut/copy/paste, change font size) does not appear in the RIDE's menus.</li> <li>Window captions cannot be controlled.</li> </ul> <p>To make the Zero Footprint RIDE available from a web browser</p> <ol> <li>Install Dyalog and the RIDE. These must both be installed on the same machine; the RIDE must be installed in its default location. On non-Windows platforms the Zero Footprint RIDE is automatically installed when Dyalog is installed. For information on installing the RIDE on Microsoft Windows, see Installing on Windows</li> <li>Set the <code>RIDE_INIT</code> configuration parameter to <code>HTTP:address:port</code> (see RIDE Init), for example, <code>RIDE_INIT=HTTP:*:8080</code>.</li> <li>Start a Dyalog session.</li> </ol> <p>On non-Windows platforms (IBM AIX, macOS and Linux), the interpreter expects to find the Zero Footprint RIDE files in the DYALOG/RIDEapp directory; this removes the need to include the <code>HttpDir</code> field in a configuration file (if one is used \u2013 see Configuration INI-file).</p> <p>Alternatively, start a Dyalog Session and enter:</p> <p><code>3502\u2336'CONNECT:jaypc.dyalog.bramley:4502' 3502\u23361</code></p> <p>The new Dyalog Session will connect to the RIDE and remain connected until the Dyalog Session is terminated.</p> <p>Note</p> <p>On Microsoft Windows, an alternative to using the command window is to create a shortcut with the appropriate settings.</p> <p>To configure the shortcut 1. Select the appropriate Dyalog installation and create a shortcut to it. 2. Right-click on the shortcut icon and select Properties from the context menu that is displayed. 3. In the Shortcut tab, go to the Target field and:place \" marks around the pathappend <code>RIDE_INIT=CONNECT:10.0.38.1:4502</code> 4. place \" marks around the path 5. append <code>RIDE_INIT=CONNECT:10.0.38.1:4502</code> 6. Click OK.</p>"},{"location":"status_bar/","title":"Status bar","text":""},{"location":"status_bar/#status-bar","title":"Status Bar","text":"<p>The Status bar is located at the bottom of the Session window. It contains a button and seven Session status fields, detailed below, as shown in ; the items in the Status bar are detailed in .</p> <p>The Status bar</p> Item Description Opens the Preferences dialog box (see Section  ). <code>&amp;: &lt;number&gt;</code> Displays the number of threads currently running (minimum value is 1). Turns blue if greater than 1. <code>\u2395DQ: &lt;number&gt;</code> Displays the number of events in the APL event queue. Turns blue if non\u2011zero. <code>\u2395TRAP</code> Turns blue if <code>\u2395TRAPSI</code> is set. <code>\u2395SI: &lt;number&gt;</code> Displays the length of <code>\u2395SI</code> . Turns blue if non\u2011zero. <code>\u2395IO: &lt;number&gt;</code> Displays the value of <code>\u2395IO</code> . Turns blue if not equal to the value defined by the Default_IO configuration parameter (default = 1). <code>\u2395ML: &lt;number&gt;</code> Displays the value of <code>\u2395ML</code> . Turns blue if not equal to the value defined by the Default_ML configuration parameter (default = 1). <code>Pos &lt;n&gt;/&lt;n&gt;, &lt;n&gt;</code> Displays the location of the cursor in the active window (line number/total lines, column number)."},{"location":"suspending_execution/","title":"Suspending execution","text":""},{"location":"suspending_execution/#suspending-execution","title":"Suspending Execution","text":"<p>To assist with investigations into the behaviour of a set of statements (debugging), the system can be instructed to suspend execution just before a particular statement. This is done by setting a breakpoint \u2013 see Section .</p> <p>It is sometimes necessary to suspend the execution of a function, for example, if an  endless loop has been inadvertently created or a response is taking an unacceptably long time. This is done using an interrupt \u2013 see Section .</p> <p>Suspended functions can be viewed through the stack; the most recently-referenced function is at the top of the stack. The content of the stack can be queried with the <code>)SI</code> system command; this generates a list of all suspended and pendent (that is, awaiting the return of a called function) functions, where suspended functions are indicated by a <code>*</code>. For more information on the stack and the state indicator, see the Dyalog Programming Reference Guide.</p>"},{"location":"syntax_colouring/","title":"Syntax colouring","text":""},{"location":"syntax_colouring/#syntax-colouring","title":"Syntax Colouring","text":"<p>Applicable in the Edit window and Trace window</p> <p>Syntax colouring assigns different colours to various components, making them easily identifiable. The default syntax colouring convention used is detailed in below.</p> Colour Syntax black grey maroon red teal navy blue purple <p>The foreground colour and/or the background colour (highlighting) can be customised by syntax type \u2013 see Section .</p>"},{"location":"terminating_a_dyalog_session/","title":"Terminating a dyalog session","text":""},{"location":"terminating_a_dyalog_session/#terminating-a-dyalog-session-running-through-the-ride","title":"Terminating a Dyalog Session Running Through the RIDE","text":"<p>The Dyalog Session can be terminated (without having to close any open windows first) in any of the following ways:</p> <ul> <li>From the menu options:Linux: Select File &gt; QuitmacOS: Select Dyalog &gt; Quit DyalogMicrosoft Windows: Select File &gt; Quit</li> <li>Linux: Select File &gt; Quit</li> <li>macOS: Select Dyalog &gt; Quit Dyalog</li> <li>Microsoft Windows: Select File &gt; Quit</li> <li> <p>Enter:Linux: Ctrl + QmacOS : \u2318 + QMicrosoft Windows: Ctrl + Q (only if the Dyalog Unicode IME is not enabled \u2013 see Section )</p> </li> <li> <p>Linux: Ctrl + Q</p> </li> <li>macOS : \u2318 + Q</li> <li>Microsoft Windows: Ctrl + Q</li> </ul> <p>In addition, when the Session window is the active window, the Dyalog Session can be terminated cleanly in any of the following ways:</p> <ul> <li>Enter <code>)OFF</code></li> <li>Enter <code>\u2395OFF</code></li> <li>Enter  <li>macOS: \u2318 + W</li>"},{"location":"the_dyalog_development_environment/","title":"The Dyalog Development Environment","text":"<p>When a Dyalog Session is started through the RIDE, the Dyalog development environment is displayed. This means that:</p> <ul> <li>the Dyalog Session user interface is displayed - the keyboard key mappings for APL glyphs are enabled</li> </ul>"},{"location":"the_dyalog_development_environment/#session-user-interface","title":"Session User Interface","text":"<p>The menu bar menu options on macOS are different to those on Microsoft Windows and Linux. This section details the options for Microsoft Windows and Linux; for the macOS options see the Dyalog for macOS UI Guide.</p> <p>Note</p> <p>The RIDE's UI can vary slightly across different operating systems (and window managers); in particular, RIDE-specific menu bars can be located either within the development environment or in the global menu bar.</p> <p>By default, the Dyalog Session user interface includes five elements, as shown in </p> <p></p> <ul> <li>a caption</li> <li>a menu bar</li> <li>a Language bar</li> <li>a Session window</li> <li>a Status bar</li> </ul> <p>Additional elements can also be present, as shown in :</p> <p></p> <ul> <li>a workspace explorer</li> <li>a debug information window</li> </ul> <p>The Dyalog Session user interface with workspace explorer and debug information window displayed (Microsoft Windows)</p> <p>A context menu is available in the Session window, all Edit windows and the Trace window.</p>"},{"location":"the_dyalog_development_environment/#caption","title":"Caption","text":"<p>The caption at the top of the Session window is the name of the Session.</p> <p>The caption can be customised.</p>"},{"location":"the_dyalog_development_environment/#menu-bar","title":"Menu Bar","text":"<p>The menu bar menu options on macOS are different to those on Microsoft Windows and Linux. This section details the options for Microsoft Windows and Linux; for the macOS options see the Dyalog for macOS UI Guide.</p> <p>The menu names in the menu bar and the options under each menu can be customised.</p>"},{"location":"the_dyalog_development_environment/#file-menu","title":"File Menu","text":"<p>The options available under the File menu are detailed below. These control the RIDE\u2011enabled APL process connections (both on local and remote machines).</p> Item Description Open... Prompts for a filename. If a workspace file is selected (a .dws file) then it is loaded into the Session; any other file is opened in the Edit window. Only relevant if the Session was started using the Start connection type. New Session Starts a new Dyalog Session (a new instance of the interpreter). Only relevant if the Session was started using the Start connection type. Connect\u2026 Opens the RIDE-Dyalog [Session dialog]((the_ridedyalog_session_dialog_box.md) box. Quit Terminates the Dyalog Session."},{"location":"the_dyalog_development_environment/#edit-menu","title":"Edit Menu","text":"<p>The options available under the Edit menu assist with manipulating text within (and between) windows. They are detailed below.</p> Item Description Undo Reverses the previous action. Redo Reverses the effect of the previous Undo . Cut Deletes the selected text from the active window and places it on the clipboard. Copy Copies the selected text to the clipboard. Paste Pastes the text contents of the clipboard into the active window at the current location. Find... Enables a search for every occurrence of a specified string (this can include APL glyphs) within the code in the active window (Session or Edit). Find and Replace... Enables a search for every occurrence of a specified string (this can include APL glyphs) within the code in the active window (Session or Edit); optionally, a replacement string can be applied on an individual basis. Preferences Opens the Preferences dialog box. <p>A context menu that includes the Undo, Redo, Cut, Copy and Paste options from the Edit menu is available in the Session window, all Edit windows and the Trace window.</p>"},{"location":"the_dyalog_development_environment/#view-menu","title":"View Menu","text":"<p>The View menu options enable the appearance of the Dyalog Session to be changed.</p> Item Description Show Language Bar Toggles display of the Language bar at the top of the Session window. Show Status bar Toggles display of the Status bar at the bottom of the Session window. Show Workspace Explorer Toggles display of the workspace explorer to the left of the Session window. Show Debug Toggles display of the debug information window to the right of the Session window. Line Wrapping in Session Toggles line wrapping. When off, <code>\u2395PW</code> is used to determine line length. When on, a combination of <code>\u2395PW</code> and line wrapping is used. Show Status Window Toggles display of the Status window, which displays system messages and supplementary information. Auto Status When checked, displays the Status window when a new message is generated for it. Stops Toggles display of an additional column at the left-hand side of the Edit / Trace windows in which break-points can be set/unset. Hiding this column does not remove any previously-set break-points. Line Numbers Toggles display of line numbers in the Edit / Trace windows. Outline Toggles code folding/outlining for control structures (including <code>:Section</code> structures) and functions in Edit windows. When toggled, existing code in an open Edit window is automatically updated to reflect the new rules. Increase Font Size Increases the size of the font in all the windows. Decrease Font Size Decreases the size of the font in all the windows. Reset Font Size Sets the size of the font in all the windows to its default value. Toggle Full Screen Toggles the entire session between its current size and full screen size."},{"location":"the_dyalog_development_environment/#action-menu","title":"Action Menu","text":"<p>The options available under the Action menu enable Edit and Trace windows to be opened and allow currently-running APL code to be interrupted with trappable events.</p> Item Description Edit If the cursor is on or immediately after <code>&lt;object name&gt;</code> , then opens an Edit window on that name. Trace In the Session window: If the cursor is on a line containing calls to multi-line functions, a Trace window is opened and the functions traced ( explicit trace ). If the cursor is on a line containing no text and there is a suspended function (or operator) on the execution stack, open a Trace window for that function ( naked trace ) In a Trace window: Open a new Trace window for any multi-line function (or operator) in that line and trace that line as it is evaluated. Clear all trace/stop/monitor Removes any trace/stop/monitor flags  (as set by <code>\u2395TRACE</code> / <code>\u2395STOP</code> / <code>\u2395MONITOR</code> ) from all functions in the workspace. Weak Interrupt Suspends execution at the start of the next line. Strong Interrupt Suspends execution after the current primitive operation."},{"location":"the_dyalog_development_environment/#threads-menu","title":"Threads Menu","text":"<p>The options available under the Threads menu are only relevant when connected to a compatible interpreter. For more information on threads, see the Dyalog Programming Reference Guide.</p> Item Description Pause on Error Pauses all other threads when a thread suspends due to an error or an interrupt. Pause all Threads Pauses all threads (including currently-suspended threads). Unpause all threads Unpauses all paused threads (suspended threads remain suspended). Continue all threads Resumes all paused threads, restarts all suspended threads, and closes the Trace window."},{"location":"the_dyalog_development_environment/#window-menu","title":"Window Menu","text":"<p>The option available under the Window menu closes all open Edit and Trace windows.</p> Item Description Close All Windows Closes all open Edit and Trace windows (the Session window, workspace explorer and debug information window remain open)."},{"location":"the_dyalog_development_environment/#help-menu","title":"Help Menu","text":"<p>The options available under the Help menu provide access to the Dyalog documentation, website, and support.</p> Item Description Getting Started Opens your default web browser on the Getting Started page of Dyalog Ltd's website. Dyalog Help Opens your default web browser on the Welcome page of Dyalog's online documentation. Language Elements Opens your default web browser on the Language Elements page of Dyalog's online documentation. Documentation Centre Opens your default web browser on the Documentation Centre page of Dyalog Ltd's website. Dyalog Website Opens your default web browser on the home page of Dyalog Ltd's website. Email Dyalog Opens your email client with a pre-populated template for an email to Dyalog support (including subject line and IDE/interpreter information). Latest Enhancements Opens your default web browser on the Key Features page of Dyalog's online documentation. Read Me Opens your default web browser on the Dyalog ReadMe page, containing the latest information about Dyalog. Third Party Licences Opens your default web browser on the Licences for Third-Party Components page of Dyalog's online documentation. About Displays the About dialog box, which provides details of the current RIDE and connected Dyalog interpreter."},{"location":"the_dyalog_development_environment/#language-bar","title":"Language Bar","text":"<p>The Language bar is located at the top of the Session window, beneath the menu bar. It contains buttons for each of the glyphs used as primitives in Dyalog.</p> <p>When the cursor is positioned over one of the glyphs, information for that glyph is displayed. This includes the name of the glyph, the keyboard shortcut to enter it, its monadic/dyadic name and examples of its syntax, arguments and result.</p> <p>Clicking on one of the glyphs copies that glyph into the active Session/Edit window at the position of the input cursor (the same as typing it directly into the Session/Edit window).</p> <p>The order of glyphs in the Language bar can be customised by using the mouse to drag-and-drop individual glyphs to the required location.</p> <p>Display of the Language bar can be toggled with the <code>View &gt; Show Language Bar</code> menu option or by entering the Toggle Language bar command (<code>&lt;LBR&gt;</code>).</p> <p>On the right hand side of the Language bar is the   button:</p> <ul> <li>Positioning the cursor over the  button displays a dynamic tooltip showing all configured keyboard shortcuts for command codes.</li> <li>Clicking on the  button displays the Preferences dialog box (the same as selecting the <code>Edit &gt; Preferences</code> menu option).</li> </ul>"},{"location":"the_dyalog_development_environment/#session-window","title":"Session Window","text":"<p>The primary purpose of the Session window is to provide a scrolling area within which a user can enter APL expressions and view results.</p> <p>You can move, resize, maximise and minimise the Session window using the standard facilities provided by your operating system.</p>"},{"location":"the_dyalog_development_environment/#status-bar","title":"Status Bar","text":"<p>The Status bar is located at the bottom of the Session window. It contains a button and seven Session status fields, detailed below.</p> <p> </p> Item Description Opens the Preferences dialog box. <code>&amp;: &lt;number&gt;</code> Displays the number of threads currently running (minimum value is 1). Turns blue if greater than 1. <code>\u2395DQ: &lt;number&gt;</code> Displays the number of events in the APL event queue. Turns blue if non\u2011zero. <code>\u2395TRAP</code> Turns blue if <code>\u2395TRAPSI</code> is set. <code>\u2395SI: &lt;number&gt;</code> Displays the length of <code>\u2395SI</code> . Turns blue if non\u2011zero. <code>\u2395IO: &lt;number&gt;</code> Displays the value of <code>\u2395IO</code> . Turns blue if not equal to the value defined by the Default_IO configuration parameter (default = 1). <code>\u2395ML: &lt;number&gt;</code> Displays the value of <code>\u2395ML</code> . Turns blue if not equal to the value defined by the Default_ML configuration parameter (default = 1). <code>Pos &lt;n&gt;/&lt;n&gt;, &lt;n&gt;</code> Displays the location of the cursor in the active window (line number/total lines, column number)."},{"location":"the_dyalog_development_environment/#workspace-explorer","title":"Workspace Explorer","text":"<p>The workspace explorer is located to the left of the Session window. It contains a hierarchical tree view of all the namespaces, classes, functions, operators and variables in the active workspace (under <code>#</code>) and in the system namespace (under <code>\u2395SE</code>).</p> <p>Double-clicking on a namespace, class, function, operator or variable opens its definition in the Edit window.</p> <p>Display of the workspace explorer can be toggled with the View &gt; Show Workspace Explorer menu option or by entering the Toggle Workspace Explorer command (<code>&lt;WSE&gt;</code>).</p>"},{"location":"the_dyalog_development_environment/#debug-information-window","title":"Debug Information Window","text":"<p>The debug information window is located to the right of the Session window. It comprises two areas:</p> <ul> <li>The Threads area lists the threads that are currently in existence. For each thread the following information is provided:a description comprising the thread ID (<code>\u2395TID</code>) and name (<code>\u2395TNAME</code>)the state of the thread, that is, what it is doing (for example, <code>Session</code>, <code>Pending</code>, <code>:Hold</code>, <code>\u2395NA</code>)the thread requirements (<code>\u2395TREQ</code>)a flag indicating whether the thread is Normal or Paused</li> <li>a description comprising the thread ID (<code>\u2395TID</code>) and name (<code>\u2395TNAME</code>)</li> <li>the state of the thread, that is, what it is doing (for example, <code>Session</code>, <code>Pending</code>, <code>:Hold</code>, <code>\u2395NA</code>)</li> <li>the thread requirements (<code>\u2395TREQ</code>)</li> <li>a flag indicating whether the thread is Normal or Paused</li> <li>The SI Stack area lists the functions in the execution stack; each function in the list also has the line number and source code of the line that caused the function to be added to the stack. Equivalent to the result of <code>)SI</code>.</li> </ul> <p>Display of the debug information window can be toggled with the View &gt; Show Debug menu option.</p>"},{"location":"the_dyalog_development_environment/#context-menu","title":"Context Menu","text":"<p>A context menu is available by right-clicking within the Session, Edit and Trace windows. The options available under the context menu are dependent on the window from which it was accessed and are detailed below.</p> Item Description Fix Edit : Fixes the function without closing the Edit window. Skip to line Trace : Moves the current execution marker to the line on which the cursor is positioned. Cut Session/Edit/Trace : Deletes the selected text from the active window and places it on the clipboard. Only enabled when text is selected. Never enabled in the Trace window. Copy Session/Edit/Trace : Copies the selected text to the clipboard. Only enabled when text is selected. Paste Session/Edit/Trace : Pastes the text contents of the clipboard into the active window at the current location. Never enabled in the Trace window. Undo Session/Edit/Trace : Reverses the previous action (where possible). Never enabled in the Trace window. Redo Session/Edit/Trace : Reverses the effect of the previous Undo. Never enabled in the Trace window."},{"location":"the_dyalog_development_environment/#keyboard-key-mappings-for-apl-glyphs","title":"Keyboard Key Mappings for APL Glyphs","text":"<p>A set of keyboard key mappings for APL glyphs is installed with the RIDE. When the RIDE is the active application, these key mappings are automatically enabled. The RIDE attempts to identify a user's locale and use the appropriate key mappings; if the locale cannot be identified or the locale-specific key mappings have not been configured, then the default configuration is used (key mappings for a US keyboard).</p> <p>Using this set of key mappings, APL glyphs are entered by pressing the prefix key followed by either the appropriate key or the SHIFT key with the appropriate key. The prefix key and key mappings can be customised.</p>"},{"location":"the_dyalog_development_environment/#other-keyboard-options","title":"Other Keyboard Options","text":"<p>Installing and enabling a set of key mappings allows Dyalog glyphs to be entered in other applications (for example, email). An alternative set of key mappings can also be used to replace the default key mappings for the RIDE.</p> <p>Information and the requisite downloadable files are available from Dyalog.</p> <p>If you have the Dyalog Unicode IME installed, then the RIDE activates it by default. It can be disabled by unchecking the Also enable Dyalog IME checkbox in the Keyboard tab of the Preferences dialog box.</p> <p>If Dyalog is not installed on the machine that the RIDE is running on, then the Dyalog Unicode IME can be downloaded and installed from [Dyalog])https://www.dyalog.com/apl-font-keyboard.htm).</p> <p>Most Linux distributions released after mid-2012 support Dyalog glyphs by default. For more information, see the Dyalog for UNIX Installation and Configuration Guide.</p>"},{"location":"the_ridedyalog_session_dialog_box/","title":"The ridedyalog session dialog box","text":""},{"location":"the_ridedyalog_session_dialog_box/#the-ride-dyalog-session-dialog-box","title":"The RIDE-Dyalog Session Dialog Box","text":"<p>When the RIDE is started, the RIDE\u2011Dyalog Session dialog box is displayed. The RIDE\u2011Dyalog Session dialog box comprises four areas, as shown in below:</p> <ul> <li>the menu bar</li> <li>the list of configurations</li> <li>the basic information for the configuration selected in the configuration list</li> <li>the type-dependent information for the configuration selected in the configuration list</li> </ul> <p>Areas of the RIDE\u2011Dyalog Session dialog box (Microsoft Windows)</p>"},{"location":"the_zero_footprint_ride/","title":"The zero footprint ride","text":""},{"location":"the_zero_footprint_ride/#the-zero-footprint-ride","title":"The Zero Footprint RIDE","text":"<p>The RIDE is an application that is implemented using a combination of HTML and Javascript. A full RIDE installation includes a small web server framework called Node/JS, which acts as a host for the application, and an embedded web browser that renders it to the user as a desktop application.</p> <p>Dyalog is able to act as a web server, hosting the RIDE application and making it available to any compatible web browser \u2013 this is known as \"Zero Footprint\" operation as the RIDE is not installed on the client machine but is downloaded by the web browser on demand. The advantage of the Zero Footprint RIDE is that an APL session can be monitored and maintained from any device with a suitable browser installed; no installation of RIDE is required.</p> <p>The Zero Footprint RIDE provides the same features for viewing and developing APL code as the desktop RIDE, with the following limitations:</p> <ul> <li>The Zero Footprint RIDE can only interact with the APL interpreter that it is connected to; none of the functionality related to launching new sessions or connecting to running APL sessions is available.</li> <li>Preferences are persisted in browser storage using cookies.</li> <li>Behaviour that is provided by the browser (undo/redo, cut/copy/paste, change font size) does not appear in the RIDE's menus.</li> <li>Window captions cannot be controlled.</li> </ul> <p>To make the Zero Footprint RIDE available from a web browser</p> <ol> <li>Install Dyalog and the RIDE. These must both be installed on the same machine; the RIDE must be installed in its default location. On non-Windows platforms the Zero Footprint RIDE is automatically installed when Dyalog is installed. For information on installing the RIDE on Microsoft Windows, see  Section .</li> <li>Set the RIDE_INIT configuration parameter to <code>HTTP:address:port</code> (see Section ), for example, <code>RIDE_INIT=HTTP:*:8080</code>.</li> <li>Start a Dyalog session.</li> </ol> <p>On non-Windows platforms (IBM AIX, macOS and Linux), the interpreter expects to find the Zero Footprint RIDE files in the [DYALOG]/RIDEapp directory; this removes the need to include the <code>HttpDir</code> field in a configuration file (if one is used \u2013 see Section 1.1).</p>"},{"location":"threads/","title":"Threads","text":""},{"location":"threads/#threads","title":"Threads","text":"<p>The RIDE supports multithreading. For information on threads, see the Dyalog Programming Reference Guide.</p> <p>The number of threads currently in use is displayed in the Status bar (see Section ).</p>"},{"location":"threads_menu/","title":"Threads menu","text":""},{"location":"threads_menu/#threads-menu","title":"Threads Menu","text":"<p>The options available under the Threads menu are detailed in below. These are only relevant when connected to a compatible interpreter. For more information on threads, see the Dyalog Programming Reference Guide.</p> Item Description Pause on Error Pauses all other threads when a thread suspends due to an error or an interrupt. Pause all Threads Pauses all threads (including currently-suspended threads). Unpause all threads Unpauses all paused threads (suspended threads remain suspended). Continue all threads Resumes all paused threads, restarts all suspended threads, and closes the Trace window."},{"location":"title_tab/","title":"Title tab","text":""},{"location":"title_tab/#title-tab","title":"Title Tab","text":"<p>Allows customisation of the caption at the top of the Session (see Section ).</p> <p>To change the caption</p> <ol> <li>Open the Title tab.</li> <li>In the Window title field, enter the new name for the Session. Some variable options that can be included are listed beneath this field \u2013 clicking on these inserts them into the Window title field.</li> <li>Click OK to save your changes and close the Preferences dialog box, Apply to save your changes without closing the Preferences dialog box or Cancel to close the Preferences dialog box without saving your changes.</li> </ol> <p>The default value is <code>{CAPTION}</code>, which is the same as <code>{WSID}</code> by default.</p> <p>Changing this to <code>{WSID} \u2013 {HOST}:{PORT} (PID: {PID})</code> gives a different result on every machine. For example:</p> <p>/Users/nick/myws.dws \u2013 127.0.0.1:4502 (PID: 293)</p> <p>Changing this to <code>{CHARS} {BITS}</code> gives information that could be the same on multiple machines. For example:</p> <p>Unicode 64</p>"},{"location":"tls_flags/","title":"Tls flags","text":""},{"location":"tls_flags/#tls-flags","title":"TLS Flags","text":"<p>TLS flags are employed as part of the certificate checking process; they determine whether a secure client or server can connect with a peer that does not have a valid certificate. When <code>Direction</code> is <code>Connect</code> or <code>Poll</code>, the RIDE acts as a server; when <code>Direction</code> is <code>Serve</code>, the RIDE acts as a client.</p> <p>The code numbers of the TLS flags described below can be added together and passed to the <code>SSLValidation</code> field to control the certificate checking process. If you do not require any of these flags, then the <code>SSLValidation</code> field should be set to <code>0</code>.</p> Code Name Description 1 CertAcceptIfIssuerUnknown Accept the peer certificate even if the issuer (root certificate) cannot be found. 2 CertAcceptIfSignerNotCA Accept the peer certificate even if it has been signed by a certificate not in the trusted root certificates' directory. 4 CertAcceptIfNotActivated Accept the peer certificate even if it is not yet valid (according to its valid from information). 8 CertAcceptIfExpired Accept the peer certificate even if it has expired (according to its valid to information). 16 CertAcceptIfIncorrectHostName Accept the peer certificate even if its hostname does not match the one it was trying to connect to. 32 CertAcceptWithoutValidating Accept the peer certificate without checking it (useful if the certificate is to be checked manually). 64 RequestClientCertificate Only valid when the RIDE is acting as a server; asks the client for a certificate but allows connections even if the client does not provide one. 128 RequireClientCertificate Only valid when the RIDE is acting as a server; asks the client for a certificate and refuses the connection if a valid certificate (subject to any other flags) is not provided by the client. <p>TLS flags have the same meaning irrespective of whether the RIDE is acting as a server or a client. However, for a server they are applied each time a new connection is established whereas for a client they are only applied when the client object is created.</p>"},{"location":"toolbar_editwindow/","title":"Toolbar editwindow","text":""},{"location":"toolbar_editwindow/#toolbar-edit-window","title":"Toolbar (Edit Window)","text":"<p>The toolbar displayed at the top of the Edit window is shown in ; the icons on this toolbar are detailed in and the icons on this toolbar are detailed below.</p> <p>The Edit Window's toolbar</p> Icon Action Description Save changes and return Saves changes and closes the Edit Window. Toggle line numbers Turns the display of line numbers on/off. Comment selected text Add a comment symbol ( <code>\u235d</code> ) to the beginning of the line in which the cursor is positioned. If text has been selected, then a comment symbol is added at the start of the line on which the selection starts and at the start of each subsequent line of text within the selection. Same as the Comment Out command (  ). Uncomment selected text Removes the comment symbol ( <code>\u235d</code> ) at the beginning of the line in which the cursor is positioned. If text has been selected, then comment symbols are removed from the start of each selected line of text. Comment symbols that are not at the start of a line of text cannot be removed. Same as the Uncomment command (  ). Search Opens the Search bar, enabling a search to be performed \u2013 see Section  ."},{"location":"toolbar_tracewindow/","title":"Toolbar tracewindow","text":""},{"location":"toolbar_tracewindow/#toolbar-trace-window","title":"Toolbar (Trace Window)","text":"<p>The toolbar displayed at the top of the Edit window is shown in ; the icons on this toolbar are detailed in and the icons on this toolbar are detailed below.</p> <p>The Edit Window's toolbar</p> Icon Action Description Quit this function Cuts the execution stack back one level. Toggle line numbers Turns the display of line numbers on/off. Execute line Executes the current line and advances to the next line. Trace into expression Traces execution of the current line and advances to the next line. If the current line calls a user-defined function then this is also traced. Stop on next line of calling function Continues execution of the code in the Trace window from the current line to completion of the current function or operator. If successful, the selection advances to the next line of the calling function (if there is one). Continue execution of this thread Closes the Trace window and resumes execution of the current application thread from the current line. Continue execution of all threads Closes the Trace window and resumes execution of all suspended threads. Interrupt Interrupts execution with a weak interrupt. Edit name Converts the Trace window into an Edit window as long as the cursor is on a blank line or in an empty space. However, if the cursor is on or immediately after an object name that is not the name of the suspended function, then an Edit window for that object name is opened. Clear stops for this object Clears all breakpoints (resets <code>\u2395STOP</code> ) on the function(s) in the Edit / Trace windows. Search Opens the Search bar, enabling a search to be performed \u2013 see Section  )."},{"location":"trace_window/","title":"Trace window","text":""},{"location":"trace_window/#trace-window","title":"Trace Window","text":"<p>The Trace window aids debugging by enabling you to step through your code line by line, display variables in Edit windows and watch them change as the execution progresses. Alternatively, you can use the Session window and Edit windows to experiment with and correct your code.</p> <p>A Trace window can be opened from the Session window by entering  <code>&lt;expression&gt;</code> . This is an explicit trace and lets you step through the execution of any non-primitive functions/operators in the expression. <p>By default, Dyalog is also configured to initiate an automatic trace whenever an error occurs, that is, the Trace window opens and becomes the active window and the line that caused the execution to suspend is selected. This is controlled by the interpreter configuration parameter TRACE_ON_ERROR (for information on configuration parameters, see the Dyalog for  Installation and Configuration Guide specific to the operating system that you are using). <p>By default, the Trace window is docked beneath the Session and Edit windows. Other than setting/removing breakpoints (see Section ), Trace windows are read only.</p>"},{"location":"type_connect/","title":"Type connect","text":""},{"location":"type_connect/#type-connect","title":"Type: Connect","text":"<p>The RIDE connects to a specific running (local or remote) Dyalog interpreter that is listening for connections. This is typically used when the RIDE is monitoring processes that have been started to provide some kind of service and to debug them if something unexpected happens.</p> <p>You should only configure a Dyalog interpreter to listen for connections if either of the following apply:</p> <ul> <li>you have a firewall that allows you specify which client machines will be able to connect</li> <li>you use a configuration file (see Appendix ) to specify suitable security filters to limit access to the interpreter.</li> </ul> <p>Your application can use <code>3502\u2336</code> to enable debugging when it is appropriate (see Section ).</p> <p>To safely experiment with configuring APL to listen for connections, leave the address field in the following examples empty, for example, <code>RIDE_INIT=\"SERVE::4502\"</code>. If the address field is empty, then only local connections are allowed. The <code>*</code> used below instructs the interpreter to listen on all available network adapters.</p> <p>To start a Dyalog Session</p> <ol> <li>On the machine that the interpreter will run on, start a Dyalog Session, optionally specifying an IP address/DNS name and port that it will listen for RIDE connections on using the RIDE_INIT configuration parameter. If specified, this will override any RIDE_INIT values defined in a configuration file (see Section 1.1).</li> <li>On the machine that the RIDE is running on:Open the RIDE-Dyalog Session dialog box.Select Connect from the Type drop-down list.Optionally, check Save protocol log \u2013 this  records all communications between the interpreter and the RIDE. The default path/filename for this interpreter\u2011independent protocol log can be changed.Select a security protocol from the drop-down list. The type-dependent information fields are displayed.</li> <li>If the security protocol is set to TCP:Host: the IP address/unique DNS name of the machine that the interpreter is running on.Port: the number of the port that the interpreter is listening on. By default, the interpreter listens on port 4502.</li> <li>Host: the IP address/unique DNS name of the machine that the interpreter is running on.</li> <li>Port: the number of the port that the interpreter is listening on. By default, the interpreter listens on port 4502.</li> <li>If the security protocol is set to SSH then the RIDE connects to a remote interpreter using the secure shell network protocol:</li> <li>Host: the IP address/unique DNS name of the machine that the interpreter is running on.</li> <li>Port: the number of the port that the interpreter is listening on. By default, the interpreter listens on port 4502.</li> <li>SSH Port: the number of the port to use for SSH. The default is 22.</li> <li>User: the user name on the machine that the interpreter is running on.</li> <li>Key file: the fully-qualified filename of the SSH identity file.</li> <li>Password/passphrase: either the password corresponding to the specified User or, if an encrypted key file is being used for authentication, the passphrase.If an encrypted Key File is specified, a passphrase is required for authentication.If an unencrypted Key File is specified, a password/passphrase is not required.If a Key File is not specified, then the password corresponding to the specified User is required.</li> <li>If an encrypted Key File is specified, a passphrase is required for authentication.</li> <li>If an unencrypted Key File is specified, a password/passphrase is not required.</li> <li>If a Key File is not specified, then the password corresponding to the specified User is required.</li> <li>If the security protocol is set to TLS/SSL then secure connections are enabled:</li> <li>Host: the IP address/unique DNS name of the machine that the interpreter is running on.</li> <li>Port: the number of the port that the interpreter is listening on. By default, the interpreter listens on port 4502.</li> <li>Three optional check boxes (and associated fields) are relevant if you have not added your root certificate to the Microsoft Certificate Store or are not running on the Microsoft Windows operating system:Provide user certificate: if selected, populate the Cert and Key fields with the fully-qualified paths to, and names of, the PEM encoded certificate file and key file respectively \u2013 the interpreter (RIDE server) uses this to verify that the RIDE client is permitted to connect to it.Custom root certificates: if selected, populate the Directory field with the fully-qualified path to, and name of, the directory that contains multiple root certificates and key files to use for authentication.Validate server subject common name matches hostname: verifies that the CN (Common Name) field of the server's certificate matches the hostname.</li> <li>Provide user certificate: if selected, populate the Cert and Key fields with the fully-qualified paths to, and names of, the PEM encoded certificate file and key file respectively \u2013 the interpreter (RIDE server) uses this to verify that the RIDE client is permitted to connect to it.</li> <li>Custom root certificates: if selected, populate the Directory field with the fully-qualified path to, and name of, the directory that contains multiple root certificates and key files to use for authentication.</li> <li>Validate server subject common name matches hostname: verifies that the CN (Common Name) field of the server's certificate matches the hostname.Click CONNECT.</li> <li>Open the RIDE-Dyalog Session dialog box.</li> <li>Select Connect from the Type drop-down list.</li> <li>Optionally, check Save protocol log \u2013 this  records all communications between the interpreter and the RIDE. The default path/filename for this interpreter\u2011independent protocol log can be changed.</li> <li>Select a security protocol from the drop-down list.</li> <li>Click CONNECT.</li> </ol>"},{"location":"type_listen/","title":"Type listen","text":""},{"location":"type_listen/#type-listen","title":"Type: Listen","text":"<p>The RIDE waits for a local or remote interpreter to connect to it. This approach is more secure than configuring the interpreter to listen for connections, because an intruder will only be able to communicate with the RIDE rather than an APL system. An application that needs to be debugged can initiate the connection to a listening RIDE using <code>3502\u2336</code> to set RIDE_INIT when debugging is desired (see Section ).</p> <p>To start a Dyalog Session</p> <ol> <li> <p>On the machine that the RIDE is running on:Open the RIDE-Dyalog Session dialog box.Select Listen from the Type drop down list. The type-dependent information fields are displayed.In the Host field, specify the IP address/unique DNS name that the RIDE will bind to. By default, the RIDE will bind to all interfaces.In the Port field, specify the number of the port that the RIDE should listen on. By default, the RIDE listens on port 4502. Optionally, check Save protocol log \u2013 this  records all communications between the interpreter and the RIDE. The default path/filename for this interpreter\u2011independent protocol log can be changed.Click LISTEN. The Waiting for connection... dialog box is displayed.</p> </li> <li> <p>Open the RIDE-Dyalog Session dialog box.</p> </li> <li>Select Listen from the Type drop down list.</li> <li>Optionally, check Save protocol log \u2013 this  records all communications between the interpreter and the RIDE. The default path/filename for this interpreter\u2011independent protocol log can be changed.</li> <li>Click LISTEN.</li> <li>On the machine that the interpreter will run on, start a Dyalog Session from the command prompt. When doing this, the IP address/DNS name for the machine that the RIDE is running on and the same port number as the RIDE is listening on must be specified as connection properties. For example, if the RIDE is running on a machine that has DNS name jaypc.dyalog.bramley and is listening on port 4502, then enter the following in a command window/at the command prompt:on AIX:<code>$ RIDE_INIT=\"CONNECT:jaypc.dyalog.bramley:4502\" /opt/mdyalog/16.0/64/unicode/p7/mapl</code>on Linux:<code>$ RIDE_INIT=\"CONNECT:jaypc.dyalog.bramley:4502\" dyalog</code>on macOS:<code>$ RIDE_INIT=\"CONNECT:jaypc.dyalog.bramley:4502\" /Dyalog/Dyalog-16.0.app/Contents/Resources/Dyalog/mapl</code>on Microsoft Windows:<code>&gt; cd \"C:\\Program Files\\Dyalog\\Dyalog APL-64 16.0 Unicode\" &gt; dyalog RIDE_INIT=CONNECT:jaypc.dyalog.bramley:4502</code></li> </ol> <p>The Dyalog Session starts.</p> <p>Alternatively, start a Dyalog Session and enter:</p> <p><code>3502\u2336'CONNECT:jaypc.dyalog.bramley:4502' 3502\u23361</code></p> <p>The new Dyalog Session will connect to the RIDE and remain connected until the Dyalog Session is terminated.</p> <pre><code>        On Microsoft Windows, an alternative to using the command window is to create a shortcut with the appropriate settings.\n</code></pre> <p>To configure the shortcut 1. Select the appropriate Dyalog installation and create a shortcut to it. 2. Right-click on the shortcut icon and select Properties from the context menu that is displayed. 3. In the Shortcut tab, go to the Target field and:place \" marks around the pathappend <code>RIDE_INIT=CONNECT:10.0.38.1:4502</code> 4. place \" marks around the path 5. append <code>RIDE_INIT=CONNECT:10.0.38.1:4502</code> 6. Click OK.</p>"},{"location":"type_start/","title":"Type start","text":""},{"location":"type_start/#type-start","title":"Type: Start","text":"<p>The most common use of the RIDE is where the RIDE launches an APL interpreter process and connects to it. The RIDE allocates a random TCP port and instructs the launched interpreter to connect to it immediately. The RIDE is also able to launch remote processes on machines that support Secure Shell (SSH) logins, in which case the communication between the RIDE and the interpreter is also encrypted.</p> <p>To start a Dyalog Session</p> <ol> <li>Open the RIDE-Dyalog Session dialog box.</li> <li>Select Start from the Type drop-down list.</li> <li>Optionally, check Save protocol log \u2013 this  records all communications between the interpreter and the RIDE. The default path/filename for this interpreter\u2011independent protocol log can be changed.</li> <li>Select a security protocol from the drop-down list.</li> <li>Click START.</li> </ol> <p>In the Dyalog Session, selecting New Session in the File menu (see Section ) launches another instance of the interpreter whose path is specified in the path to executable field.</p>"},{"location":"types/","title":"Types","text":""},{"location":"types/#types","title":"Types","text":"<p>The Type can be one of three options (selected from a drop-down list). The type that is selected determines the content of the type-dependent area. The options are:</p> <ul> <li>Start \u2013 the RIDE initiates and connects with a new local or remote interpreter (see Section )</li> <li>Connect \u2013 a specific (local or remote) Dyalog interpreter is sought by the RIDE for connection (see Section )</li> <li>Listen \u2013 the RIDE waits for a local or remote interpreter to connect to it (see Section )</li> </ul>"},{"location":"underscored_characters/","title":"Underscored characters","text":""},{"location":"underscored_characters/#underscored-characters","title":"Underscored Characters","text":"<p>Underscored characters can be entered into the Session window and Edit windows using the <code>_&lt;letter&gt;` method, for example, enter</code>_f<code>to produce</code>\u24bb`.</p> <p>Also see:</p> <ul> <li> <p>Section </p> </li> <li> <p>Section </p> </li> </ul>"},{"location":"underscored_characters_in_the_session/","title":"Underscored characters in the session","text":""},{"location":"underscored_characters_in_the_session/#underscored-characters-in-the-session","title":"Underscored Characters in the Session","text":"<p>If the RIDE is connected to a Unicode edition of Dyalog, then underscored characters are displayed correctly in the Session window, Edit windows and Trace windows. If the RIDE is connected to a classic edition of Dyalog, then the following command must be run in every APL Session to enable the underscored alphabet to be displayed correctly:       \u2395IO\u21900      \u2395AVU[97+\u237326]\u21909398+\u23732      2 \u2395NQ '.' 'SetUnicodeTable' \u2395AVU</p>"},{"location":"underscored_characters_in_window_captions/","title":"Underscored characters in window captions","text":""},{"location":"underscored_characters_in_window_captions/#underscored-characters-in-window-captions","title":"Underscored Characters in Window Captions","text":"<p>The RIDE is restricted by the operating system when it comes to displaying underscored characters in window titles (captions). This restriction means that:</p> <ul> <li>if the APL385 font is installed (and the operating system has been configured to allow the title bar to use it), underscored characters are displayed as circled characters.</li> <li>if the APL385 font is not installed, underscored characters are displayed as a white rectangle, a black rectangle containing a question mark, or some other Unicode-compliant substitution.</li> </ul> <p>Example:</p> <p>Open an Edit window for an object that has an underscored name: )ed \u24b6</p> <p>The Edit window that is opened displays the name correctly, but its title (caption) is displayed incorrectly, as shown below (assuming window is docked):</p>"},{"location":"unsupported_language_elements/","title":"Unsupported language elements","text":""},{"location":"unsupported_language_elements/#unsupported-language-elements","title":"Unsupported Language Elements","text":"<p>When running a Dyalog Session through the RIDE, a few of the features that are available with non-RIDE Sessions do not function as might be expected, for example, Section , Section  and Section .</p>"},{"location":"view_menu/","title":"View menu","text":""},{"location":"view_menu/#view-menu","title":"View Menu","text":"<p>The options available under the View menu are detailed in below. These enable the appearance of the Dyalog Session to be changed.</p> Item Description Show Language Bar Toggles display of the Language bar (see Section  ) at the top of the Session window. Show Status bar Toggles display of the Status bar (see Section  ) at the bottom of the Session window. Show Workspace Explorer Toggles display of the workspace explorer (see Section  ) to the left of the Session window. Show Debug Toggles display of the debug information window (see Section  ) to the right of the Session window. Line Wrapping in Session Toggles line wrapping. When off, <code>\u2395PW</code> is used to determine line length. When on, a combination of <code>\u2395PW</code> and line wrapping is used. Show Status Window Toggles display of the Status window, which displays system messages and supplementary information. Auto Status When checked, displays the Status window when a new message is generated for it. Stops Toggles display of an additional column at the left-hand side of the Edit / Trace windows in which break-points can be set/unset. Hiding this column does not remove any previously-set break-points. Line Numbers Toggles display of line numbers in the Edit / Trace windows. Outline Toggles code folding/outlining for control structures (including <code>:Section</code> structures) and functions in Edit windows. When toggled, existing code in an open Edit window is automatically updated to reflect the new rules. Increase Font Size Increases the size of the font in all the windows. Decrease Font Size Decreases the size of the font in all the windows. Reset Font Size Sets the size of the font in all the windows to its default value. Toggle Full Screen Toggles the entire session between its current size and full screen size."},{"location":"view_menu_customisation/","title":"View menu customisation","text":""},{"location":"view_menu_customisation/#view-menu","title":"View Menu","text":"<p>The View menu includes options that enable the appearance of the Dyalog Session running through the RIDE to be changed. Select these options to:</p> <ul> <li>show/hide the Language bar (see Section )</li> <li>show/hide the Status bar (see Section )</li> <li>show/hide the Workspace Explorer (see Section )</li> <li>show/hide the debug information window (see Section )</li> <li>change the font size in all windows in the Session</li> <li>configure the display/functionality of the Edit/Trace windows</li> </ul>"},{"location":"window_menu/","title":"Window menu","text":""},{"location":"window_menu/#window-menu","title":"Window Menu","text":"<p>The option available under the Window menu is detailed in below. This closes all open Edit and Trace windows.</p> Item Description Close All Windows Closes all open Edit and Trace windows (the Session window, workspace explorer and debug information window remain open)."},{"location":"windows_tab/","title":"Windows tab","text":""},{"location":"windows_tab/#windows-tab","title":"Windows Tab","text":"<p>Allows customisation of the size and position of floating Edit/Trace windows.</p> <p>To change the size/position of floating Edit/Trace windows</p> <ol> <li>Open the Windows tab.</li> <li>Select the appropriate check boxes and set the variables as required:- Floating windowsToggles whether new Edit and Trace windows are docked inside the Session or floating (undocked). The remaining fields on this tab are only relevant if windows are floating, that is, this option is selected.</li> <li>Single floating windowSelect this to display a single floating window with multiple tabs for different Edit/Trace windows. If this option is not selected, then multiple floating windows are displayed for individual Edit/Trace windows.</li> <li>Remember previous window positionSelect this to open new floating windows in the positions that were occupied by previously-opened windows when they were closed. The location of the first floating window opened persists between sessions.</li> <li>Size width and heightSpecifies the width and height of new Edit and Trace windows.</li> <li>Posn x and ySpecifies the x-y co-ordinates of the screen position for the top left corner of the first Edit/Trace window opened.</li> <li>Offset x and ySpecifies the x-y offsets for the top left corner of Edit/Trace windows opened relative to the previously-opened window. Only relevant if Single floating window is not selected.</li> <li>Click OK to save your changes and close the Preferences dialog box, Apply to save your changes without closing the Preferences dialog box or Cancel to close the Preferences dialog box without saving your changes.</li> </ol>"},{"location":"working_in_a_dyalog_session/","title":"Working in a Dyalog Session","text":"<p>The main purpose of a development environment is to enable a user to enter and execute expressions; this chapter describes how this can be achieved when running a Dyalog Session through the RIDE and explains the functionality that is provided to simplify the process. The functionality that is provided to simplify the process when running a Dyalog Session through the RIDE is detailed in:</p>"},{"location":"working_in_a_dyalog_session/#keyboard-shortcuts-and-command-codes","title":"Keyboard Shortcuts and Command Codes","text":"<p>Keyboard shortcuts are keystrokes that execute an action rather than produce a symbol. The RIDE supports numerous keyboard shortcuts, each of which is identified by a command code and mapped to a keystroke combination; for example, the action to open the Trace window  is identified by the code TC (described in the documentation as <code>&lt;TC&gt;</code>). For a complete list of the command codes that can be used in a Dyalog Session running through the RIDE and the keyboard shortcuts for those command codes, see Keyboard Shortcuts.</p> <p>Positioning the cursor over the  button on the right hand side of the Language bar displays a dynamic tooltip showing all configured keyboard shortcuts for command codes. Clicking on the  button displays the Preferences dialog box (the same as selecting the <code>Edit &gt; Preferences</code> menu option), through which keyboard shortcuts can be customised (see Shortcuts Tab).</p>"},{"location":"working_in_a_dyalog_session/#navigating-the-windows","title":"Navigating the Windows","text":"<p>When multiple windows are open, the window that has the focus is referred to as the active window. A window can be made the active window by clicking within it.</p> <p>The Session, Edit and Trace windows form a closed loop for the purpose of navigation:</p> <ul> <li>to make the next window in this loop the active window, enter the Tab Window command (<code>&lt;TB&gt;</code>)</li> <li>to make the previous window in this loop the active window, enter the Back Tab Window command (<code>&lt;BT&gt;</code>)</li> </ul> <p>An active Edit/Trace window can be closed after changes have been made to its content:</p> <ul> <li>to save any changes in the content of the active window before closing it, enter the Escape command (<code>&lt;EP&gt;</code>), press the  button in its menu bar or, if the window is docked, press  in the window's tab.</li> <li>to discard any changes in the content of the active window before closing it, enter the Quit command (<code>&lt;QT&gt;</code>)</li> </ul>"},{"location":"working_in_a_dyalog_session/#display-of-windows","title":"Display of Windows","text":"<p>By default, the Trace window and Edit windows are docked beneath and to the right of the Session window respectively. If the menu option View &gt; Show Workspace Explorer is checked, then the workspace explorer is docked to the far left of any open windows; if the menu option <code>View &gt; Show Debug</code> is checked, then the debug information window is docked to the far right of any open windows (see Session User Interface.</p> <p>Docked windows can be selected (by clicking within them), resized (by moving the splitter bar) and maximised/minimised (by toggling the icon at the top right of each window).</p> <p>New Edit and Trace windows can be floating rather than docked by selecting the Floating windows checkbox in the Windows tab of the Preferences dialog box.</p> <p>Clicking in the tab of any window enables that window to be dragged to a different location.</p>"},{"location":"working_in_a_dyalog_session/#entering-apl-characters","title":"Entering APL Characters","text":"<p>APL glyphs can be entered in a Dyalog Session running through the RIDE by:</p> <ul> <li>typing the glyph in the Session window or Edit window using the appropriate key combination.</li> <li>clicking the appropriate glyph on the Language bar \u2013 this inserts that glyph into the active Session/Edit window at the position of the cursor.</li> </ul> <p>When typing a glyph directly rather than using the Language bar, if you pause after entering the prefix key then the autocomplete functionality displays a list of all the glyphs that can be produced. If you enter the prefix key a second time then a list of all the glyphs that can be produced is again displayed but this time with the names (formal and informal) that are used for each glyph.</p> <p>For example:     `      \u235d default prefix key</p> <p>The autocomplete functionality list includes the following for the <code>\u235f</code> glyph: - \u235f <code>* ``logarithm  - \u235f</code> <code>naturallogarithm - \u235f `*</code>circlestar - \u235f <code>* ``starcircle - \u235f</code> ``splat</p> <p>This means that you can enter the <code>\u235f</code> glyph by selecting (or directly typing) any of the following: - `*     - <code>logarithm       -</code>naturallogarithm - <code>circlestar       -</code>starcircle - ``splat</p> <p>As you enter a name, the autocomplete functionality restricts the list of options to those that match the entered name. For example, entering:     ``ci</p> <p>restricts the list to: - \u235f <code>* ``circlestar - \u25cb</code>\u25cb <code>circular - \u233d `%</code>circlestile - \u2296 <code>&amp; ``circlebar - \u2349</code>^ <code>circlebackslash - \u2365 `O</code>circlediaeresis</p>"},{"location":"working_in_a_dyalog_session/#entering-expressions","title":"Entering Expressions","text":"<p>The RIDE provides several mechanisms that assist with accuracy and provide clarity when entering expressions in a Dyalog Session, including, paired enclosures, autocomplete, context-sensitive help and syntax clouring.</p>"},{"location":"working_in_a_dyalog_session/#paired-enclosures","title":"Paired Enclosures","text":"<p>Applicable in the Session window and the Edit window</p> <p>Enclosures in the RIDE include:</p> <ul> <li>parentheses <code>( )</code></li> <li>braces <code>{ }</code></li> <li>brackets <code>[ ]</code></li> </ul> <p>Angle brackets <code>&lt; &gt;</code> are not enclosures.</p> <p>When an opening enclosure character is entered, the RIDE automatically includes its closing pair. This reduces the risk of an invalid expression being entered due to unbalanced enclosures. This feature can be disabled in the General tab of the Preferences dialog box.</p>"},{"location":"working_in_a_dyalog_session/#autocomplete","title":"Autocomplete","text":"<p>Applicable in the Session window and the Edit window</p> <p>The RIDE includes autocomplete functionality for names to reduce the likelihood of errors when including them in an expression (and to save the user having to enter complete names or remember cases for case-sensitive  names).</p> <p>As a name is entered, the RIDE displays a pop-up window of suggestions based on the characters already entered and the context in which the name is being used.</p> <p>For example, if you enter a <code>\u2395</code> character, the pop-up list of suggestions includes all the system names (for example, system functions and system variables). Entering further characters filters the list so that only those system functions and variables that start with the exact string entered are included.</p> <p>When you start to enter a name in the Session window, the pop-up list of suggestions includes all the namespaces, variables, functions and operators that are defined in the current namespace. When you start to enter a name in the Edit window, the pop-up list of suggestions also includes all names that are localised in the function header.</p> <p>To select a name from the pop-up list of suggestions, do one of the following:</p> <ul> <li>click the mouse on the name in the pop-up list</li> <li>use the right arrow key to select the top name in the pop-up list</li> <li>use the up and down arrow keys to navigate through the suggestions and the right arrow key or the TAB key to enter the currently-highlighted name</li> </ul> <p>The selected name is then completed in the appropriate window.</p> <p>This feature can be disabled or customised in the General tab of the Preferences dialog box.</p>"},{"location":"working_in_a_dyalog_session/#context-sensitive-help","title":"Context-Sensitive Help","text":"<p>Applicable in the Session window, Edit window and Trace window</p> <p>With the cursor on or immediately after any system command, system name, control structure keyword or primitive glyph, enter the Help command (<code>&lt;HLP&gt;</code>). The documentation for that system command, system name, control structure keyword or primitive glyph will be displayed.</p>"},{"location":"working_in_a_dyalog_session/#syntax-colouring","title":"Syntax Colouring","text":"<p>Applicable in the Edit window and Trace window</p> <p>Syntax colouring assigns different colours to various components, making them easily identifiable. The default syntax colouring convention used is detailed below.</p> Colour Syntax black grey maroon red teal navy blue purple <p>The foreground colour and/or the background colour (highlighting) can be customised by syntax type \u2013 see Colours Tab.</p>"},{"location":"working_in_a_dyalog_session/#executing-expressions","title":"Executing Expressions","text":""},{"location":"working_in_a_dyalog_session/#executing-a-new-expression","title":"Executing a New Expression","text":"<p>Applicable in the Session window</p> <p>After entering a new expression in the input line, that expression is executed by pressing the Enter key or with the Enter command (). Following execution, the expression (and any displayed results) become part of the Session log."},{"location":"working_in_a_dyalog_session/#re-executing-a-previous-expression","title":"Re-executing a Previous Expression","text":"<p>Applicable in the Session window</p> <p>Instead of entering a new expression in the input line, you can move back through the Session log and re-execute a previously-entered expression.</p> <p>To re-execute a previously-entered expression</p> <ol> <li>Locate the expression to re-execute in one of the following ways:- Scroll back through the Session log.</li> <li>Use the Backward command (<code>&lt;BK&gt;</code>) and the Forward command (<code>&lt;FD&gt;</code>) to cycle backwards and forwards through the input history, successively copying previously-entered expressions into the input line.</li> <li>Position the cursor anywhere within the expression that you want to re execute and press the Enter key or use the Enter command (<code>&lt;ER&gt;</code>).</li> </ol> <p>If required, a previously-entered expression can be amended prior to execution. In this situation, when the amended expression is executed it is copied to the input line; the original expression in the Session log is not changed. If you start to edit a previous expression and then decide not to, use the Quit command (<code>&lt;QT&gt;</code>) to return the previous expression to its unaltered state.</p>"},{"location":"working_in_a_dyalog_session/#re-executing-multiple-previous-expressions","title":"Re-executing Multiple Previous Expressions","text":"<p>Applicable in the Session window</p> <p>Multiple expressions can be re-executed together irrespective of whether they were originally executed sequentially (certain system commands cause re\u2011execution to stop once they have been completed, for example, <code>)LOAD</code> and <code>)CLEAR</code>).</p> <p>To re-execute multiple previously-entered expressions</p> <ol> <li>Locate the first expression to re-execute in one of the following ways:</li> <li>Scroll back through the Session log.</li> <li>Use the Backward command (<code>&lt;BK&gt;</code>) and the Forward command (<code>&lt;FD&gt;</code>) to cycle backwards and forwards through the input history, successively copying previously-entered expressions into the input line.</li> <li>Change the expression in some way. The change does not have to impact the purpose of the expression; it could be an additional space character.</li> <li>Scroll through the Session log to locate the next expression to re-execute and change it in some way. Repeat until all the required expressions have been changed.</li> <li>Press the Enter key or enter the Enter command (<code>&lt;ER&gt;</code>).</li> </ol> <p>The amended expressions are copied to the input line and executed in the order in which they appear in the Session log; the modified expressions in the Session log are restored to their original content.</p> <p>To re-execute contiguous previously-entered expressions</p> <ol> <li>Position the cursor at the start of the first expression to re-execute.</li> <li>Press and hold the mouse button (left-click) while moving the cursor to the end of the last expression to re-execute.</li> <li>Copy the selected lines to the clipboard using the Copy command (<code>&lt;CP&gt;</code>) or the Cut command (<code>&lt;CT&gt;</code>) or the Copy/Cut options in the Edit menu.</li> <li>Position the cursor in the input line and paste the content of the clipboard back into the Session using the Paste command (<code>&lt;PT&gt;</code>), the Paste option in the Edit menu or the Paste option in the context menu.</li> <li>Press the Enter key or enter the Enter command (<code>&lt;ER&gt;</code>).</li> </ol> <p>This technique can also be used to move lines from the Edit window into the Session window and execute them.</p>"},{"location":"working_in_a_dyalog_session/#threads","title":"Threads","text":"<p>The RIDE supports multithreading. For information on threads, see the Dyalog Programming Reference Guide.</p> <p>The number of threads currently in use is displayed in the Status bar.</p>"},{"location":"working_in_a_dyalog_session/#suspending-execution","title":"Suspending Execution","text":"<p>To assist with investigations into the behaviour of a set of statements (debugging), the system can be instructed to suspend execution just before a particular statement. This is done by setting a breakpoint.</p> <p>It is sometimes necessary to suspend the execution of a function, for example, if an  endless loop has been inadvertently created or a response is taking an unacceptably long time. This is done using an interrupt.</p> <p>Suspended functions can be viewed through the stack; the most recently-referenced function is at the top of the stack. The content of the stack can be queried with the <code>)SI</code> system command; this generates a list of all suspended and pendent (that is, awaiting the return of a called function) functions, where suspended functions are indicated by a <code>*</code>. For more information on the stack and the state indicator, see the Dyalog Programming Reference Guide.</p>"},{"location":"working_in_a_dyalog_session/#breakpoints","title":"Breakpoints","text":"<p>Applicable in the Edit window and the Trace window</p> <p>When a function that includes a breakpoint is run, its execution is suspended immediately before executing the line on which the breakpoint is set and the Trace window is automatically opened (assuming that automatic trace is enabled.</p> <p>Breakpoints are defined by dyadic <code>\u2395STOP</code> and can be toggled on and off in an Edit or Trace window by left-clicking on the far left of the line before which the breakpoint is to be applied or by placing the cursor anywhere in the line before which the breakpoint is to be applied and entering the Toggle Breakpoint command (<code>&lt;BP&gt;</code>). Note that:</p> <ul> <li>Breakpoints set or cleared in an Edit window are not established until the function is fixed.</li> <li>Breakpoints set or cleared in a Trace window are established immediately.</li> </ul> <p>When a breakpoint is reached during code execution, event 1001 is generated; this can be trapped. For more information, see  <code>\u2395TRAP</code> in the Dyalog APL Language Reference Guide.</p>"},{"location":"working_in_a_dyalog_session/#interrupts","title":"Interrupts","text":"<p>A Dyalog Session running through the RIDE responds to both strong and weak interrupts.</p> <p>Entering a strong interrupt suspends execution as soon as possible (generally after completing execution of the primitive currently being processed). A strong interrupt is issued by selecting <code>Actions &gt; Strong Interrupt</code> in the menu options or by entering the Strong Interrupt command (<code>&lt;SI&gt;</code>).</p> <p>Entering a weak interrupt suspends execution at the start of the next line (generally after completing execution of the statement currently being processed). A weak interrupt is issued by selecting Actions &gt; Weak Interrupt in the menu options or by entering the Weak Interrupt command (<code>&lt;WI&gt;</code>).</p> <p>When a strong or weak interrupt is issued during code execution, event 1003 or 1002 (respectively) is generated; these can be trapped. For more information, see  <code>\u2395TRAP</code> in the Dyalog APL Language Reference Guide.</p>"},{"location":"working_in_a_dyalog_session/#terminating-a-dyalog-session-running-through-the-ride","title":"Terminating a Dyalog Session Running Through the RIDE","text":"<p>The Dyalog Session can be terminated (without having to close any open windows first) in any of the following ways:</p> <ul> <li> <p>From the menu options: </p> <ul> <li>Linux: Select File &gt; Quit</li> <li>macOS: Select Dyalog &gt; Quit Dyalog</li> <li>Microsoft Windows: Select File &gt; Quit</li> </ul> </li> <li> <p>Enter:</p> <ul> <li>Linux: Ctrl + Q</li> <li>macOS : \u2318 + Q</li> <li>Microsoft Windows: Ctrl + Q (only if the Dyalog Unicode IME is not enabled \u2013 see Keyboard Tab)</li> </ul> </li> </ul> <p>In addition, when the Session window is the active window, the Dyalog Session can be terminated cleanly in any of the following ways:</p> <ul> <li>Enter <code>)OFF</code></li> <li>Enter <code>\u2395OFF</code></li> <li>Enter <code>&lt;QIT&gt;</code></li> <li>macOS: \u2318 + W</li> </ul>"},{"location":"workspace_explorer/","title":"Workspace explorer","text":""},{"location":"workspace_explorer/#workspace-explorer","title":"Workspace Explorer","text":"<p>The workspace explorer is located to the left of the Session window. It contains a hierarchical tree view of all the namespaces, classes, functions, operators and variables in the active workspace (under <code>#</code>) and in the system namespace (under <code>\u2395SE</code>).</p> <p>Double-clicking on a namespace, class, function, operator or variable opens its definition in the Edit window.</p> <p>Display of the workspace explorer can be toggled with the View &gt; Show Workspace Explorer menu option or by entering the Toggle Workspace Explorer command ()."},{"location":"zero_footprint/","title":"Zero footprint","text":""},{"location":"zero_footprint/#zero-footprint","title":"Zero Footprint","text":"<p>The use of the RIDE from a browser requires no installation on the machine where the RIDE will run. However, the RIDE must be installed on the machine where APL is installed, so that Dyalog can act as a web server, making the necessary files available to the browser.</p> <p>When installing the RIDE, if you select the default location suggested by the installer then APL can be launched as a RIDE server without creating a configuration file (see Appendix ).</p> <p>On non-Windows platforms, the Zero Footprint RIDE is automatically installed to the default location ([DYALOG]/RIDEapp) when Dyalog is installed and no additional installation is necessary to use the Zero Footprint RIDE from a browser \u2013 see Section 1.1.</p>"}]}